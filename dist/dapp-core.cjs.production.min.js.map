{"version":3,"file":"dapp-core.cjs.production.min.js","sources":["../src/types/enums.ts","../node_modules/regenerator-runtime/runtime.js","../src/constants/errorsMessages.ts","../src/constants/network.ts","../src/constants/ledgerErrorCodes.ts","../src/constants/index.ts","../src/providers/utils.ts","../src/providers/accountProvider.ts","../src/redux/commonActions.ts","../src/utils/storage/local.ts","../src/optionalPackages/moment.ts","../src/utils/storage/session.ts","../src/utils/storage/index.ts","../src/storage/local.ts","../src/redux/slices/loginInfoSlice.ts","../src/utils/internal/optionalRedirect.ts","../src/types/transactions.ts","../src/redux/slices/networkConfigSlice.ts","../src/utils/internal/getBridgeAddressFromNetwork.ts","../src/redux/slices/accountInfoSlice.ts","../src/utils/transactions/transactionStateByStatus.ts","../src/utils/decoders/decodePart.ts","../src/utils/decoders/base64Utils.ts","../src/utils/transactions/parseMultiEsdtTransferData.ts","../src/utils/getAllStringOccurrences.ts","../src/utils/account/addressIsValid.ts","../src/utils/transactions/getTokenFromData.ts","../src/utils/transactions/isTokenTransfer.ts","../src/utils/transactions/builtCallbackUrl.ts","../src/utils/transactions/parseTransactionAfterSigning.ts","../src/redux/slices/transactionsSlice.ts","../src/redux/slices/transactionsInfoSlice.ts","../src/redux/slices/modalsSlice.ts","../src/redux/selectors/helpers.ts","../src/redux/selectors/accountInfoSelectors.ts","../src/redux/selectors/loginInfoSelectors.ts","../src/redux/middlewares/loginSessionMiddleware.ts","../src/redux/reducers.ts","../src/redux/store.ts","../src/redux/selectors/networkConfigSelectors.ts","../src/models/newTransaction.ts","../src/redux/selectors/transactionsSelectors.ts","../src/redux/selectors/transactionsInfoSelectors.ts","../src/redux/selectors/modalsSelectors.ts","../src/utils/getIsLoggedIn.ts","../src/utils/logout.ts","../src/utils/network/getAccountProviderType.ts","../src/utils/network/getEgldLabel.ts","../src/utils/network/getIsProviderEqualTo.ts","../src/utils/account/getAddress.tsx","../src/providers/proxyProvider.ts","../src/utils/account/getAccount.tsx","../src/utils/account/setNonce.tsx","../src/utils/account/getLatestNonce.tsx","../src/utils/account/getAccountBalance.tsx","../src/utils/account/refreshAccount.tsx","../src/utils/account/getShardOfAddress.ts","../src/utils/account/signMessage.ts","../src/utils/math.ts","../src/utils/validation/stringIsInteger.ts","../src/utils/validation/stringIsFloat.ts","../src/utils/validation/getIdentifierType.ts","../src/utils/operations/pipe.ts","../src/utils/operations/denominate.ts","../src/utils/operations/calculateFeeLimit.ts","../src/utils/operations/getUsdValue.tsx","../src/utils/smartContracts.ts","../src/optionalPackages/classnames.ts","../src/utils/getGeneratedClasses.ts","../src/utils/wrapperClassName.ts","../src/redux/DappProviderContext.ts","../src/services/login/useExtensionLogin.ts","../src/services/login/useWebWalletLogin.ts","../src/services/login/useLedgerLogin.ts","../src/hooks/useUpdateEffect.ts","../src/services/login/useWalletConnectLogin.ts","../src/services/transactions/transformAndSignTransactions.ts","../src/services/transactions/signTransactions.tsx","../src/services/transactions/utils.ts","../src/services/transactions/sendTransactions.ts","../src/services/transactions/hooks/useGetPendingTransactions.ts","../src/services/transactions/hooks/useParseMultiEsdtTransferData.ts","../src/services/transactions/clearTransactions.ts","../src/services/transactions/hooks/useTrackTransactionStatus.ts","../src/services/transactions/hooks/useGetFailedTransactions.ts","../src/services/transactions/hooks/useGetSuccessfulTransactions.ts","../src/services/transactions/hooks/useGetActiveTransactionsStatus.ts","../src/services/transactions/hooks/useGetCompletedTransactions.ts","../src/apiCalls/transactions/sendSignedTransactions.ts","../src/apiCalls/transactions/getTransactionsByHashes.ts","../src/components/ProviderInitializer.tsx","../src/contexts/OverrideDefaultBehaviourContext.tsx","../src/components/TransactionSender/index.ts","../src/components/TransactionsTracker/TransactionStatusTracker.tsx","../src/components/TransactionsTracker/index.tsx","../src/apiCalls/configuration/getServerConfiguration.ts","../src/apiCalls/configuration/getServerConfigurationForEnvironment.ts","../src/apiCalls/getScamAddressData.ts","../src/hooks/useGetNetworkConfig.ts","../src/hooks/useGetNotification.ts","../src/hooks/transactions/useGetTransactionDisplayInfo.ts","../src/hooks/transactions/useParseSignedTransactions.tsx","../src/hooks/transactions/useSignTransactions.tsx","../src/hooks/transactions/useGetSignedTransactions.ts","../src/optionalPackages/swr.ts","../src/hooks/transactions/useGetTokenDetails.tsx","../src/hooks/account/useGetAccountInfo.ts","../src/hooks/account/useGetLoginInfo.ts","../src/hooks/account/useGetAccountProvider.ts","../src/hooks/transactions/useSignTransactionsWithLedger.tsx","../src/hooks/transactions/useGetSignTransactionsError.ts","../src/utils/account/getAccountShard.tsx","../src/wrappers/AppInitializer.tsx","../src/models/TransactionParameter.ts","../src/wrappers/withClassNameWrapper.tsx","../src/UI/Denominate/index.tsx","../src/optionalPackages/fortawesome-free-solid-svg-icons.ts","../src/optionalPackages/react-fontawesome.ts","../src/UI/ExplorerLink/index.tsx","../src/UI/extension/LoginButton/index.tsx","../src/optionalPackages/react-bootstrap.tsx","../src/UI/ModalContainer/index.tsx","../src/UI/PageState/index.tsx","../src/UI/ledger/LoginModal/AddressRow.tsx","../src/UI/ledger/LoginModal/AddressTable.tsx","../src/UI/ledger/LoginModal/ConfirmAddress.tsx","../src/UI/ledger/LoginModal/LedgerConnect.tsx","../src/UI/ledger/LoginModal/index.tsx","../src/UI/ledger/LoginButton/index.tsx","../src/UI/NotificationModal/index.tsx","../src/UI/ProgressSteps/Dot.tsx","../src/UI/ProgressSteps/index.tsx","../src/UI/SignTransactionsModals/SignWithExtensionModal/index.tsx","../src/UI/TokenDetails/TokenSymbol/index.tsx","../src/UI/TokenDetails/index.tsx","../src/UI/TransactionData/index.tsx","../src/UI/SignTransactionsModals/SignWithLedgerModal/SignStep.tsx","../src/UI/SignTransactionsModals/SignWithLedgerModal/index.tsx","../src/UI/SignTransactionsModals/SignWithWalletConnectModal/index.tsx","../src/UI/SignTransactionsModals/index.tsx","../src/storage/session.ts","../src/UI/IconState/index.tsx","../src/UI/Progress/index.tsx","../src/UI/CopyButton/helpers/copyToClipboard.tsx","../src/UI/CopyButton/index.tsx","../src/UI/Trim/index.tsx","../src/UI/TxDetails/index.tsx","../src/UI/TransactionToast/index.tsx","../src/services/transactions/isCrossShardTransaction.ts","../src/UI/TransactionsToastList/index.tsx","../src/optionalPackages/platform.ts","../src/optionalPackages/qrcode.ts","../src/UI/walletConnect/WalletConnectLoginContainer/index.tsx","../src/UI/walletConnect/WalletConnectLoginButton/index.tsx","../src/UI/webWallet/LoginButton/index.tsx","../src/UI/UsdValue/index.tsx","../src/UI/pages/UnlockPage/index.tsx","../src/providers/apiProvider.ts","../src/constants/mnemonicWords.ts","../src/wrappers/AuthenticatedRoutesWrapper/index.tsx","../src/redux/DappProvider.tsx","../src/utils/buildUrlParams.ts","../src/utils/network/getChainID.ts","../src/utils/network/getNetworkConfig.ts","../src/utils/account/loginWithExternalProvider.ts","../src/utils/operations/nominate.ts","../src/utils/switchTrue.ts","../src/hooks/useIdleTimer.tsx"],"sourcesContent":["export enum TransactionServerStatusesEnum {\n  'pending' = 'pending',\n  'fail' = 'fail',\n  'invalid' = 'invalid',\n  'success' = 'success',\n  'executed' = 'executed',\n  'completed' = 'completed'\n}\n\nexport enum TransactionBatchStatusesEnum {\n  'signed' = 'signed',\n  'cancelled' = 'cancelled',\n  'success' = 'success',\n  'sent' = 'sent',\n  'fail' = 'fail',\n  'timedOut' = 'timedOut'\n}\n\nexport enum LoginMethodsEnum {\n  ledger = 'ledger',\n  walletconnect = 'walletconnect',\n  wallet = 'wallet',\n  extension = 'extension',\n  extra = 'extra',\n  none = ''\n}\n\nexport enum NotificationTypesEnum {\n  warning = 'warning',\n  error = 'error',\n  success = 'success'\n}\n\nexport enum TypesOfSmartContractCallsEnum {\n  MultiESDTNFTTransfer = 'MultiESDTNFTTransfer',\n  ESDTNFTTransfer = 'ESDTNFTTransfer'\n}\n\nexport enum EnvironmentsEnum {\n  testnet = 'testnet',\n  devnet = 'devnet',\n  mainnet = 'mainnet'\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","export const ERROR_SIGNING= 'error when signing';\nexport const TRANSACTION_CANCELLED = 'Transaction cancelled';\nexport const ERROR_SIGNING_TX = 'error signing transaction';\nexport const PROVIDER_NOT_INTIALIZED = 'provider not intialized';\nexport const MISSING_PROVIDER_MESSAGE = 'You need a signer/valid signer to send a transaction,use either WalletProvider, LedgerProvider or WalletConnect';\n","import { EnvironmentsEnum, NetworkType } from 'types';\n\nexport const DEFAULT_MIN_GAS_LIMIT = 50_000;\n\nexport const configEndpoint = 'dapp/config';\n\nexport const fallbackNetworkConfigurations: Record<\n  keyof typeof EnvironmentsEnum,\n  NetworkType\n> = {\n  devnet: {\n    id: 'devnet',\n    chainId: 'D',\n    name: 'Devnet',\n    egldLabel: 'xEGLD',\n    egldDenomination: '18',\n    decimals: '4',\n    gasPerDataByte: '1500',\n    walletConnectDeepLink:\n      'https://maiar.page.link/?apn=com.elrond.maiar.wallet&isi=1519405832&ibi=com.elrond.maiar.wallet&link=https://maiar.com/',\n    walletConnectBridgeAddresses: ['https://bridge.walletconnect.org'],\n    walletAddress: 'https://devnet-wallet.elrond.com',\n    apiAddress: 'https://devnet-api.elrond.com',\n    explorerAddress: 'http://devnet-explorer.elrond.com',\n    apiTimeout: '4000'\n  },\n  testnet: {\n    id: 'testnet',\n    chainId: 'T',\n    name: 'Testnet',\n    egldLabel: 'xEGLD',\n    egldDenomination: '18',\n    decimals: '4',\n    gasPerDataByte: '1500',\n    walletConnectDeepLink:\n      'https://maiar.page.link/?apn=com.elrond.maiar.wallet&isi=1519405832&ibi=com.elrond.maiar.wallet&link=https://maiar.com/',\n    walletConnectBridgeAddresses: ['https://bridge.walletconnect.org'],\n    walletAddress: 'https://testnet-wallet.elrond.com',\n    apiAddress: 'https://testnet-api.elrond.com',\n    explorerAddress: 'http://testnet-explorer.elrond.com',\n    apiTimeout: '4000'\n  },\n  mainnet: {\n    id: 'mainnet',\n    chainId: '1',\n    name: 'Mainnet',\n    egldLabel: 'xEGLD',\n    egldDenomination: '18',\n    decimals: '4',\n    gasPerDataByte: '1500',\n    walletConnectDeepLink:\n      'https://maiar.page.link/?apn=com.elrond.maiar.wallet&isi=1519405832&ibi=com.elrond.maiar.wallet&link=https://maiar.com/',\n    walletConnectBridgeAddresses: ['https://bridge.walletconnect.org'],\n    walletAddress: 'https://wallet.elrond.com',\n    apiAddress: 'https://api.elrond.com',\n    explorerAddress: 'https://explorer.elrond.com',\n    apiTimeout: '4000'\n  }\n};\n","const ledgerErrorCodes = {\n  0x9000: {\n    code: 'codeSuccess',\n    message: 'Success'\n  },\n  0x6985: {\n    code: 'ERR_USER_DENIED',\n    message: 'Rejected by user'\n  },\n  0x6d00: {\n    code: 'ERR_UNKNOWN_INSTRUCTION',\n    message: 'Unknown instruction'\n  },\n  0x6e00: {\n    code: 'ERR_WRONG_CLA',\n    message: 'Wrong CLA'\n  },\n  0x6e01: {\n    code: 'ERR_INVALID_ARGUMENTS',\n    message: 'Invalid arguments'\n  },\n  0x6e02: {\n    code: 'ERR_INVALID_MESSAGE',\n    message: 'Invalid message'\n  },\n  0x6e03: {\n    code: 'ERR_INVALID_P1',\n    message: 'Invalid P1'\n  },\n  0x6e04: {\n    code: 'ERR_MESSAGE_TOO_LONG',\n    message: 'Message too long'\n  },\n  0x6e05: {\n    code: 'ERR_RECEIVER_TOO_LONG',\n    message: 'Receiver too long'\n  },\n  0x6e06: {\n    code: 'ERR_AMOUNT_TOO_LONG',\n    message: 'Amount too long'\n  },\n  0x6e07: {\n    code: 'ERR_CONTRACT_DATA_DISABLED',\n    message: 'Contract data disabled in app options'\n  },\n  0x6e08: {\n    code: 'ERR_MESSAGE_INCOMPLETE',\n    message: 'Message incomplete'\n  },\n  0x6e10: {\n    code: 'ERR_SIGNATURE_FAILED',\n    message: 'Signature failed'\n  },\n  0x6e09: {\n    code: 'ERR_WRONG_TX_VERSION',\n    message: 'Wrong TX version'\n  },\n  0x6e0a: {\n    code: 'ERR_NONCE_TOO_LONG',\n    message: 'Nonce too long'\n  },\n  0x6e0b: {\n    code: 'ERR_INVALID_AMOUNT',\n    message: 'Invalid amount'\n  },\n  0x6e0c: {\n    code: 'ERR_INVALID_FEE',\n    message: 'Invalid fee'\n  },\n  0x6e0d: {\n    code: 'ERR_PRETTY_FAILED',\n    message: 'Pretty failed'\n  },\n  0x6e0e: {\n    code: 'ERR_DATA_TOO_LONG',\n    message: 'Data too long'\n  },\n  0x6e0f: {\n    code: 'ERR_WRONG_TX_OPTIONS',\n    message: 'Invalid transaction options'\n  },\n  0x6e11: {\n    code: 'ERR_SIGN_TX_DEPRECATED',\n    message:\n      'Regular transaction signing is deprecated in this version. Use hash signing.'\n  }\n};\n\nexport default ledgerErrorCodes;\n","export * as errorsMessages from './errorsMessages';\nexport * as networkConstants from './network';\nexport * as ledgerErrorCodes from './ledgerErrorCodes';\n\nexport const gasPriceModifier = '0.01';\nexport const gasPerDataByte = '1500';\nexport const gasLimit = '50000';\nexport const gasPrice = 1_000_000_000;\nexport const denomination = 18;\nexport const decimals = 4;\nexport const version = 1;\n\nexport const ledgerContractDataEnabledValue = 1;\n\nexport const dappInitRoute = '/dapp/init';\nexport const walletSignSession = 'signSession';\n","import {\n  ExtensionProvider,\n  HWProvider,\n  IDappProvider,\n  IHWElrondApp,\n  SignableMessage,\n  Transaction,\n  WalletConnectProvider,\n  WalletProvider\n} from '@elrondnetwork/erdjs';\nimport { ledgerContractDataEnabledValue } from 'constants/index';\nimport { LoginMethodsEnum } from 'types/enums';\n\nexport const DAPP_INIT_ROUTE = '/dapp/init';\n\nexport const getProviderType = (\n  provider?: IDappProvider | null\n): LoginMethodsEnum => {\n  switch (provider?.constructor) {\n    case WalletProvider:\n      return LoginMethodsEnum.wallet;\n    case WalletConnectProvider:\n      return LoginMethodsEnum.walletconnect;\n    case HWProvider:\n      return LoginMethodsEnum.ledger;\n    case ExtensionProvider:\n      return LoginMethodsEnum.extension;\n    case EmptyProvider:\n      return LoginMethodsEnum.none;\n    default:\n      return LoginMethodsEnum.extra;\n  }\n};\n\nexport const newWalletProvider = (walletAddress: string) =>\n  new WalletProvider(`${walletAddress}${DAPP_INIT_ROUTE}`);\n\nexport const getLedgerConfiguration = async (\n  initializedHwWalletP: HWProvider\n) => {\n  if (!initializedHwWalletP.isInitialized()) {\n    throw new Error('Unable to get version. Provider not initialized');\n  }\n  const hwApp: IHWElrondApp = (initializedHwWalletP as any).hwApp;\n  const { contractData, version } = await hwApp.getAppConfiguration();\n  const dataEnabled = contractData === ledgerContractDataEnabledValue;\n  return { version, dataEnabled };\n};\n\nconst notInitializedError = (caller: string) => {\n  return `Unable to perform ${caller}, Provider not initialized`;\n};\n\nexport class EmptyProvider implements IDappProvider {\n  async init() {\n    return false;\n  }\n  login(options?: { callbackUrl?: string; token?: string }): Promise<string> {\n    throw new Error(notInitializedError(`login with options: ${options}`));\n  }\n  async logout(options?: { callbackUrl?: string }): Promise<boolean> {\n    throw new Error(notInitializedError(`logout with options: ${options}`));\n  }\n  async getAddress(): Promise<string> {\n    throw new Error(notInitializedError('getAddress'));\n  }\n  isInitialized(): boolean {\n    return false;\n  }\n  async isConnected(): Promise<boolean> {\n    return false;\n  }\n  async sendTransaction(\n    transaction: Transaction,\n    options?: { callbackUrl?: string }\n  ): Promise<Transaction> {\n    throw new Error(\n      notInitializedError(\n        `sendTransaction with transactions: ${transaction} options: ${options}`\n      )\n    );\n  }\n  async signTransaction(\n    transaction: Transaction,\n    options?: { callbackUrl?: string }\n  ): Promise<Transaction> {\n    throw new Error(\n      notInitializedError(\n        `signTransaction with transactions: ${transaction} options: ${options}`\n      )\n    );\n  }\n  async signTransactions(\n    transactions: Transaction[],\n    options?: { callbackUrl?: string }\n  ): Promise<Transaction[]> {\n    throw new Error(\n      notInitializedError(\n        `signTransactions with transactions: ${transactions} options: ${options}`\n      )\n    );\n  }\n  async signMessage(message: SignableMessage): Promise<SignableMessage> {\n    throw new Error(notInitializedError(`signTransactions with ${message}`));\n  }\n}\n\nexport const emptyProvider = new EmptyProvider();\n","import { IDappProvider } from '@elrondnetwork/erdjs';\nimport { emptyProvider } from './utils';\n\nlet accountProvider: IDappProvider = emptyProvider;\n\nlet externalProvider: IDappProvider | null = null;\n\nexport function setAccountProvider(provider: IDappProvider) {\n  accountProvider = provider;\n}\n\nexport function setExternalProvider(provider: IDappProvider) {\n  externalProvider = provider;\n}\n\nexport function setExternalProviderAsAccountProvider() {\n  if (externalProvider != null) {\n    accountProvider = externalProvider;\n  }\n}\n\nexport function getAccountProvider() {\n  return accountProvider || emptyProvider;\n}\n\nexport function getExternalProvider() {\n  return externalProvider;\n}\n","import { createAction } from '@reduxjs/toolkit';\nimport { LoginMethodsEnum } from 'types/enums';\n\nexport interface LoginActionPayloadType {\n  address: string;\n  loginMethod: LoginMethodsEnum;\n}\n\nexport const logoutAction = createAction('logout');\n\nexport const loginAction = createAction(\n  'login',\n  (payload: LoginActionPayloadType) => ({ payload })\n);\n","import moment from 'moment';\n\nexport const localStorageKeys = {\n  loginExpiresAt: 'dapp-core-login-expires-at'\n} as const;\n\ntype LocalValueType = keyof typeof localStorageKeys;\ntype LocalKeyType = typeof localStorageKeys[LocalValueType];\n\ntype ExpiresType = number | false;\n\nconst hasLocalStorage = typeof localStorage !== 'undefined';\n\nexport const setItem = ({\n  key,\n  data,\n  expires\n}: {\n  key: LocalKeyType;\n  data: any;\n  expires: ExpiresType;\n}) => {\n  if (!hasLocalStorage) {\n    return;\n  }\n  localStorage.setItem(\n    String(key),\n    JSON.stringify({\n      expires,\n      data\n    })\n  );\n};\n\nexport const getItem = (key: LocalKeyType): any => {\n  if (!hasLocalStorage) {\n    return;\n  }\n  const item = localStorage.getItem(String(key));\n  if (!item) {\n    return null;\n  }\n\n  const deserializedItem = JSON.parse(item);\n  if (!deserializedItem) {\n    return null;\n  }\n\n  if (\n    !deserializedItem.hasOwnProperty('expires') ||\n    !deserializedItem.hasOwnProperty('data')\n  ) {\n    return null;\n  }\n\n  const expired = moment().unix() >= deserializedItem.expires;\n  if (expired) {\n    localStorage.removeItem(String(key));\n    return null;\n  }\n\n  return deserializedItem.data;\n};\n\nexport const removeItem = (key: LocalKeyType) => {\n  if (!hasLocalStorage) {\n    return;\n  }\n  localStorage.removeItem(String(key));\n};\n","let moment: any = {};\ntry {\n  moment = require('moment');\n} catch (err) {}\n\nexport default moment;\n","import moment from 'optionalPackages/moment';\n\nexport type SessionKeyType = 'address' | 'shard' | 'toasts' | 'toastProgress';\ntype ExpiresType = number | false;\n\nexport const setItem = ({\n  key,\n  data,\n  expires\n}: {\n  key: SessionKeyType;\n  data: any;\n  expires: ExpiresType;\n}) => {\n  sessionStorage.setItem(\n    String(key),\n    JSON.stringify({\n      expires,\n      data\n    })\n  );\n};\n\nexport const getItem = (key: SessionKeyType): any => {\n  const item = sessionStorage.getItem(String(key));\n  if (!item) {\n    return null;\n  }\n\n  const deserializedItem = JSON.parse(item);\n  if (!deserializedItem) {\n    return null;\n  }\n\n  if (\n    !deserializedItem.hasOwnProperty('expires') ||\n    !deserializedItem.hasOwnProperty('data')\n  ) {\n    return null;\n  }\n\n  const expired = moment().unix() >= deserializedItem.expires;\n  if (expired) {\n    sessionStorage.removeItem(String(key));\n    return null;\n  }\n\n  return deserializedItem.data;\n};\n\nexport const removeItem = (key: SessionKeyType) =>\n  sessionStorage.removeItem(String(key));\n\nexport const clear = () => sessionStorage.clear();\n\nexport const storage = {\n  setItem,\n  getItem,\n  removeItem,\n  clear\n};\n\nexport default storage;\n","import * as local from './local';\nimport * as session from './session';\n\nexport const storage = { session, local };\n\nexport default storage;\n","import storage from 'utils/storage';\nimport { localStorageKeys } from 'utils/storage/local';\n\nexport function getNewLoginExpiresTimestamp() {\n  return new Date().setHours(new Date().getHours() + 24);\n}\n\nexport function setLoginExpiresAt(expiresAt: number) {\n  storage.local.setItem({\n    key: localStorageKeys.loginExpiresAt,\n    data: expiresAt,\n    expires: expiresAt\n  });\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { setLoginExpiresAt, getNewLoginExpiresTimestamp } from 'storage/local';\nimport { TokenLoginType } from 'types';\nimport { LoginMethodsEnum } from 'types/enums';\nimport {\n  loginAction,\n  logoutAction,\n  LoginActionPayloadType\n} from '../commonActions';\n\nexport interface WalletConnectLoginType {\n  loginType: string;\n  callbackRoute: string;\n  logoutRoute: string;\n}\n\nexport interface LedgerLoginType {\n  index: number;\n  loginType: string;\n}\n\nexport interface LoginInfoType {\n  data: any;\n  expires: number;\n}\n\nexport interface LoginInfoStateType {\n  loginMethod: LoginMethodsEnum;\n  walletConnectLogin: WalletConnectLoginType | null;\n  ledgerLogin: LedgerLoginType | null;\n  tokenLogin: TokenLoginType | null;\n  walletLogin: LoginInfoType | null;\n  extensionLogin: LoginInfoType | null;\n}\n\nconst initialState: LoginInfoStateType = {\n  loginMethod: LoginMethodsEnum.none,\n  walletConnectLogin: null,\n  ledgerLogin: null,\n  tokenLogin: null,\n  walletLogin: null,\n  extensionLogin: null\n};\n\nexport const loginInfoSlice = createSlice({\n  name: 'loginInfoSlice',\n  initialState: initialState,\n  reducers: {\n    setLoginMethod: (\n      state: LoginInfoStateType,\n      action: PayloadAction<LoginMethodsEnum>\n    ) => {\n      state.loginMethod = action.payload;\n    },\n    setTokenLogin: (\n      state: LoginInfoStateType,\n      action: PayloadAction<TokenLoginType>\n    ) => {\n      state.tokenLogin = action.payload;\n    },\n    setTokenLoginSignature: (\n      state: LoginInfoStateType,\n      action: PayloadAction<string>\n    ) => {\n      if (state?.tokenLogin != null) {\n        state.tokenLogin.signature = action.payload;\n      }\n    },\n    setWalletLogin: (\n      state: LoginInfoStateType,\n      action: PayloadAction<LoginInfoType | null>\n    ) => {\n      state.walletLogin = action.payload;\n    },\n    setWalletConnectLogin: (\n      state: LoginInfoStateType,\n      action: PayloadAction<WalletConnectLoginType | null>\n    ) => {\n      state.walletConnectLogin = action.payload;\n    },\n    setLedgerLogin: (\n      state: LoginInfoStateType,\n      action: PayloadAction<LedgerLoginType | null>\n    ) => {\n      state.ledgerLogin = action.payload;\n    }\n  },\n  extraReducers: (builder) => {\n    builder.addCase(logoutAction, () => {\n      return initialState;\n    });\n    builder.addCase(\n      loginAction,\n      (\n        state: LoginInfoStateType,\n        action: PayloadAction<LoginActionPayloadType>\n      ) => {\n        state.loginMethod = action.payload.loginMethod;\n        setLoginExpiresAt(getNewLoginExpiresTimestamp());\n      }\n    );\n  }\n});\n\nexport const {\n  setLoginMethod,\n  setWalletConnectLogin,\n  setLedgerLogin,\n  setTokenLogin,\n  setTokenLoginSignature,\n  setWalletLogin\n} = loginInfoSlice.actions;\n\nexport default loginInfoSlice.reducer;\n","export function optionalRedirect(\n  callbackUrl?: string,\n  shouldRedirect?: boolean\n) {\n  if (shouldRedirect && callbackUrl != null) {\n    setTimeout(() => {\n      if (!window.location.pathname.includes(callbackUrl)) {\n        window.location.href = callbackUrl;\n      }\n    }, 200);\n  }\n}\n","import React from 'react';\nimport { Address, Transaction } from '@elrondnetwork/erdjs';\nimport {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum\n} from './enums';\n\nexport interface TransactionsToSignType {\n  transactions: RawTransactionType[];\n  callbackRoute?: string;\n  sessionId: string;\n  customTransactionInformation: CustomTransactionInformation;\n}\n\nexport interface SignedTransactionsBodyType {\n  transactions?: SignedTransactionType[];\n  status?: TransactionBatchStatusesEnum;\n  errorMessage?: string;\n  customTransactionInformation?: CustomTransactionInformation;\n}\n\nexport interface SignedTransactionsType {\n  [sessionId: string]: SignedTransactionsBodyType;\n}\n\nexport interface TransactionParameter {\n  sender: Address;\n  receiver: Address;\n  functionName: string;\n  inputParameters: string[];\n  outputParameters: string[];\n}\n\nexport interface RawTransactionType {\n  signature?: string;\n  value: string;\n  receiver: string;\n  gasPrice: number;\n  gasLimit: number;\n  sender: string;\n  nonce: number;\n  data: string;\n  chainID: string;\n  version?: number;\n  options?: number;\n}\n\nexport interface SignedTransactionType extends RawTransactionType {\n  hash: string;\n  status: TransactionServerStatusesEnum;\n  errorMessage?: string;\n  customTransactionInformation?: CustomTransactionInformation;\n}\n\nexport interface TxDataTokenType {\n  tokenId: string;\n  amount: string;\n  receiver: string;\n  type?: MultiEsdtTxType['type'] | '';\n  nonce?: string;\n  multiTxData?: string;\n}\n\nexport type TxsDataTokensType = Record<string, TxDataTokenType> | undefined;\n\ninterface MultiEsdtType {\n  type:\n    | TransactionTypesEnum.esdtTransaction\n    | TransactionTypesEnum.nftTransaction;\n  receiver: string;\n  token?: string;\n  nonce?: string;\n  amount?: string;\n  data: string;\n}\n\ninterface MultiEsdtScCallType {\n  type: TransactionTypesEnum.scCall;\n  receiver: string;\n  token?: string;\n  nonce?: string;\n  amount?: string;\n  data: string;\n}\n\nexport type MultiEsdtTxType = MultiEsdtType | MultiEsdtScCallType;\n\nexport type MultiSignTxType = {\n  multiTxData?: string;\n  transactionIndex: number;\n  transaction: Transaction;\n};\n\nexport interface TokenOptionType {\n  name: string;\n  identifier: string;\n  balance: string;\n  decimals: number;\n  collection?: string;\n  avatar?: string;\n}\n\nexport interface SimpleTransactionType {\n  value: string;\n  receiver: string;\n  data?: string;\n  gasPrice?: number;\n  gasLimit?: number;\n  chainID?: string;\n  version?: number;\n  options?: number;\n}\n\nexport interface TransactionsDisplayInfoType {\n  errorMessage?: string;\n  successMessage?: string;\n  processingMessage?: string;\n  submittedMessage?: string;\n  transactionDuration?: number;\n}\n\nexport interface SendSimpleTransactionPropsType {\n  transactions: SimpleTransactionType[];\n  minGasLimit?: number;\n}\n\nexport interface SendTransactionsPropsType {\n  transactions:\n    | Transaction\n    | SimpleTransactionType\n    | (Transaction | SimpleTransactionType)[];\n  redirectAfterSign?: boolean;\n  signWithoutSending: boolean;\n  completedTransactionsDelay?: number;\n  callbackRoute?: string;\n  transactionsDisplayInfo: TransactionsDisplayInfoType;\n  minGasLimit?: number;\n  sessionInformation?: any;\n}\n\nexport interface SignTransactionsPropsType {\n  transactions: Transaction[] | Transaction;\n  minGasLimit?: number;\n  callbackRoute?: string;\n  transactionsDisplayInfo: TransactionsDisplayInfoType;\n  customTransactionInformation: CustomTransactionInformation;\n}\n\nexport enum TransactionTypesEnum {\n  MultiESDTNFTTransfer = 'MultiESDTNFTTransfer',\n  ESDTTransfer = 'ESDTTransfer',\n  ESDTNFTTransfer = 'ESDTNFTTransfer',\n  esdtTransaction = 'esdtTransaction',\n  nftTransaction = 'nftTransaction',\n  scCall = 'scCall'\n}\n\nexport interface ActiveLedgerTransactionType {\n  transaction: Transaction;\n  transactionTokenInfo: TxDataTokenType;\n  isTokenTransaction: boolean;\n  dataField: string;\n  receiverScamInfo: string | null;\n}\n\nexport interface SmartContractResult {\n  hash: string;\n  timestamp: number;\n  nonce: number;\n  gasLimit: number;\n  gasPrice: number;\n  value: string;\n  sender: string;\n  receiver: string;\n  data: string;\n  prevTxHash: string;\n  originalTxHash: string;\n  callType: string;\n  miniBlockHash: string;\n  returnMessage: string;\n}\n\nexport interface SignModalPropsType {\n  handleClose: () => void;\n  error: string | null;\n  callbackRoute?: string;\n  transactions: Transaction[];\n  className?: string;\n  verifyReceiverScam?: boolean;\n  title?: React.ReactNode;\n}\n\nexport interface CustomTransactionInformation {\n  redirectAfterSign: boolean;\n  sessionInformation: any;\n  completedTransactionsDelay?: number;\n  signWithoutSending: boolean;\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport omit from 'lodash.omit';\nimport {\n  AccountInfoSliceNetworkType,\n  BaseNetworkType,\n  NetworkType\n} from 'types';\nimport { getBridgeAddressFromNetwork } from 'utils/internal';\n\nexport const defaultNetwork: AccountInfoSliceNetworkType = {\n  id: 'not-configured',\n  chainId: '',\n  name: 'NOT CONFIGURED',\n  egldLabel: '',\n  egldDenomination: '18',\n  decimals: '4',\n  gasPerDataByte: '1500',\n  walletConnectDeepLink: '',\n  walletConnectBridgeAddress: '',\n  walletAddress: '',\n\n  apiAddress: '',\n  explorerAddress: '',\n  apiTimeout: '4000'\n};\n\nexport interface NetworkConfigStateType {\n  network: AccountInfoSliceNetworkType;\n  chainID: string;\n}\n\nconst initialState: NetworkConfigStateType = {\n  network: defaultNetwork,\n  chainID: '-1'\n};\n\nexport const networkConfigSlice = createSlice({\n  name: 'appConfig',\n  initialState: initialState,\n  reducers: {\n    initializeNetworkConfig: (\n      state: NetworkConfigStateType,\n      action: PayloadAction<NetworkType>\n    ) => {\n      const walletConnectBridgeAddress = getBridgeAddressFromNetwork(\n        action.payload.walletConnectBridgeAddresses\n      );\n      const network: BaseNetworkType = omit(\n        action.payload,\n        'walletConnectBridgeAddresses'\n      );\n      state.network = {\n        ...state.network,\n        ...network,\n        walletConnectBridgeAddress\n      };\n    },\n    setChainID: (\n      state: NetworkConfigStateType,\n      action: PayloadAction<string>\n    ) => {\n      state.chainID = action.payload;\n    }\n  }\n});\n\nexport const {\n  initializeNetworkConfig,\n  setChainID\n} = networkConfigSlice.actions;\n\nexport default networkConfigSlice.reducer;\n","export function getBridgeAddressFromNetwork(\n  walletConnectBridgeAddresses: string[]\n) {\n  return walletConnectBridgeAddresses[\n    Math.floor(Math.random() * walletConnectBridgeAddresses.length)\n  ];\n}\n","import { Address } from '@elrondnetwork/erdjs';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { REHYDRATE } from 'redux-persist';\nimport storage from 'utils/storage';\nimport { localStorageKeys } from 'utils/storage/local';\n\nimport {\n  loginAction,\n  logoutAction,\n  LoginActionPayloadType\n} from '../commonActions';\n\nexport interface AccountType {\n  address: string;\n  balance: string;\n  nonce: number;\n  code?: string;\n  username?: string;\n}\nexport interface LedgerAccountType {\n  index: number;\n  address: string;\n  hasContractDataEnabled: boolean;\n  version: string;\n}\n\nexport interface UpdateLedgerAccountPayloadType {\n  index: number;\n  address: string;\n}\n\nexport interface AccountInfoSliceType {\n  address: string;\n  shard?: number;\n  account: AccountType;\n  publicKey: string;\n  ledgerAccount: LedgerAccountType | null;\n  walletConnectAccount: string | null;\n  isAccountLoading: boolean;\n  accountLoadingError: string | null;\n}\n\nexport const emptyAccount: AccountType = {\n  balance: '...',\n  address: '',\n  nonce: 0\n};\n\nconst initialState: AccountInfoSliceType = {\n  address: '',\n  account: emptyAccount,\n  ledgerAccount: null,\n  publicKey: '',\n  walletConnectAccount: null,\n  isAccountLoading: true,\n  accountLoadingError: null\n};\n\nexport const accountInfoSlice = createSlice({\n  name: 'accountInfoSlice',\n  initialState: initialState,\n  reducers: {\n    setAddress: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<string>\n    ) => {\n      const address = action.payload;\n      state.address = address;\n      state.publicKey = new Address(address).hex();\n    },\n    setAccount: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<AccountType>\n    ) => {\n      state.account = action.payload;\n      state.isAccountLoading = false;\n      state.accountLoadingError = null;\n    },\n    setAccountNonce: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<number>\n    ) => {\n      state.account.nonce = action.payload;\n    },\n    setAccountShard: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<number>\n    ) => {\n      state.shard = action.payload;\n    },\n    setLedgerAccount: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<LedgerAccountType | null>\n    ) => {\n      state.ledgerAccount = action.payload;\n    },\n    updateLedgerAccount: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<UpdateLedgerAccountPayloadType>\n    ) => {\n      if (state.ledgerAccount != null) {\n        state.ledgerAccount.index = action.payload.index;\n        state.ledgerAccount.address = action.payload.address;\n      }\n    },\n    setWalletConnectAccount: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<string | null>\n    ) => {\n      state.walletConnectAccount = action.payload;\n    },\n    setIsAccountLoading: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<boolean>\n    ) => {\n      state.isAccountLoading = action.payload;\n      state.accountLoadingError = null;\n    },\n    setAccountLoadingError: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<string | null>\n    ) => {\n      state.accountLoadingError = action.payload;\n      state.isAccountLoading = false;\n    }\n  },\n  extraReducers: (builder) => {\n    builder.addCase(logoutAction, () => {\n      storage.local.removeItem(localStorageKeys.loginExpiresAt);\n      return initialState;\n    });\n    builder.addCase(\n      loginAction,\n      (\n        state: AccountInfoSliceType,\n        action: PayloadAction<LoginActionPayloadType>\n      ) => {\n        const { address } = action.payload;\n        state.address = address;\n        state.publicKey = new Address(address).hex();\n      }\n    );\n    builder.addCase(REHYDRATE, (state, action: any) => {\n      if (!action.payload?.account) {\n        return;\n      }\n\n      const { account: accountInfo } = action.payload;\n      const { address, shard, account, publicKey } = accountInfo;\n      state.address = address;\n      state.shard = shard;\n      state.account = account;\n      state.publicKey = publicKey;\n    });\n  }\n});\n\nexport const {\n  setAccount,\n  setAddress,\n  setAccountNonce,\n  setAccountShard,\n  setLedgerAccount,\n  updateLedgerAccount,\n  setWalletConnectAccount,\n  setIsAccountLoading,\n  setAccountLoadingError\n} = accountInfoSlice.actions;\n\nexport default accountInfoSlice.reducer;\n","import {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum\n} from 'types/enums';\n\nexport const pendingBatchTransactionsStates = [\n  TransactionBatchStatusesEnum.sent\n];\nexport const successBatchTransactionsStates = [\n  TransactionBatchStatusesEnum.success\n];\n\nexport const failBatchTransactionsStates = [\n  TransactionBatchStatusesEnum.fail,\n  TransactionBatchStatusesEnum.cancelled,\n  TransactionBatchStatusesEnum.timedOut\n];\n\nexport const timedOutBatchTransactionsStates = [\n  TransactionBatchStatusesEnum.timedOut\n];\n\nexport const pendingServerTransactionsStatuses = [\n  TransactionServerStatusesEnum.pending\n];\n\nexport const successServerTransactionsStates = [\n  TransactionServerStatusesEnum.success\n];\n\nexport const completedServerTransactionsStates = [\n  TransactionServerStatusesEnum.completed\n];\n\nexport const failServerTransactionsStates = [\n  TransactionServerStatusesEnum.fail,\n  TransactionServerStatusesEnum.invalid\n];\n\nexport function getIsTransactionCompleted(\n  status?: TransactionServerStatusesEnum | TransactionBatchStatusesEnum\n) {\n  return completedServerTransactionsStates.includes(\n    status as TransactionServerStatusesEnum\n  );\n}\n\nexport function getIsTransactionPending(\n  status?: TransactionServerStatusesEnum | TransactionBatchStatusesEnum\n) {\n  return (\n    status != null &&\n    (isBatchTransactionPending(status as TransactionBatchStatusesEnum) ||\n      isServerTransactionPending(status as TransactionServerStatusesEnum))\n  );\n}\n\nexport function getIsTransactionSuccessful(\n  status?: TransactionServerStatusesEnum | TransactionBatchStatusesEnum\n) {\n  return (\n    status != null &&\n    (isBatchTransactionSuccessful(status as TransactionBatchStatusesEnum) ||\n      isServerTransactionSuccessful(status as TransactionServerStatusesEnum))\n  );\n}\n\nexport function getIsTransactionFailed(\n  status?: TransactionServerStatusesEnum | TransactionBatchStatusesEnum\n) {\n  return (\n    status != null &&\n    (isBatchTransactionFailed(status as TransactionBatchStatusesEnum) ||\n      isServerTransactionFailed(status as TransactionServerStatusesEnum))\n  );\n}\n\nexport function getIsTransactionTimedOut(\n  status?: TransactionServerStatusesEnum | TransactionBatchStatusesEnum\n) {\n  return (\n    status != null &&\n    isBatchTransactionTimedOut(status as TransactionBatchStatusesEnum)\n  );\n}\n\nexport function isBatchTransactionPending(\n  status?: TransactionBatchStatusesEnum\n) {\n  return status != null && pendingBatchTransactionsStates.includes(status);\n}\n\nexport function isBatchTransactionSuccessful(\n  status: TransactionBatchStatusesEnum\n) {\n  return status != null && successBatchTransactionsStates.includes(status);\n}\n\nexport function isBatchTransactionFailed(status: TransactionBatchStatusesEnum) {\n  return status != null && failBatchTransactionsStates.includes(status);\n}\n\nexport function isBatchTransactionTimedOut(\n  status?: TransactionBatchStatusesEnum\n) {\n  return status != null && timedOutBatchTransactionsStates.includes(status);\n}\n\nexport function isServerTransactionPending(\n  status?: TransactionServerStatusesEnum\n) {\n  return status != null && pendingServerTransactionsStatuses.includes(status);\n}\nexport function isServerTransactionSuccessful(\n  status: TransactionServerStatusesEnum\n) {\n  return status != null && successServerTransactionsStates.includes(status);\n}\n\nexport function isServerTransactionFailed(\n  status: TransactionServerStatusesEnum\n) {\n  return status != null && failServerTransactionsStates.includes(status);\n}\n","const isUtf8 = (str: string) => {\n  for (let i = 0; i < str.length; i++) {\n    if (str.charCodeAt(i) > 127) return false;\n  }\n  return true;\n};\n\nexport function decodePart(part: string) {\n  let decodedPart = part;\n\n  try {\n    const hexPart = Buffer.from(part, 'hex').toString().trim();\n\n    if (isUtf8(hexPart) && hexPart.length > 1) {\n      decodedPart = hexPart;\n    }\n  } catch (error) {}\n\n  return decodedPart;\n}\n\nexport default decodePart;\n","export function isStringBase64(string: string) {\n  try {\n    return Buffer.from(string, 'base64').toString() === atob(string);\n  } catch (err) {\n    return false;\n  }\n}\n\nexport function encodeToBase64(string: string) {\n  return btoa(string);\n}\n\nexport function decodeBase64(string: string) {\n  return atob(string);\n}\n","import BigNumber from 'bignumber.js';\nimport { MultiEsdtTxType, TransactionTypesEnum } from 'types/transactions';\nimport { decodePart } from 'utils/decoders';\nimport { getAllStringOccurrences } from '../getAllStringOccurrences';\n\n// TODO: add tests\nexport function parseMultiEsdtTransferData(data?: string) {\n  const transactions: MultiEsdtTxType[] = [];\n  let contractCallDataIndex = 0;\n  try {\n    if (\n      data?.startsWith(TransactionTypesEnum.MultiESDTNFTTransfer) &&\n      data?.includes('@')\n    ) {\n      const [, receiver, encodedTxCount, ...rest] = data?.split('@');\n      if (receiver) {\n        const txCount = new BigNumber(encodedTxCount, 16).toNumber();\n\n        let itemIndex = 0;\n        for (let txIndex = 0; txIndex < txCount; txIndex++) {\n          const transaction: MultiEsdtTxType = {\n            type: TransactionTypesEnum.nftTransaction,\n            data: '',\n            receiver\n          };\n\n          for (let index = 0; index < 3; index++) {\n            switch (index) {\n              case 0:\n                transaction.token = decodePart(rest[itemIndex]);\n                transaction.data = rest[itemIndex];\n                break;\n              case 1: {\n                const encodedNonce =\n                  rest[itemIndex] && rest[itemIndex].length\n                    ? rest[itemIndex]\n                    : '';\n                if (encodedNonce) {\n                  transaction.nonce = encodedNonce;\n                } else {\n                  transaction.type = TransactionTypesEnum.esdtTransaction;\n                }\n                transaction.data = `${transaction.data}@${rest[itemIndex]}`;\n                break;\n              }\n              case 2:\n                transaction.amount = new BigNumber(\n                  rest[itemIndex],\n                  16\n                ).toString(10);\n                transaction.data = `${transaction.data}@${rest[itemIndex]}`;\n                break;\n              default:\n                break;\n            }\n            contractCallDataIndex = itemIndex + 1;\n            itemIndex++;\n          }\n          transactions[txIndex] = transaction;\n        }\n\n        const isDifferentFromTxCount = transactions.length !== txCount;\n        const hasInvalidNoOfAdSigns = transactions.some((tx) => {\n          const adSignOccurences = getAllStringOccurrences(tx.data, '@').length;\n          return adSignOccurences !== 2;\n        });\n        const hasAdStart = transactions.some((tx) => tx.data.startsWith('@'));\n        if (isDifferentFromTxCount || hasInvalidNoOfAdSigns || hasAdStart) {\n          return [];\n        }\n        if (rest[contractCallDataIndex]) {\n          let scCallData = rest[contractCallDataIndex];\n          for (let i = contractCallDataIndex + 1; i < rest.length; i++) {\n            scCallData += '@' + rest[i];\n          }\n          transactions[txCount] = {\n            type: TransactionTypesEnum.scCall,\n            data: scCallData,\n            receiver\n          };\n        }\n      }\n    }\n  } catch (err) {\n    console.error('failed parsing tx', err);\n    return transactions;\n  }\n  return transactions;\n}\n\nexport default parseMultiEsdtTransferData;\n","export const getAllStringOccurrences = (\n  sourceStr: string,\n  searchStr: string\n) => {\n  const startingIndices = [];\n\n  let indexOccurence = sourceStr.indexOf(searchStr, 0);\n\n  while (indexOccurence >= 0) {\n    startingIndices.push(indexOccurence);\n    indexOccurence = sourceStr.indexOf(searchStr, indexOccurence + 1);\n  }\n\n  return startingIndices;\n};\n","import { Address } from '@elrondnetwork/erdjs';\n\nfunction canTransformToPublicKey(address: string) {\n  try {\n    const checkAddress = new Address(address);\n    return Boolean(checkAddress.bech32());\n  } catch {\n    return false;\n  }\n}\n\nexport function addressIsValid(destinationAddress: string) {\n  const isValidBach =\n    destinationAddress?.startsWith('erd') &&\n    destinationAddress.length === 62 &&\n    /^\\w+$/.test(destinationAddress);\n\n  return isValidBach && canTransformToPublicKey(destinationAddress);\n}\n\nexport default addressIsValid;\n","import { Address } from '@elrondnetwork/erdjs';\nimport BigNumber from 'bignumber.js';\nimport addressIsValid from 'utils/account/addressIsValid';\nimport decodePart from 'utils/decoders/decodePart';\nimport { TransactionTypesEnum } from '../../types/transactions';\n\nconst noData = {\n  tokenId: '',\n  amount: ''\n};\n\nconst decodeData = (data: string) => {\n  const nonceIndex = 2;\n  const amountIndex = 3;\n  const parts = data.split('@');\n  const decodedParts = parts.map((part, i) =>\n    [nonceIndex, amountIndex].includes(i) ? part : decodePart(part)\n  );\n  return decodedParts;\n};\n\nexport function getTokenFromData(data?: string): {\n  tokenId: string;\n  amount: string;\n  collection?: string;\n  nonce?: string;\n  receiver?: string;\n} {\n  if (!data) {\n    return noData;\n  }\n\n  const isTokenTransfer = data.startsWith(TransactionTypesEnum.ESDTTransfer);\n  const nftTransfer =\n    data.startsWith(TransactionTypesEnum.ESDTNFTTransfer) && data.includes('@');\n\n  if (isTokenTransfer) {\n    const [, encodedToken, encodedAmount] = data.split('@');\n    try {\n      const tokenId = Buffer.from(encodedToken, 'hex').toString('ascii');\n\n      if (!tokenId) {\n        return noData;\n      }\n\n      const amount = new BigNumber(\n        '0x' + encodedAmount.replace('0x', '')\n      ).toString(10);\n\n      return {\n        tokenId,\n        amount\n      };\n    } catch (e) {}\n  }\n\n  if (nftTransfer) {\n    try {\n      const [, /*ESDTNFTTransfer*/ collection, nonce, quantity, receiver] =\n        decodeData(data);\n      if (\n        [collection, nonce, quantity, receiver].every((el) => Boolean(el)) &&\n        addressIsValid(new Address(receiver).bech32())\n      ) {\n        return {\n          tokenId: `${collection}-${nonce}`,\n          amount: new BigNumber(quantity, 16).toString(10),\n          collection,\n          nonce,\n          receiver: new Address(receiver).bech32()\n        };\n      }\n    } catch (err) {}\n  }\n\n  return noData;\n}\nexport default getTokenFromData;\n","export function isTokenTransfer({\n  tokenId,\n  erdLabel\n}: {\n  tokenId: string | undefined;\n  erdLabel: string;\n}) {\n  return Boolean(tokenId && tokenId !== erdLabel);\n}\n\nexport default isTokenTransfer;\n","function buildUrlParams(\n  search: string,\n  urlParams: {\n    [key: string]: string;\n  }\n) {\n  const urlSearchParams = new URLSearchParams(search);\n  const params = Object.fromEntries(urlSearchParams as any);\n\n  const nextUrlParams = new URLSearchParams({\n    ...params,\n    ...urlParams\n  }).toString();\n\n  return { nextUrlParams, params };\n}\n\ninterface ReplyUrlType {\n  callbackUrl: string;\n  urlParams?: { [key: string]: string };\n}\n\nexport function builtCallbackUrl({\n  callbackUrl,\n  urlParams = {}\n}: ReplyUrlType) {\n  let url = callbackUrl;\n  if (Object.entries(urlParams).length > 0) {\n    const { search, origin, pathname } = new URL(callbackUrl);\n    const { nextUrlParams } = buildUrlParams(search, urlParams);\n    url = `${origin}${pathname}?${nextUrlParams}`;\n  }\n  return url;\n}\n\nexport default builtCallbackUrl;\n","import {\n  Transaction,\n  TransactionOptions,\n  TransactionVersion\n} from '@elrondnetwork/erdjs';\nimport { TransactionServerStatusesEnum } from 'types/enums';\n\nexport function parseTransactionAfterSigning(\n  transaction: Transaction,\n  isLedger = false\n) {\n  // TODO: REMOVE\n  //#region REMOVE when options is available in erdjs getTransactionsFromWalletUrl\n  if (isLedger) {\n    transaction.version = TransactionVersion.withTxHashSignVersion();\n    transaction.options = TransactionOptions.withTxHashSignOptions();\n  }\n  //#endregion\n  const parsedTransaction = transaction.toPlainObject();\n  parsedTransaction.hash = transaction.getHash().toString();\n  parsedTransaction.status = TransactionServerStatusesEnum.pending;\n  return parsedTransaction;\n}\n\nexport default parseTransactionAfterSigning;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { REHYDRATE } from 'redux-persist';\nimport {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum\n} from 'types/enums';\nimport {\n  CustomTransactionInformation,\n  SignedTransactionsBodyType,\n  SignedTransactionsType,\n  SignedTransactionType,\n  TransactionsToSignType\n} from 'types/transactions';\nimport {\n  getIsTransactionFailed,\n  getIsTransactionCompleted\n} from 'utils/transactions';\nimport { logoutAction } from '../commonActions';\n\nexport interface UpdateSignedTransactionsPayloadType {\n  sessionId: string;\n  status: TransactionBatchStatusesEnum;\n  errorMessage?: string;\n  transactions?: SignedTransactionType[];\n}\n\nexport interface MoveTransactionsToSignedStatePayloadType\n  extends SignedTransactionsBodyType {\n  sessionId: string;\n}\n\nexport interface UpdateSignedTransactionStatusPayloadType {\n  sessionId: string;\n  transactionHash: string;\n  status: TransactionServerStatusesEnum;\n  errorMessage?: string;\n}\n\nexport interface TransactionsSliceStateType {\n  signedTransactions: SignedTransactionsType;\n  transactionsToSign: TransactionsToSignType | null;\n  signTransactionsError: string | null;\n  customTransactionInformationForSessionId: {\n    [sessionId: string]: CustomTransactionInformation;\n  };\n}\n\nconst initialState: TransactionsSliceStateType = {\n  signedTransactions: {},\n  transactionsToSign: null,\n  signTransactionsError: null,\n  customTransactionInformationForSessionId: {}\n};\n\nconst defaultCustomInformation: CustomTransactionInformation = {\n  signWithoutSending: false,\n  sessionInformation: null,\n  redirectAfterSign: false\n};\n\nexport const transactionsSlice = createSlice({\n  name: 'transactionsSlice',\n  initialState,\n  reducers: {\n    moveTransactionsToSignedState: (\n      state: TransactionsSliceStateType,\n      action: PayloadAction<MoveTransactionsToSignedStatePayloadType>\n    ) => {\n      const { sessionId, transactions, errorMessage, status } = action.payload;\n      const customTransactionInformation =\n        state.customTransactionInformationForSessionId?.[sessionId] ||\n        defaultCustomInformation;\n      state.signedTransactions[sessionId] = {\n        transactions,\n        status,\n        errorMessage,\n        customTransactionInformation\n      };\n      if (state?.transactionsToSign?.sessionId === sessionId) {\n        state.transactionsToSign = initialState.transactionsToSign;\n      }\n    },\n\n    clearSignedTransaction: (\n      state: TransactionsSliceStateType,\n      action: PayloadAction<string>\n    ) => {\n      if (state.signedTransactions[action.payload]) {\n        delete state.signedTransactions[action.payload];\n      }\n    },\n    clearTransactionToSign: (state: TransactionsSliceStateType) => {\n      if (state?.transactionsToSign) {\n        state.transactionsToSign = null;\n      }\n    },\n    updateSignedTransaction: (\n      state: TransactionsSliceStateType,\n      action: PayloadAction<SignedTransactionsType>\n    ) => {\n      state.signedTransactions = {\n        ...state.signedTransactions,\n        ...action.payload\n      };\n    },\n    updateSignedTransactions: (\n      state: TransactionsSliceStateType,\n      action: PayloadAction<UpdateSignedTransactionsPayloadType>\n    ) => {\n      const { sessionId, status, errorMessage, transactions } = action.payload;\n      const transaction = state.signedTransactions[sessionId];\n      if (transaction != null) {\n        state.signedTransactions[sessionId].status = status;\n        if (errorMessage != null) {\n          state.signedTransactions[sessionId].errorMessage = errorMessage;\n        }\n        if (transactions != null) {\n          state.signedTransactions[sessionId].transactions = transactions;\n        }\n      }\n    },\n    updateSignedTransactionStatus: (\n      state: TransactionsSliceStateType,\n      action: PayloadAction<UpdateSignedTransactionStatusPayloadType>\n    ) => {\n      const {\n        sessionId,\n        status,\n        errorMessage,\n        transactionHash\n      } = action.payload;\n      const transactions = state.signedTransactions?.[sessionId]?.transactions;\n      if (transactions != null) {\n        state.signedTransactions[sessionId].transactions = transactions.map(\n          (transaction) => {\n            if (transaction.hash === transactionHash) {\n              return {\n                ...transaction,\n                status,\n                errorMessage\n              };\n            }\n            return transaction;\n          }\n        );\n        const areTransactionsSuccessful = state.signedTransactions[\n          sessionId\n        ]?.transactions?.every((transaction) => {\n          return getIsTransactionCompleted(transaction.status);\n        });\n\n        const areTransactionsFailed = state.signedTransactions[\n          sessionId\n        ]?.transactions?.every((transaction) =>\n          getIsTransactionFailed(transaction.status)\n        );\n        if (areTransactionsSuccessful) {\n          state.signedTransactions[sessionId].status =\n            TransactionBatchStatusesEnum.success;\n        }\n        if (areTransactionsFailed) {\n          state.signedTransactions[sessionId].status =\n            TransactionBatchStatusesEnum.fail;\n        }\n      }\n    },\n    setTransactionsToSign: (\n      state: TransactionsSliceStateType,\n      action: PayloadAction<TransactionsToSignType>\n    ) => {\n      state.transactionsToSign = action.payload;\n\n      const { sessionId, customTransactionInformation } = action.payload;\n      state.customTransactionInformationForSessionId[\n        sessionId\n      ] = customTransactionInformation;\n\n      state.signTransactionsError = null;\n    },\n    clearAllTransactionsToSign: (state) => {\n      state.transactionsToSign = initialState.transactionsToSign;\n      state.signTransactionsError = null;\n    },\n    clearAllSignedTransactions: (state) => {\n      state.signedTransactions = initialState.signedTransactions;\n    },\n    setSignTransactionsError: (state, action: PayloadAction<string | null>) => {\n      state.signTransactionsError = action.payload;\n    }\n  },\n  extraReducers: (builder) => {\n    builder.addCase(logoutAction, () => {\n      return initialState;\n    });\n    builder.addCase(REHYDRATE, (state, action: any) => {\n      if (!action.payload?.transactions) {\n        return;\n      }\n\n      const {\n        signedTransactions,\n        customTransactionInformationForSessionId\n      } = action.payload.transactions;\n      const parsedSignedTransactions = Object.entries(\n        signedTransactions\n      ).reduce((acc, [sessionId, transaction]) => {\n        const txTimestamp: any = new Date(sessionId);\n        const expiration: any = new Date();\n        expiration.setHours(expiration.getHours() + 5);\n        const isExpired = expiration - txTimestamp > 0;\n        if (!isExpired) {\n          acc[sessionId] = transaction;\n        }\n        return acc;\n      }, {} as { [key: string]: any });\n      if (customTransactionInformationForSessionId != null) {\n        state.customTransactionInformationForSessionId = customTransactionInformationForSessionId;\n      }\n      if (signedTransactions != null) {\n        state.signedTransactions = parsedSignedTransactions;\n      }\n    });\n  }\n});\n\nexport const {\n  updateSignedTransactionStatus,\n  updateSignedTransactions,\n  setTransactionsToSign,\n  clearAllTransactionsToSign,\n  clearAllSignedTransactions,\n  clearSignedTransaction,\n  clearTransactionToSign,\n  setSignTransactionsError,\n  moveTransactionsToSignedState\n} = transactionsSlice.actions;\n\nexport default transactionsSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { TransactionsDisplayInfoType } from 'types/transactions';\nimport { logoutAction } from '../commonActions';\n\nexport interface StateType {\n  [sessionId: string]: TransactionsDisplayInfoType;\n}\n\nexport interface SetTransactionsInfoPayloadType {\n  sessionId: string;\n  transactionsDisplayInfo: TransactionsDisplayInfoType;\n}\n\nexport const defaultTransactionErrorMessage = 'Transaction failed';\nexport const defaultTransactionSuccessMessage = 'Transaction successful';\nexport const defaultTransactionProcessingMessage = 'Processing transaction';\nexport const defaultTransactionSubmittedMessage = 'Transaction submitted';\n\nconst initialState: StateType = {};\n\nexport const signTransactionsSlice = createSlice({\n  name: 'transactionsInfo',\n  initialState,\n  reducers: {\n    setTransactionsDisplayInfo(\n      state: StateType,\n      action: PayloadAction<SetTransactionsInfoPayloadType>\n    ) {\n      const { sessionId, transactionsDisplayInfo } = action.payload;\n      if (sessionId != null) {\n        state[sessionId] = {\n          errorMessage:\n            transactionsDisplayInfo?.errorMessage ||\n            defaultTransactionErrorMessage,\n          successMessage:\n            transactionsDisplayInfo?.successMessage ||\n            defaultTransactionSuccessMessage,\n          processingMessage:\n            transactionsDisplayInfo?.processingMessage ||\n            defaultTransactionProcessingMessage,\n          submittedMessage:\n            transactionsDisplayInfo?.submittedMessage ||\n            defaultTransactionSubmittedMessage,\n          transactionDuration: transactionsDisplayInfo?.transactionDuration\n        };\n      }\n    },\n    clearTransactionsInfoForSessionId(\n      state: StateType,\n      action: PayloadAction<string | undefined>\n    ) {\n      if (action.payload != null) {\n        delete state[action.payload];\n      }\n    },\n    clearTransactionsInfo: () => initialState\n  },\n  extraReducers: (builder) => {\n    builder.addCase(logoutAction, () => {\n      return initialState;\n    });\n  }\n});\n\nexport const {\n  clearTransactionsInfo,\n  setTransactionsDisplayInfo,\n  clearTransactionsInfoForSessionId\n} = signTransactionsSlice.actions;\n\nexport default signTransactionsSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { NotificationTypesEnum } from 'types';\nimport { logoutAction } from '../commonActions';\n\nexport interface TxSubmittedModal {\n  sessionId: string;\n  submittedMessage: string;\n}\n\nexport interface NotificationModal {\n  type: NotificationTypesEnum;\n  iconClassName: string;\n  title: string;\n  description: string;\n}\n\nexport interface ModalsSliceState {\n  txSubmittedModal?: TxSubmittedModal;\n  notificationModal?: NotificationModal;\n}\n\nconst initialState: ModalsSliceState = {};\n\nexport const modalsSlice = createSlice({\n  name: 'modalsSlice',\n  initialState,\n  reducers: {\n    setTxSubmittedModal: (\n      state: ModalsSliceState,\n      action: PayloadAction<TxSubmittedModal>\n    ) => {\n      state.txSubmittedModal = action.payload;\n    },\n    setNotificationModal: (\n      state: ModalsSliceState,\n      action: PayloadAction<NotificationModal>\n    ) => {\n      state.notificationModal = action.payload;\n    },\n    clearTxSubmittedModal: (state: ModalsSliceState) => {\n      state.txSubmittedModal = undefined;\n    },\n    clearNotificationModal: (state: ModalsSliceState) => {\n      state.notificationModal = undefined;\n    }\n  },\n\n  extraReducers: (builder) => {\n    builder.addCase(logoutAction, () => {\n      return initialState;\n    });\n  }\n});\n\nexport const {\n  setTxSubmittedModal,\n  setNotificationModal,\n  clearTxSubmittedModal,\n  clearNotificationModal\n} = modalsSlice.actions;\n\nexport default modalsSlice.reducer;\n","import isEqual from 'lodash.isequal';\nimport { createSelectorCreator, defaultMemoize } from 'reselect';\n\nexport const createDeepEqualSelector = createSelectorCreator(\n  defaultMemoize,\n  isEqual\n);\n","import { RootState } from '../store';\nimport { createDeepEqualSelector } from './helpers';\n\nexport const accountInfoSelector = (state: RootState) => state.account;\n\nexport const addressSelector = createDeepEqualSelector(\n  accountInfoSelector,\n  (state) => state.address\n);\n\nexport const accountSelector = createDeepEqualSelector(\n  accountInfoSelector,\n  (state) => state.account\n);\n\nexport const accountBalanceSelector = createDeepEqualSelector(\n  accountSelector,\n  (account) => account.balance\n);\n\nexport const accountNonceSelector = createDeepEqualSelector(\n  accountSelector,\n  (state) => state?.nonce?.valueOf() || 0\n);\n\nexport const shardSelector = createDeepEqualSelector(\n  accountInfoSelector,\n  (state) => state.shard\n);\n\nexport const ledgerAccountSelector = createDeepEqualSelector(\n  accountInfoSelector,\n  (state) => state.ledgerAccount\n);\n\nexport const walletConnectAccountSelector = createDeepEqualSelector(\n  accountInfoSelector,\n  (state) => state.walletConnectAccount\n);\n\nexport const isAccountLoadingSelector = createDeepEqualSelector(\n  accountInfoSelector,\n  (state) => state.isAccountLoading\n);\n\nexport const isAccountLoadingErrorSelector = createDeepEqualSelector(\n  accountInfoSelector,\n  (state) => state.accountLoadingError\n);\n","import { LoginMethodsEnum } from 'types/enums';\nimport { RootState } from '../store';\nimport { addressSelector } from './accountInfoSelectors';\nimport { createDeepEqualSelector } from './helpers';\n\nexport const loginInfoSelector = (state: RootState) => state.loginInfo;\n\nexport const loginMethodSelector = createDeepEqualSelector(\n  loginInfoSelector,\n  (state) => state.loginMethod\n);\n\nexport const isLoggedInSelector = createDeepEqualSelector(\n  loginInfoSelector,\n  addressSelector,\n  (state, address) =>\n    state.loginMethod != LoginMethodsEnum.none && Boolean(address)\n);\n\nexport const walletConnectLoginSelector = createDeepEqualSelector(\n  loginInfoSelector,\n  (state) => state.walletConnectLogin\n);\n\nexport const ledgerLoginSelector = createDeepEqualSelector(\n  loginInfoSelector,\n  (state) => state.ledgerLogin\n);\n\nexport const walletLoginSelector = createDeepEqualSelector(\n  loginInfoSelector,\n  (state) => state.walletLogin\n);\n","import { PayloadAction } from '@reduxjs/toolkit';\nimport throttle from 'lodash.throttle';\nimport { getAccountProvider } from 'providers/accountProvider';\nimport { logoutAction } from 'redux/commonActions';\nimport { isLoggedInSelector } from 'redux/selectors/loginInfoSelectors';\nimport { StoreType } from 'redux/store';\nimport { getNewLoginExpiresTimestamp, setLoginExpiresAt } from 'storage/local';\nimport storage from 'utils/storage';\nimport { localStorageKeys } from 'utils/storage/local';\n\nconst whitelistedActions = ['logout'];\n\nconst throttledSetNewExpires = throttle(() => {\n  setLoginExpiresAt(getNewLoginExpiresTimestamp());\n}, 5000);\n\nexport const loginSessionMiddleware: any = (store: StoreType) => (\n  next: (action: PayloadAction) => void\n) => (action: PayloadAction) => {\n  if (whitelistedActions.includes(action.type)) {\n    return next(action);\n  }\n  const appState = store.getState();\n  const loginTimestamp = storage.local.getItem(localStorageKeys.loginExpiresAt);\n  const isLoggedIn = isLoggedInSelector(appState);\n  if (!isLoggedIn) {\n    return next(action);\n  }\n  if (loginTimestamp == null) {\n    return setLoginExpiresAt(getNewLoginExpiresTimestamp());\n  }\n  const now = Date.now();\n  const isExpired = loginTimestamp - now < 0;\n  if (isExpired) {\n    return setTimeout(async () => {\n      const provider = getAccountProvider();\n      console.log('session expired');\n      store.dispatch(logoutAction());\n      try {\n        await provider?.logout({ callbackUrl: '/' });\n      } catch (err) {\n        console.error('error logging out', err);\n      }\n    }, 1000);\n  } else {\n    throttledSetNewExpires();\n  }\n  return next(action);\n};\n\nexport default loginSessionMiddleware;\n","import { combineReducers } from '@reduxjs/toolkit';\nimport { persistReducer } from 'redux-persist';\n\nimport account from './slices/accountInfoSlice';\nimport loginInfo from './slices/loginInfoSlice';\nimport modals from './slices/modalsSlice';\nimport networkConfig from './slices/networkConfigSlice';\nimport transactionsInfo from './slices/transactionsInfoSlice';\nimport transactions from './slices/transactionsSlice';\n\nconst reducers = {\n  account,\n  networkConfig,\n  loginInfo,\n  modals,\n  transactions,\n  transactionsInfo\n};\n\nif (typeof window !== 'undefined' && window.localStorage != null) {\n  //This allows for this library to be used on other platforms than web, like React Native\n  //without this condition, redux-persist 6+ will throw an error if persist storage fails\n  const sessionStorage = require('redux-persist/lib/storage/session').default;\n\n  //#region custom reducers\n  const transactionsInfoPersistConfig = {\n    key: 'dapp-core-transactionsInfo',\n    version: 1,\n    storage: sessionStorage\n  };\n  const transactionsReducer = {\n    key: 'dapp-core-transactions',\n    version: 1,\n    storage: sessionStorage,\n    blacklist: ['transactionsToSign']\n  };\n  reducers.transactions = persistReducer(\n    transactionsReducer,\n    transactions\n  ) as any;\n  reducers.transactionsInfo = persistReducer(\n    transactionsInfoPersistConfig,\n    transactionsInfo\n  ) as any;\n  //#endregion\n}\n\nconst rootReducer = combineReducers(reducers);\n\nexport default rootReducer;\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport { Reducer } from 'redux';\n\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n  createMigrate\n} from 'redux-persist';\n\nimport { defaultNetwork } from 'redux/slices';\nimport loginSessionMiddleware from './middlewares/loginSessionMiddleware';\nimport rootReducer from './reducers';\n\nlet localStorageReducers: Partial<Reducer> = rootReducer;\n\nconst migrations = {\n  2: (state: PestistedRootState) => {\n    return {\n      ...state,\n      networkConfig: defaultNetwork\n    };\n  }\n};\n\n//This allows for this library to be used on other platforms than web, like React Native\n//without this condition, redux-persist 6+ will throw an error if persist storage fails\nif (typeof window !== 'undefined' && window?.localStorage != null) {\n  const storage = require('redux-persist/lib/storage').default;\n  const persistConfig = {\n    key: 'dapp-core-store',\n    version: 2,\n    storage,\n    whitelist: ['account', 'loginInfo', 'toasts', 'modals', 'networkConfig'],\n    migrate: createMigrate(migrations, { debug: false })\n  };\n  localStorageReducers = persistReducer(persistConfig, rootReducer);\n}\n\nexport const store = configureStore({\n  reducer: localStorageReducers,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [\n          FLUSH,\n          REHYDRATE,\n          PAUSE,\n          PERSIST,\n          PURGE,\n          REGISTER,\n          'accountInfoSlice/setAccount',\n          'accountInfoSlice/setAccountNonce'\n        ],\n        ignoredPaths: ['payload.nonce', 'account.account.nonce']\n      }\n    }).concat(loginSessionMiddleware)\n});\n\nexport const persistor = persistStore(store);\n\nconst storeType = configureStore({ reducer: rootReducer });\ntype PestistedRootState = ReturnType<typeof store.getState>;\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type StoreType = typeof storeType;\nexport type RootState = ReturnType<typeof storeType.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { ChainID } from '@elrondnetwork/erdjs';\nimport { RootState } from '../store';\nimport { createDeepEqualSelector } from './helpers';\n\nexport const networkConfigSelector = (state: RootState) => state.networkConfig;\n\nexport const chainIDSelector = createDeepEqualSelector(\n  networkConfigSelector,\n  (state) => new ChainID(state.chainID)\n);\n\nexport const walletConnectBridgeAddressSelector = createDeepEqualSelector(\n  networkConfigSelector,\n  (state) => state.network.walletConnectBridgeAddress\n);\n\nexport const walletConnectDeepLinkSelector = createDeepEqualSelector(\n  networkConfigSelector,\n  (state) => state.network.walletConnectDeepLink\n);\n\nexport const networkSelector = createDeepEqualSelector(\n  networkConfigSelector,\n  (state) => state.network\n);\n\nexport const apiNetworkSelector = createDeepEqualSelector(\n  networkSelector,\n  (state) => state.apiAddress\n);\n\nexport const explorerAddressSelector = createDeepEqualSelector(\n  networkSelector,\n  (state) => state.explorerAddress\n);\n\nexport const egldLabelSelector = createDeepEqualSelector(\n  networkSelector,\n  (state) => state.egldLabel\n);\n","import {\n  Transaction,\n  GasLimit,\n  GasPrice,\n  Address,\n  TransactionPayload,\n  Balance,\n  ChainID,\n  Nonce,\n  TransactionOptions,\n  TransactionVersion\n} from '@elrondnetwork/erdjs';\nimport {\n  gasLimit as defaultGasLimit,\n  gasPrice,\n  version as defaultVersion\n} from 'constants/index';\nimport { RawTransactionType } from 'types/transactions';\nimport { isStringBase64 } from 'utils/decoders/base64Utils';\n\nexport function newTransaction(rawTransaction: RawTransactionType) {\n  const { data } = rawTransaction;\n  const dataPayload = isStringBase64(data)\n    ? TransactionPayload.fromEncoded(data)\n    : new TransactionPayload(data);\n  return new Transaction({\n    value: Balance.fromString(rawTransaction.value),\n    data: dataPayload,\n    nonce: new Nonce(rawTransaction.nonce),\n    receiver: new Address(rawTransaction.receiver),\n    gasLimit: new GasLimit(rawTransaction.gasLimit ?? defaultGasLimit),\n    gasPrice: new GasPrice(rawTransaction.gasPrice ?? gasPrice),\n    chainID: new ChainID(rawTransaction.chainID),\n    version: new TransactionVersion(rawTransaction.version ?? defaultVersion),\n    ...(rawTransaction.options\n      ? { options: new TransactionOptions(rawTransaction.options) }\n      : {})\n  });\n}\n\nexport default newTransaction;\n","import { Transaction } from '@elrondnetwork/erdjs';\nimport newTransaction from 'models/newTransaction';\nimport {\n  CustomTransactionInformation,\n  RawTransactionType,\n  SignedTransactionsType\n} from 'types/transactions';\nimport {\n  getIsTransactionCompleted,\n  getIsTransactionFailed,\n  getIsTransactionPending,\n  getIsTransactionSuccessful,\n  getIsTransactionTimedOut\n} from 'utils/transactions';\nimport { RootState } from '../store';\nimport { createDeepEqualSelector } from './helpers';\n\nexport interface TransactionsToSignReturnType {\n  callbackRoute?: string;\n  sessionId: string;\n  transactions: Transaction[];\n  customTransactionInformation: CustomTransactionInformation;\n}\n\nexport const transactionsSelectors = (state: RootState) => state.transactions;\n\nexport const signedTransactionsSelector = createDeepEqualSelector(\n  transactionsSelectors,\n  (state) => state.signedTransactions as SignedTransactionsType\n);\n\nexport const signTransactionsErrorSelector = createDeepEqualSelector(\n  transactionsSelectors,\n  (state) => state.signTransactionsError\n);\n\nconst selectTxByStatus = (txStatusVerifier: typeof getIsTransactionPending) => (\n  signedTransactions: SignedTransactionsType\n) =>\n  Object.entries(signedTransactions).reduce((acc, [sessionId, txBody]) => {\n    if (txStatusVerifier(txBody.status)) {\n      acc[sessionId] = txBody;\n    }\n    return acc;\n  }, {} as SignedTransactionsType);\n\nexport const pendingSignedTransactionsSelector = createDeepEqualSelector(\n  signedTransactionsSelector,\n  selectTxByStatus(getIsTransactionPending)\n);\n\nexport const successfulTransactionsSelector = createDeepEqualSelector(\n  signedTransactionsSelector,\n  selectTxByStatus(getIsTransactionSuccessful)\n);\n\nexport const completedTransactionsSelector = createDeepEqualSelector(\n  signedTransactionsSelector,\n  selectTxByStatus(getIsTransactionCompleted)\n);\n\nexport const failedTransactionsSelector = createDeepEqualSelector(\n  signedTransactionsSelector,\n  selectTxByStatus(getIsTransactionFailed)\n);\n\nexport const timedOutTransactionsSelector = createDeepEqualSelector(\n  signedTransactionsSelector,\n  selectTxByStatus(getIsTransactionTimedOut)\n);\n\nexport const transactionsToSignSelector = createDeepEqualSelector(\n  transactionsSelectors,\n  (state): TransactionsToSignReturnType | null => {\n    if (state?.transactionsToSign == null) {\n      return null;\n    }\n    return {\n      ...state.transactionsToSign,\n      transactions:\n        state?.transactionsToSign?.transactions.map((tx: RawTransactionType) =>\n          newTransaction(tx)\n        ) || []\n    };\n  }\n);\n\nexport const transactionStatusSelector = createDeepEqualSelector(\n  signedTransactionsSelector,\n  (_: RootState, transactionSessionId: string | null) => transactionSessionId,\n  (\n    signedTransactions: SignedTransactionsType,\n    transactionSessionId: string | null\n  ) =>\n    transactionSessionId != null\n      ? signedTransactions?.[transactionSessionId] || {}\n      : {}\n);\n","import { createDeepEqualSelector } from 'redux/selectors/helpers';\nimport {\n  defaultTransactionErrorMessage,\n  defaultTransactionProcessingMessage,\n  defaultTransactionSuccessMessage\n} from 'redux/slices';\nimport { RootState } from '../store';\n\nconst defaultTransactionInfo = {\n  errorMessage: defaultTransactionErrorMessage,\n  successMessage: defaultTransactionSuccessMessage,\n  processingMessage: defaultTransactionProcessingMessage\n};\n\nexport const transactionsInfoSelectors = (state: RootState) =>\n  state.transactionsInfo;\n\nexport const transactionDisplayInfoSelector = createDeepEqualSelector(\n  transactionsInfoSelectors,\n  (_: RootState, transactionSessionId: string | null) => transactionSessionId,\n  (transactionsDisplayInfo: any, transactionSessionId: string | null) =>\n    transactionSessionId != null\n      ? transactionsDisplayInfo?.[Number(transactionSessionId)] ||\n        defaultTransactionInfo\n      : defaultTransactionInfo\n);\n","import { RootState } from '../store';\nimport { createDeepEqualSelector } from './helpers';\n\nexport const modalsSliceSelector = (state: RootState) => state.modals;\n\nexport const txSubmittedModalSelector = createDeepEqualSelector(\n  modalsSliceSelector,\n  (state) => state.txSubmittedModal\n);\n\nexport const notificationModalSelector = createDeepEqualSelector(\n  modalsSliceSelector,\n  (state) => state.notificationModal\n);\n","import { isLoggedInSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport function getIsLoggedIn() {\n  return isLoggedInSelector(store.getState());\n}\n","import { getAccountProvider } from 'providers/accountProvider';\nimport { getProviderType } from 'providers/utils';\nimport { logoutAction } from 'redux/commonActions';\nimport { store } from 'redux/store';\nimport { LoginMethodsEnum } from 'types';\nimport { getIsLoggedIn } from 'utils/getIsLoggedIn';\n\nexport async function logout(\n  callbackUrl?: string,\n  onRedirect?: (callbackUrl?: string) => void\n) {\n  const provider = getAccountProvider();\n  const providerType = getProviderType(provider);\n  const isLoggedIn = getIsLoggedIn();\n  if (!isLoggedIn || !provider) {\n    return;\n  }\n\n  store.dispatch(logoutAction());\n\n  try {\n    await provider.logout({ callbackUrl });\n    if (callbackUrl && providerType !== LoginMethodsEnum.wallet) {\n      if (typeof onRedirect === 'function') {\n        onRedirect(callbackUrl);\n      } else {\n        window.location.href = callbackUrl;\n      }\n    }\n  } catch (err) {\n    console.error('error logging out', err);\n  }\n}\n","import { getAccountProvider } from 'providers/accountProvider';\nimport { getProviderType } from 'providers/utils';\n\nexport function getAccountProviderType() {\n  const provider = getAccountProvider();\n  return getProviderType(provider);\n}\n","import { egldLabelSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport function getEgldLabel() {\n  return egldLabelSelector(store.getState());\n}\n","import { getAccountProviderType } from './getAccountProviderType';\n\nexport function getIsProviderEqualTo(comparedProviderType: any) {\n  const providerType = getAccountProviderType();\n  return providerType === comparedProviderType;\n}\n","import { getAccountProvider } from 'providers/accountProvider';\nimport {\n  addressSelector,\n  isLoggedInSelector,\n  walletLoginSelector\n} from 'redux/selectors';\nimport { store } from 'redux/store';\nimport { LoginMethodsEnum } from 'types/enums';\nimport { getIsProviderEqualTo } from 'utils/network';\nimport { addressIsValid } from './addressIsValid';\n\nexport function getAddress(): Promise<string> {\n  const { search } = window.location;\n  const appState = store.getState();\n  const provider = getAccountProvider();\n  const address = addressSelector(appState);\n  const loggedIn = isLoggedInSelector(appState);\n  const walletLogin = walletLoginSelector(appState);\n\n  if (!provider) {\n    throw 'provider not initialized';\n  }\n\n  if (getIsProviderEqualTo(LoginMethodsEnum.ledger) && loggedIn) {\n    return new Promise((resolve) => {\n      resolve(address);\n    });\n  }\n\n  return !getIsProviderEqualTo(LoginMethodsEnum.none) &&\n    !getIsProviderEqualTo(LoginMethodsEnum.wallet) &&\n    !getIsProviderEqualTo(LoginMethodsEnum.extra)\n    ? // TODO: does not take into account ledger locked see link for details:\n      // https://github.com/ElrondNetwork/dapp/blob/d5c57695a10055f20d387ba064b6843606789ee9/src/helpers/accountMethods.tsx#L21\n      provider.getAddress()\n    : new Promise((resolve) => {\n        if (walletLogin != null) {\n          const urlSearchParams = new URLSearchParams(search);\n          const params = Object.fromEntries(urlSearchParams as any);\n          if (addressIsValid(params.address)) {\n            resolve(params.address);\n          }\n        }\n        if (loggedIn) {\n          resolve(address);\n        }\n        resolve('');\n      });\n}\n\nexport default getAddress;\n","import { ProxyProvider } from '@elrondnetwork/erdjs';\nimport { Address } from '@elrondnetwork/erdjs/out';\nimport { networkSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\nimport { NetworkType } from 'types';\n\nlet proxyProvider: ProxyProvider | null = null;\n\nexport function initializeProxyProvider(networkConfig?: NetworkType) {\n  const initializationNetworkConfig =\n    networkConfig || networkSelector(store.getState());\n  proxyProvider = new ProxyProvider(initializationNetworkConfig.apiAddress, {\n    timeout: Number(initializationNetworkConfig.apiTimeout)\n  });\n  return proxyProvider;\n}\n\nexport function getProxyProvider(): ProxyProvider {\n  if (proxyProvider == null) {\n    return initializeProxyProvider();\n  } else {\n    return proxyProvider;\n  }\n}\n\nexport async function getAccountFromProxyProvider(address?: string) {\n  try {\n    const proxy = getProxyProvider();\n    return await proxy.getAccount(new Address(address));\n  } catch (err) {\n    return null;\n  }\n}\n\nexport async function getNetworkConfigFromProxyProvider() {\n  try {\n    return await getProxyProvider().getNetworkConfig();\n  } catch (err) {\n    console.error('error fetching network config');\n    return null;\n  }\n}\n","import { getAccountFromProxyProvider } from 'providers/proxyProvider';\n\nexport function getAccount(address?: string) {\n  return getAccountFromProxyProvider(address);\n}\n\nexport default getAccount;\n","import { setAccountNonce } from 'redux/slices';\nimport { store } from 'redux/store';\n\n// this is is needed to allow the users to set the nonce dynamically from outside the library\n// without getting access to store.dispatch function\nexport function setNonce(nonce: number) {\n  store.dispatch(setAccountNonce(nonce));\n}\n","import { AccountOnNetwork } from '@elrondnetwork/erdjs';\nimport { accountNonceSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport function getLatestNonce(account: AccountOnNetwork | null) {\n  const appState = store.getState();\n  const currentAccountNonce = accountNonceSelector(appState);\n  if (!account) {\n    return currentAccountNonce;\n  }\n  return currentAccountNonce && !isNaN(currentAccountNonce)\n    ? Math.max(currentAccountNonce, account.nonce.valueOf())\n    : account.nonce.valueOf();\n}\n\nexport default getLatestNonce;\n","import { accountSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\nimport { getAccount } from './getAccount';\n\nexport async function getAccountBalance(address?: string) {\n  let accountAddress = address;\n  if (accountAddress == null) {\n    const account = accountSelector(store.getState());\n    accountAddress = account.address;\n  }\n  const account = await getAccount(accountAddress);\n  if (account == null) {\n    throw 'Could not read account, user not logged in';\n  }\n  return account?.balance?.toString();\n}\n","import { getAccountProvider } from 'providers/accountProvider';\nimport { setAccount } from 'redux/slices';\nimport { store } from 'redux/store';\nimport getAccount from './getAccount';\nimport getAddress from './getAddress';\nimport getLatestNonce from './getLatestNonce';\n\nconst setNewAccount = async () => {\n  try {\n    const address = await getAddress();\n    try {\n      const account = await getAccount(address);\n      if (account != null) {\n        const accountData = {\n          balance: account.balance.toString(),\n          address,\n          nonce: getLatestNonce(account)\n        };\n        store.dispatch(setAccount(accountData));\n        return accountData;\n      }\n    } catch (e) {\n      console.error('Failed getting account ', e);\n    }\n  } catch (e) {\n    console.error('Failed getting address ', e);\n  }\n  return null;\n};\n\nexport async function refreshAccount() {\n  const provider = getAccountProvider();\n  if (provider == null) {\n    throw 'Provider not initialized';\n  }\n  if (provider.isInitialized()) {\n    return setNewAccount();\n  } else {\n    try {\n      const initialized = await provider.init();\n      if (!initialized) {\n        return;\n      }\n      return setNewAccount();\n    } catch (e) {\n      console.error('Failed initializing provider ', e);\n    }\n  }\n  return undefined;\n}\n","const isAddressOfMetachain = (pubKey: Buffer) => {\n  // prettier-ignore\n  const metachainPrefix = Buffer.from([\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n  ]);\n  const pubKeyPrefix = pubKey.slice(0, metachainPrefix.length);\n  if (pubKeyPrefix.equals(metachainPrefix)) {\n    return true;\n  }\n  const zeroAddress = Buffer.alloc(32).fill(0);\n  return pubKey.equals(zeroAddress);\n};\nexport const getShardOfAddress = (hexPubKey: any) => {\n  try {\n    const numShards = 3;\n    const maskHigh = parseInt('11', 2);\n    const maskLow = parseInt('01', 2);\n    const pubKey = Buffer.from(hexPubKey, 'hex');\n    const lastByteOfPubKey = pubKey[31];\n    if (isAddressOfMetachain(pubKey)) {\n      return 4294967295;\n    }\n    let shard = lastByteOfPubKey & maskHigh;\n    if (shard > numShards - 1) {\n      shard = lastByteOfPubKey & maskLow;\n    }\n    return shard;\n  } catch (err) {\n    return -1;\n  }\n};\n","import { SignableMessage, Address } from '@elrondnetwork/erdjs';\nimport { getAccountProvider } from 'providers/accountProvider';\nimport { getAddress } from 'utils/account/getAddress';\n\ninterface SignMessageType {\n  message: string;\n  callbackRoute?: string;\n}\n\nexport async function signMessage({ message, callbackRoute }: SignMessageType) {\n  const address = await getAddress();\n  const provider = getAccountProvider();\n\n  const callbackUrl = `${window.location.origin}${callbackRoute}`;\n  const signableMessage = new SignableMessage({\n    address: new Address(address),\n    message: Buffer.from(message, 'ascii')\n  });\n  const signedMessage = await provider.signMessage(signableMessage, {\n    callbackUrl: encodeURIComponent(callbackUrl)\n  });\n\n  return signedMessage;\n}\n\nexport default signMessage;\n","export const logarithmicRest = (position: number) => {\n  const minp = 0;\n  const maxp = 10;\n\n  const minv = Math.log(0.005);\n  const maxv = Math.log(2);\n\n  const scale = (maxv - minv) / (maxp - minp);\n\n  return Math.exp(minv + scale * (position - minp));\n};\n","import BigNumber from 'bignumber.js';\n\nexport const stringIsInteger = (\n  integer: string,\n  positiveNumbersOnly = true\n) => {\n  const stringInteger = String(integer);\n  if (!stringInteger.match(/^[-]?\\d+$/)) {\n    return false;\n  }\n  const bNparsed = new BigNumber(stringInteger);\n  const limit = positiveNumbersOnly ? 0 : -1;\n  return (\n    bNparsed.toString(10) === stringInteger && bNparsed.comparedTo(0) >= limit\n  );\n};\n","import BigNumber from 'bignumber.js';\n\nexport const stringIsFloat = (amount: string) => {\n  // tslint:disable-next-line\n  let [wholes, decimals] = amount.split('.');\n  if (decimals) {\n    while (decimals.charAt(decimals.length - 1) === '0') {\n      decimals = decimals.slice(0, -1);\n    }\n  }\n  const number = decimals ? [wholes, decimals].join('.') : wholes;\n  const bNparsed = new BigNumber(number);\n  return bNparsed.toString(10) === number && bNparsed.comparedTo(0) >= 0;\n};\n","const esdtParts = 2;\nconst nftParts = 3;\n\nconst defaultResult = {\n  isEsdt: false,\n  isNft: false,\n  isEgld: false\n};\n\nexport function getIdentifierType(identifier?: string): {\n  isEsdt: boolean;\n  isNft: boolean;\n  isEgld: boolean;\n} {\n  const parts = identifier?.split('-').length;\n\n  if (parts === esdtParts) {\n    return {\n      ...defaultResult,\n      isEsdt: true\n    };\n  }\n  if (parts === nftParts) {\n    return {\n      ...defaultResult,\n      isNft: true\n    };\n  }\n  return {\n    ...defaultResult,\n    isEgld: true\n  };\n}\nexport default getIdentifierType;\n","export function pipe<ValueType>(previous: ValueType) {\n  return {\n    if: function (condition: boolean) {\n      if (condition) {\n        return {\n          then: (newValue: ValueType | ((prop: ValueType) => ValueType)) =>\n            // if a callback is passed, callback is executed with previous value\n            newValue instanceof Function\n              ? pipe(newValue(previous))\n              : pipe(newValue)\n        };\n      } else {\n        return {\n          then: () => pipe(previous)\n        };\n      }\n    },\n\n    then: (newValue: ValueType | ((prop: ValueType) => ValueType)) =>\n      newValue instanceof Function ? pipe(newValue(previous)) : pipe(newValue),\n\n    valueOf: function () {\n      return previous;\n    }\n  };\n}\nexport default pipe;\n","import { Balance, Token } from '@elrondnetwork/erdjs';\nimport BigNumber from 'bignumber.js';\nimport {\n  denomination as configDenomination,\n  decimals as configDecimals\n} from 'constants/index';\nimport { stringIsInteger } from 'utils/validation';\nimport pipe from './pipe';\n\nBigNumber.config({ ROUNDING_MODE: BigNumber.ROUND_FLOOR });\n\nexport function denominate({\n  input,\n  denomination = configDenomination,\n  decimals = configDecimals,\n  showLastNonZeroDecimal = true,\n  showIsLessThanDecimalsLabel = false,\n  addCommas = false\n}: {\n  input: string | Balance;\n  denomination?: number;\n  decimals?: number;\n  showIsLessThanDecimalsLabel?: boolean;\n  showLastNonZeroDecimal?: boolean;\n  addCommas?: boolean;\n}) {\n  const token = new Token({ decimals: denomination });\n\n  if (typeof input === 'string' && !stringIsInteger(input, false)) {\n    throw new Error('Invalid input');\n  }\n\n  return (\n    pipe(input as string)\n      // denominate\n      .if(typeof input === 'string')\n      .then(() =>\n        new Balance(token, 0, new BigNumber(input as string)).toDenominated()\n      )\n\n      .if(input.constructor === Balance)\n      .then(() => (input as Balance).toDenominated())\n\n      // format\n      .then((current) => {\n        const bnBalance = new BigNumber(current);\n\n        if (bnBalance.isZero()) {\n          return '0';\n        }\n        const balance = bnBalance.toString(10);\n        const [integerPart, decimalPart] = balance.split('.');\n        const bNdecimalPart = new BigNumber(decimalPart || 0);\n\n        const decimalPlaces = pipe(0)\n          .if(Boolean(decimalPart && showLastNonZeroDecimal))\n          .then(() => Math.max(decimalPart.length, decimals))\n\n          .if(bNdecimalPart.isZero() && !showLastNonZeroDecimal)\n          .then(0)\n\n          .if(Boolean(decimalPart && !showLastNonZeroDecimal))\n          .then(() => Math.min(decimalPart.length, decimals))\n\n          .valueOf();\n\n        const shownDecimalsAreZero =\n          decimalPart &&\n          decimals >= 1 &&\n          decimals <= decimalPart.length &&\n          bNdecimalPart.isGreaterThan(0) &&\n          new BigNumber(decimalPart.substring(0, decimals)).isZero();\n\n        const formatted = bnBalance.toFormat(decimalPlaces);\n\n        const formattedBalance = pipe(balance)\n          .if(addCommas)\n          .then(formatted)\n\n          .if(Boolean(shownDecimalsAreZero))\n          .then((current) => {\n            const integerPartZero = new BigNumber(integerPart).isZero();\n            const [numericPart, decimalSide] = current.split('.');\n\n            const zeroPlaceholders = new Array(decimals - 1).fill(0);\n            const zeros = [...zeroPlaceholders, 0].join('');\n            const minAmount = [...zeroPlaceholders, 1].join(''); // 00..1\n\n            if (!integerPartZero) {\n              return `${numericPart}.${zeros}`;\n            }\n\n            if (showIsLessThanDecimalsLabel) {\n              return `<${numericPart}.${minAmount}`;\n            }\n\n            return `${numericPart}.${decimalSide}`;\n          })\n\n          .if(Boolean(!shownDecimalsAreZero && decimalPart))\n          .then((current) => {\n            if (showLastNonZeroDecimal) {\n              return current;\n            }\n\n            const [numericPart] = current.split('.');\n            const decimalSide = decimalPart.substring(0, decimalPlaces);\n\n            if (!decimalSide) {\n              return numericPart;\n            }\n\n            return `${numericPart}.${decimalSide}`;\n          })\n\n          .valueOf();\n\n        return formattedBalance;\n      })\n\n      .valueOf()\n  );\n}\nexport default denominate;\n","import {\n  Transaction,\n  Nonce,\n  Balance,\n  GasPrice,\n  GasLimit,\n  TransactionPayload,\n  ChainID,\n  TransactionVersion,\n  Address,\n  NetworkConfig,\n  GasPriceModifier\n} from '@elrondnetwork/erdjs';\nimport { stringIsFloat, stringIsInteger } from 'utils/validation';\n\ninterface CalculateFeeLimitType {\n  gasLimit: string;\n  gasPrice: string;\n  data: string;\n  gasPerDataByte: string;\n  gasPriceModifier: string;\n  chainId: string;\n  minGasLimit?: string;\n  defaultGasPrice?: string;\n}\nconst placeholderData = {\n  from: 'erd12dnfhej64s6c56ka369gkyj3hwv5ms0y5rxgsk2k7hkd2vuk7rvqxkalsa',\n  to: 'erd12dnfhej64s6c56ka369gkyj3hwv5ms0y5rxgsk2k7hkd2vuk7rvqxkalsa'\n};\nexport function calculateFeeLimit({\n  minGasLimit = '50000',\n  gasLimit,\n  gasPrice,\n  data: inputData,\n  gasPerDataByte,\n  gasPriceModifier,\n  defaultGasPrice = '1000000000',\n  chainId\n}: CalculateFeeLimitType) {\n  const data = inputData || '';\n  const validGasLimit = stringIsInteger(gasLimit) ? gasLimit : minGasLimit;\n  const validGasPrice = stringIsFloat(gasPrice) ? gasPrice : defaultGasPrice;\n  const transaction = new Transaction({\n    nonce: new Nonce(0),\n    value: Balance.Zero(),\n    receiver: new Address(placeholderData.to),\n    gasPrice: new GasPrice(parseInt(validGasPrice)),\n    gasLimit: new GasLimit(parseInt(validGasLimit)),\n    data: new TransactionPayload(data.trim()),\n    chainID: new ChainID(chainId),\n    version: new TransactionVersion(1)\n  });\n\n  const networkConfig = new NetworkConfig();\n  networkConfig.MinGasLimit = new GasLimit(parseInt(minGasLimit));\n  networkConfig.GasPerDataByte = parseInt(gasPerDataByte);\n  networkConfig.GasPriceModifier = new GasPriceModifier(\n    parseFloat(gasPriceModifier)\n  );\n  try {\n    const bNfee = transaction.computeFee(networkConfig);\n    const fee = bNfee.toString(10);\n    return fee;\n  } catch (err) {\n    return '0';\n  }\n}\n","export const getUsdValue = ({\n  amount,\n  usd,\n  decimals = 2\n}: {\n  amount: string;\n  usd: number;\n  decimals?: number;\n}) => {\n  const sum = (parseFloat(amount) * usd).toFixed(decimals);\n  return parseFloat(sum).toLocaleString('en', {\n    maximumFractionDigits: decimals,\n    minimumFractionDigits: decimals\n  });\n};\n","import { Address, TransactionPayload } from '@elrondnetwork/erdjs';\nimport { TypesOfSmartContractCallsEnum } from 'types';\nimport { addressIsValid } from './account';\nimport { isStringBase64 } from './decoders';\n\nexport const ESDTTransferTypes = [\n  'ESDTNFTTransfer',\n  'ESDTNFTBurn',\n  'ESDTNFTAddQuantity',\n  'ESDTNFTCreate',\n  'MultiESDTNFTTransfer',\n  'ESDTTransfer',\n  'ESDTBurn',\n  'ESDTLocalMint',\n  'ESDTLocalBurn',\n  'ESDTWipe',\n  'ESDTFreeze'\n];\n\nexport function isContract(\n  receiver: string,\n  sender?: string,\n  data = ''\n): boolean {\n  const isValid = addressIsValid(receiver);\n\n  if (!isValid) {\n    return false;\n  }\n\n  const isContract = new Address(receiver).isContractAddress();\n\n  if (isContract) {\n    return true;\n  }\n\n  const extractedAddress = getAddressFromDataField({ receiver, data });\n\n  if (!extractedAddress) {\n    return false;\n  }\n\n  const isExtractedAddressContractCall = new Address(\n    extractedAddress\n  ).isContractAddress();\n\n  return (\n    isExtractedAddressContractCall || isSelfESDTContract(receiver, sender, data)\n  );\n}\n\nconst isHexValidCharacters = (str: string) => {\n  return str.toLowerCase().match(/[0-9a-f]/g);\n};\nconst isHexValidLength = (str: string) => {\n  return str.length % 2 === 0;\n};\n\nexport function isSelfESDTContract(\n  receiver: string,\n  sender?: string,\n  data?: string\n) {\n  const parts = data?.split('@');\n  if (parts == null) {\n    return false;\n  }\n  const [type, ...restParts] = parts;\n  const isSelfTransaction =\n    sender != null && receiver != null && receiver === sender;\n  const isCorrectESDTType = ESDTTransferTypes.includes(type);\n  const areDataPartsValid = restParts.every(\n    (part) => isHexValidCharacters(part) && isHexValidLength(part)\n  );\n  return isSelfTransaction && isCorrectESDTType && areDataPartsValid;\n}\n\nexport function getAddressFromDataField({\n  receiver,\n  data\n}: {\n  receiver: string;\n  data: string;\n}) {\n  try {\n    if (!data) {\n      return receiver;\n    }\n    const parsedData = isStringBase64(data)\n      ? TransactionPayload.fromEncoded(data).toString()\n      : data;\n\n    const addressIndex = getAddressIndex(parsedData);\n\n    const parts = parsedData.split('@');\n    return addressIndex > -1 ? parts[addressIndex] : receiver;\n  } catch (err) {\n    console.log(err);\n    return;\n  }\n}\n\nfunction getAddressIndex(data: string) {\n  if (data.includes(TypesOfSmartContractCallsEnum.MultiESDTNFTTransfer)) {\n    return 1;\n  }\n  if (data.includes(TypesOfSmartContractCallsEnum.ESDTNFTTransfer)) {\n    return 4;\n  }\n  return -1;\n}\n\nexport default isContract;\n","let classnames: any = {};\ntry {\n  classnames = require('classnames');\n} catch (err) {}\n\nexport default classnames;\n","import classNames from 'optionalPackages/classnames';\n\nexport function getGeneratedClasses(\n  className: string,\n  shouldRenderDefaultCss: boolean,\n  defaultStyles: Record<string, string>\n) {\n  return Object.entries(defaultStyles).reduce(\n    (acc, [key, defaultClassNames]) => {\n      acc[key] = classNames?.(\n        `${className}_${key}`,\n        shouldRenderDefaultCss && (defaultClassNames as string)\n      );\n      return acc;\n    },\n    {} as Record<string, string>\n  );\n}\n","export const wrapperClassName = 'dapp-core-ui-component';\nexport default wrapperClassName;\n","import React from 'react';\nimport {\n  createDispatchHook,\n  createSelectorHook,\n  createStoreHook\n} from 'react-redux';\n\nconst defaultContextValue: any = null;\nexport const DappCoreContext = React.createContext(defaultContextValue);\n\nexport const useStore = createStoreHook(DappCoreContext);\nexport const useDispatch = createDispatchHook(DappCoreContext);\nexport const useSelector = createSelectorHook(DappCoreContext);\n","import { useState } from 'react';\nimport { ExtensionProvider } from '@elrondnetwork/erdjs';\nimport { setAccountProvider } from 'providers/accountProvider';\nimport { loginAction } from 'redux/commonActions';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport { isLoggedInSelector } from 'redux/selectors';\nimport { setTokenLogin } from 'redux/slices';\nimport { LoginMethodsEnum } from 'types/enums';\nimport { optionalRedirect } from 'utils/internal';\nimport { LoginHookGenericStateType, InitiateLoginFunctionType } from '../types';\n\ninterface UseExtensionLoginPropsType {\n  callbackRoute: string;\n  token?: string;\n  redirectAfterLogin?: boolean;\n}\n\nexport type UseExtensionLoginReturnType = [\n  InitiateLoginFunctionType,\n  LoginHookGenericStateType\n];\n\nexport const useExtensionLogin = ({\n  callbackRoute,\n  token,\n  redirectAfterLogin = false\n}: UseExtensionLoginPropsType): UseExtensionLoginReturnType => {\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const isLoggedIn = useSelector(isLoggedInSelector);\n  const dispatch = useDispatch();\n\n  async function initiateLogin() {\n    setIsLoading(true);\n    const provider: ExtensionProvider = ExtensionProvider.getInstance();\n\n    try {\n      const isSuccessfullyInitialized: boolean = await provider.init();\n\n      if (!isSuccessfullyInitialized) {\n        console.warn(\n          'Something went wrong trying to redirect to wallet login..'\n        );\n        return;\n      }\n\n      const callbackUrl: string = encodeURIComponent(\n        `${window.location.origin}${callbackRoute}`\n      );\n      const providerLoginData = {\n        callbackUrl,\n        ...(token && { token })\n      };\n\n      await provider.login(providerLoginData);\n\n      setAccountProvider(provider);\n\n      const { signature, address } = provider.account;\n      if (signature) {\n        dispatch(\n          setTokenLogin({\n            loginToken: String(token),\n            signature\n          })\n        );\n      }\n      dispatch(\n        loginAction({ address, loginMethod: LoginMethodsEnum.extension })\n      );\n      optionalRedirect(callbackRoute, redirectAfterLogin);\n    } catch (error) {\n      console.error('error loging in', error);\n      // TODO: can be any or typed error\n      setError('error logging in' + (error as any).message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  const loginFailed = Boolean(error);\n  return [\n    initiateLogin,\n    {\n      loginFailed,\n      error,\n      isLoading: isLoading && !loginFailed,\n      isLoggedIn: isLoggedIn && !loginFailed\n    }\n  ];\n};\n","import { useState } from 'react';\nimport { newWalletProvider } from 'providers/utils';\nimport { useSelector } from 'redux/DappProviderContext';\nimport { isLoggedInSelector, networkSelector } from 'redux/selectors';\nimport { setWalletLogin } from 'redux/slices';\nimport { store } from 'redux/store';\nimport { LoginHookGenericStateType, InitiateLoginFunctionType } from '../types';\n\ninterface UseWebWalletLoginPropsType {\n  callbackRoute: string;\n  token?: string;\n}\n\nexport type UseWebWalletLoginReturnType = [\n  InitiateLoginFunctionType,\n  LoginHookGenericStateType\n];\n\nexport const useWebWalletLogin = ({\n  callbackRoute,\n  token\n}: UseWebWalletLoginPropsType): UseWebWalletLoginReturnType => {\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const isLoggedIn = useSelector(isLoggedInSelector);\n\n  async function initiateLogin() {\n    try {\n      setIsLoading(true);\n      const appState = store.getState();\n      const network = networkSelector(appState);\n      const provider = newWalletProvider(network.walletAddress);\n\n      const now = new Date();\n      const expires: number = now.setMinutes(now.getMinutes() + 3) / 1000;\n      const walletLoginData = {\n        data: {},\n        expires: expires\n      };\n\n      store.dispatch(setWalletLogin(walletLoginData));\n\n      const callbackUrl: string = encodeURIComponent(\n        `${window.location.origin}${callbackRoute}`\n      );\n      const loginData = {\n        callbackUrl: callbackUrl,\n        ...(token && { token })\n      };\n\n      await provider.login(loginData);\n    } catch (error) {\n      console.error(error);\n      setError('error logging in' + (error as any).message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  const loginFailed = error != null;\n\n  return [\n    initiateLogin,\n    {\n      error,\n      loginFailed,\n      isLoading: isLoading && !loginFailed,\n      isLoggedIn: isLoggedIn && !loginFailed\n    }\n  ];\n};\n\nexport default useWebWalletLogin;\n","import { useEffect, useState } from 'react';\nimport { HWProvider } from '@elrondnetwork/erdjs';\nimport ledgerErrorCodes from 'constants/ledgerErrorCodes';\nimport { setAccountProvider } from 'providers/accountProvider';\nimport { getProxyProvider } from 'providers/proxyProvider';\nimport { getLedgerConfiguration } from 'providers/utils';\nimport { loginAction } from 'redux/commonActions';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport { isLoggedInSelector, ledgerAccountSelector } from 'redux/selectors';\nimport {\n  updateLedgerAccount,\n  setLedgerLogin,\n  setTokenLogin,\n  setLedgerAccount\n} from 'redux/slices';\nimport { LoginMethodsEnum } from 'types/enums';\nimport { optionalRedirect } from 'utils/internal';\nimport { LoginHookGenericStateType, InitiateLoginFunctionType } from '../types';\n\nconst ledgerAppErrorText = 'Check if Elrond app is open on Ledger';\nconst failInitializeErrorText =\n  'Could not initialise ledger app, make sure Elrond app is open';\n\nconst defaultAddressesPerPage = 10;\n\nexport interface UseLedgerLoginPropsType {\n  callbackRoute: string;\n  addressesPerPage?: number;\n  token?: string;\n  redirectAfterLogin?: boolean;\n}\n\nexport interface SelectedAddress {\n  address: string;\n  index: number;\n}\n\nexport interface LedgerLoginHookCustomStateType {\n  accounts: string[];\n  showAddressList: boolean;\n  startIndex: number;\n  selectedAddress: SelectedAddress | null;\n  version: string;\n  contractDataEnabled: boolean;\n\n  onGoToPrevPage: () => void;\n  onGoToNextPage: () => void;\n  onSelectAddress: (address: SelectedAddress | null) => void;\n  onConfirmSelectedAddress: () => void;\n}\n\nexport type LedgerLoginHookReturnType = [\n  InitiateLoginFunctionType,\n  LoginHookGenericStateType,\n  LedgerLoginHookCustomStateType\n];\n\nexport function useLedgerLogin({\n  callbackRoute,\n  token,\n  addressesPerPage = defaultAddressesPerPage,\n  redirectAfterLogin = false\n}: UseLedgerLoginPropsType): LedgerLoginHookReturnType {\n  const ledgerAccount = useSelector(ledgerAccountSelector);\n  const isLoggedIn = useSelector(isLoggedInSelector);\n  const proxy = getProxyProvider();\n  const dispatch = useDispatch();\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const hwWalletP = new HWProvider(proxy);\n  const [startIndex, setStartIndex] = useState(0);\n  const [accounts, setAccounts] = useState<string[]>([]);\n  const [version, setVersion] = useState('');\n  const [contractDataEnabled, setContractDataEnabled] = useState(false);\n  const [selectedAddress, setSelectedAddress] =\n    useState<SelectedAddress | null>(null);\n\n  const [showAddressList, setShowAddressList] = useState(false);\n\n  function dispatchLoginActions({\n    provider,\n    address,\n    index,\n    signature\n  }: {\n    provider: HWProvider;\n    address: string;\n    index: number;\n    signature?: string;\n  }) {\n    setAccountProvider(provider);\n\n    dispatch(setLedgerLogin({ index, loginType: LoginMethodsEnum.ledger }));\n\n    if (signature) {\n      dispatch(\n        setTokenLogin({\n          loginToken: String(token),\n          signature\n        })\n      );\n    }\n    dispatch(loginAction({ address, loginMethod: LoginMethodsEnum.ledger }));\n    optionalRedirect(callbackRoute, redirectAfterLogin);\n  }\n\n  const onLoginFailed = (err: any, customMessage?: string) => {\n    if (err.statusCode in ledgerErrorCodes) {\n      setError(\n        (ledgerErrorCodes as any)[err.statusCode].message + customMessage\n      );\n    }\n    setIsLoading(false);\n    console.warn(err);\n    dispatch(setLedgerAccount(null));\n  };\n\n  async function loginUser(hwWalletProvider: HWProvider) {\n    if (selectedAddress == null) {\n      return false;\n    }\n    const { index } = selectedAddress;\n\n    if (token) {\n      try {\n        const loginInfo = await hwWalletProvider.tokenLogin({\n          token: Buffer.from(`${token}{}`),\n          addressIndex: index\n        });\n        dispatchLoginActions({\n          address: loginInfo.address,\n          provider: hwWalletProvider,\n          index: index,\n          signature: loginInfo.signature.hex()\n        });\n      } catch (err) {\n        onLoginFailed(err, '. Update Elrond App to continue.');\n      }\n    } else {\n      try {\n        const address = await hwWalletProvider.login({ addressIndex: index });\n        dispatchLoginActions({\n          address,\n          provider: hwWalletProvider,\n          index\n        });\n      } catch (err) {\n        onLoginFailed(err);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  async function onConfirmSelectedAddress() {\n    try {\n      setIsLoading(true);\n      if (selectedAddress == null) {\n        return false;\n      }\n      if (ledgerAccount) {\n        dispatch(updateLedgerAccount(selectedAddress));\n      } else {\n        dispatch(\n          setLedgerAccount({\n            ...selectedAddress,\n            version,\n            hasContractDataEnabled: contractDataEnabled\n          })\n        );\n      }\n\n      const hwWalletProvider = new HWProvider(proxy);\n      const initialized = await hwWalletProvider.init();\n      if (!initialized) {\n        setError(failInitializeErrorText);\n        console.warn(failInitializeErrorText);\n        return false;\n      }\n      setIsLoading(false);\n      await loginUser(hwWalletProvider);\n    } catch (err) {\n      if ((err as any).statusCode in ledgerErrorCodes) {\n        setError((ledgerErrorCodes as any)[(err as any).statusCode].message);\n      }\n      console.warn(failInitializeErrorText, err);\n    } finally {\n      setIsLoading(false);\n    }\n    setShowAddressList(false);\n    return true;\n  }\n\n  async function fetchAccounts() {\n    try {\n      setIsLoading(true);\n      const initialized = await hwWalletP.init();\n      if (!initialized) {\n        setError(failInitializeErrorText);\n        console.warn(failInitializeErrorText);\n        setIsLoading(false);\n        return;\n      }\n      const accounts = await hwWalletP.getAccounts(\n        startIndex,\n        addressesPerPage\n      );\n      const ledgerData = await getLedgerConfiguration(hwWalletP);\n      setVersion(ledgerData.version);\n      setContractDataEnabled(ledgerData.dataEnabled);\n      setAccounts(accounts);\n      setIsLoading(false);\n    } catch (err) {\n      if ((err as any).statusCode in ledgerErrorCodes) {\n        setError((ledgerErrorCodes as any)[(err as any).statusCode].message);\n      } else {\n        setError(ledgerAppErrorText);\n      }\n      console.error('error', err);\n      setIsLoading(false);\n    }\n  }\n\n  async function onStartLogin() {\n    setError('');\n    try {\n      setIsLoading(true);\n      if (ledgerAccount != null) {\n        const hwWalletP = new HWProvider(proxy);\n        const initialized = await hwWalletP.init();\n        if (!initialized) {\n          console.warn(failInitializeErrorText);\n          return;\n        }\n        const address = await hwWalletP.login({\n          addressIndex: selectedAddress?.index\n        });\n        setAccountProvider(hwWalletP);\n        dispatch(\n          loginAction({ address, loginMethod: LoginMethodsEnum.ledger })\n        );\n        optionalRedirect(callbackRoute, redirectAfterLogin);\n      } else {\n        if (accounts?.length > 0) {\n          setShowAddressList(true);\n        } else {\n          await fetchAccounts();\n          setShowAddressList(true);\n        }\n      }\n    } catch (error) {\n      console.error('error ', error);\n      setError(ledgerAppErrorText);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  function onSelectAddress(newSelectedAddress: SelectedAddress | null) {\n    setSelectedAddress(newSelectedAddress);\n  }\n\n  function onGoToNextPage() {\n    setSelectedAddress(null);\n    setStartIndex((current) => current + 1);\n  }\n\n  function onGoToPrevPage() {\n    setSelectedAddress(null);\n    setStartIndex((current) => (current === 0 ? 0 : current - 1));\n  }\n\n  useEffect(() => {\n    fetchAccounts();\n  }, [startIndex]);\n\n  const loginFailed = Boolean(error);\n\n  return [\n    onStartLogin,\n    {\n      loginFailed,\n      isLoggedIn: isLoggedIn && !loginFailed,\n      error,\n      isLoading: isLoading && !loginFailed\n    },\n    {\n      accounts,\n      showAddressList,\n      startIndex,\n      selectedAddress,\n      version,\n      contractDataEnabled,\n\n      onGoToPrevPage,\n      onGoToNextPage,\n      onSelectAddress,\n      onConfirmSelectedAddress\n    }\n  ];\n}\n","import { useRef, useEffect } from 'react';\n\nexport function useUpdateEffect(effect: any, dependencies: any[] = []) {\n  const isInitialMount = useRef(true);\n\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      effect();\n    }\n  }, dependencies);\n}\n","import { useEffect, useRef, useState } from 'react';\nimport { WalletConnectProvider } from '@elrondnetwork/erdjs';\n\nimport { useUpdateEffect } from 'hooks/useUpdateEffect';\nimport {\n  getAccountProvider,\n  setAccountProvider\n} from 'providers/accountProvider';\nimport { getProxyProvider } from 'providers/proxyProvider';\nimport { loginAction } from 'redux/commonActions';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport {\n  isLoggedInSelector,\n  walletConnectBridgeAddressSelector,\n  walletConnectDeepLinkSelector\n} from 'redux/selectors';\nimport {\n  setTokenLogin,\n  setTokenLoginSignature,\n  setWalletConnectLogin\n} from 'redux/slices';\n\nimport { LoginMethodsEnum } from 'types/enums';\nimport { logout } from 'utils';\nimport { optionalRedirect } from 'utils/internal';\nimport Timeout = NodeJS.Timeout;\nimport { LoginHookGenericStateType } from '../types';\n\ninterface InitWalletConnectType {\n  callbackRoute: string;\n  logoutRoute: string;\n  token?: string;\n  shouldLoginUser?: boolean;\n  redirectAfterLogin?: boolean;\n}\n\nexport interface WalletConnectLoginHookCustomStateType {\n  uriDeepLink: string | null;\n  walletConnectUri?: string;\n}\n\nexport type WalletConnectLoginHookReturnType = [\n  (loginProvider?: boolean) => void,\n  LoginHookGenericStateType,\n  WalletConnectLoginHookCustomStateType\n];\n\nexport const useWalletConnectLogin = ({\n  callbackRoute,\n  logoutRoute,\n  token,\n  redirectAfterLogin = false\n}: InitWalletConnectType): WalletConnectLoginHookReturnType => {\n  const dispatch = useDispatch();\n  const heartbeatInterval = 15000;\n\n  const [error, setError] = useState<string>('');\n  const [wcUri, setWcUri] = useState<string>('');\n\n  const proxy = getProxyProvider();\n\n  const provider = getAccountProvider();\n  const walletConnectBridgeAddress = useSelector(\n    walletConnectBridgeAddressSelector\n  );\n  const walletConnectDeepLink = useSelector(walletConnectDeepLinkSelector);\n  const isLoggedIn = useSelector(isLoggedInSelector);\n  const providerRef = useRef<any>(provider);\n\n  let heartbeatDisconnectInterval: Timeout;\n\n  const hasWcUri = Boolean(wcUri);\n  const isLoading = !hasWcUri;\n  const uriDeepLink = hasWcUri\n    ? `${walletConnectDeepLink}?wallet-connect=${encodeURIComponent(wcUri)}`\n    : null;\n\n  useEffect(() => {\n    handleHeartbeat();\n\n    const interval = setInterval(() => {\n      handleHeartbeat();\n    }, heartbeatInterval);\n\n    return () => clearInterval(interval);\n  }, [provider]);\n\n  useUpdateEffect(() => {\n    generateWcUri();\n  }, [token]);\n\n  useUpdateEffect(() => {\n    providerRef.current = provider;\n  }, [provider]);\n\n  async function handleHeartbeat() {\n    const isProviderConnected = Boolean(\n      providerRef.current?.walletConnector?.connected\n    );\n    if (!isProviderConnected) {\n      return;\n    }\n\n    const customMessage = {\n      method: 'heartbeat',\n      params: {}\n    };\n\n    try {\n      await providerRef.current.sendCustomMessage(customMessage);\n    } catch (error) {\n      console.error('Connection lost', error);\n      handleOnLogout();\n    }\n  }\n\n  async function handleOnLogin() {\n    try {\n      const provider = providerRef.current;\n      if (isLoggedIn) {\n        return;\n      }\n      if (provider == null) {\n        return;\n      }\n      const address = await provider.getAddress();\n      const signature = await provider.getSignature();\n      const hasSignature = Boolean(signature);\n      const loginActionData = {\n        address: address,\n        loginMethod: LoginMethodsEnum.walletconnect\n      };\n\n      const loginData = {\n        logoutRoute: logoutRoute,\n        loginType: 'walletConnect',\n        callbackRoute: callbackRoute\n      };\n\n      if (hasSignature) {\n        dispatch(setWalletConnectLogin(loginData));\n        dispatch(setTokenLoginSignature(signature));\n      } else {\n        dispatch(setWalletConnectLogin(loginData));\n      }\n      dispatch(loginAction(loginActionData));\n\n      provider.walletConnector.on('heartbeat', () => {\n        clearInterval(heartbeatDisconnectInterval);\n        heartbeatDisconnectInterval = setInterval(() => {\n          console.log('Maiar Wallet Connection Lost');\n          handleOnLogout();\n          clearInterval(heartbeatDisconnectInterval);\n        }, 150000);\n      });\n\n      optionalRedirect(callbackRoute, redirectAfterLogin);\n    } catch (err) {\n      setError('Invalid address');\n      console.error(err);\n    }\n  }\n\n  const handleOnLogout = () => {\n    logout(logoutRoute);\n  };\n\n  async function initiateLogin(loginProvider = true) {\n    const shouldGenerateWcUri = loginProvider && !wcUri;\n    if (\n      !walletConnectBridgeAddress ||\n      (providerRef?.current?.isInitialized?.() && !shouldGenerateWcUri)\n    ) {\n      return;\n    }\n\n    const providerHandlers = {\n      onClientLogin: handleOnLogin,\n      onClientLogout: handleOnLogout\n    };\n\n    const newProvider = new WalletConnectProvider(\n      proxy,\n      walletConnectBridgeAddress,\n      providerHandlers\n    );\n\n    await newProvider.init();\n    setAccountProvider(newProvider);\n    providerRef.current = newProvider;\n    if (loginProvider) {\n      generateWcUri();\n    }\n  }\n\n  async function generateWcUri() {\n    if (!walletConnectBridgeAddress) {\n      return;\n    }\n\n    const walletConnectUri: string | undefined =\n      await providerRef.current?.login();\n    const hasUri = Boolean(walletConnectUri);\n\n    if (!hasUri) {\n      return;\n    }\n\n    if (!token) {\n      setWcUri(walletConnectUri as string);\n      return;\n    }\n\n    const wcUriWithToken = `${walletConnectUri}&token=${token}`;\n\n    setWcUri(wcUriWithToken);\n    dispatch(setTokenLogin({ loginToken: token }));\n  }\n\n  const loginFailed = error != null;\n  return [\n    initiateLogin,\n    {\n      error,\n      loginFailed,\n      isLoading: isLoading && !loginFailed,\n      isLoggedIn: isLoggedIn && !loginFailed\n    },\n    { uriDeepLink, walletConnectUri: wcUri }\n  ];\n};\n\nexport default useWalletConnectLogin;\n","import { Address, Transaction } from '@elrondnetwork/erdjs';\nimport BigNumber from 'bignumber.js';\nimport {\n  gasPrice as configGasPrice,\n  gasLimit as configGasLimit,\n  gasPerDataByte\n} from 'constants/index';\nimport newTransaction from 'models/newTransaction';\nimport { addressSelector, chainIDSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\nimport { SendSimpleTransactionPropsType } from 'types';\nimport { getAccount, getLatestNonce } from 'utils';\n\nenum ErrorCodesEnum {\n  'invalidReceiver' = 'Invalid Receiver address',\n  'unknownError' = 'Unknown Error. Please check the transactions and try again'\n}\n\n// TODO: replace with new erdjs function\nfunction calculateGasLimit(data?: string) {\n  const bNconfigGasLimit = new BigNumber(configGasLimit);\n  const bNgasPerDataByte = new BigNumber(gasPerDataByte);\n  const bNgasValue = data\n    ? bNgasPerDataByte.times(Buffer.from(data).length)\n    : 0;\n  const bNgasLimit = bNconfigGasLimit.plus(bNgasValue);\n  const gasLimit = bNgasLimit.toString(10);\n  return gasLimit;\n}\n\nexport async function transformAndSignTransactions({\n  transactions\n}: SendSimpleTransactionPropsType): Promise<Transaction[]> {\n  const address = addressSelector(store.getState());\n  const account = await getAccount(address);\n  const nonce = getLatestNonce(account);\n  return transactions.map((tx) => {\n    const {\n      value,\n      receiver,\n      data = '',\n      chainID,\n      version,\n      options,\n      gasPrice = configGasPrice,\n      gasLimit = calculateGasLimit(tx.data)\n    } = tx;\n    let validatedReceiver = receiver;\n\n    try {\n      const addr = new Address(receiver);\n      validatedReceiver = addr.hex();\n    } catch (err) {\n      throw ErrorCodesEnum.invalidReceiver;\n    }\n\n    const storeChainId = chainIDSelector(store.getState())\n      .valueOf()\n      .toString();\n    const transactionsChainId = chainID || storeChainId;\n    return newTransaction({\n      value,\n      receiver: validatedReceiver,\n      data,\n      gasPrice,\n      gasLimit: Number(gasLimit),\n      nonce: Number(nonce.valueOf().toString()),\n      sender: new Address(address).hex(),\n      chainID: transactionsChainId,\n      version,\n      options\n    });\n  });\n}\n\nexport default transformAndSignTransactions;\n","import BigNumber from 'bignumber.js';\nimport { networkConstants } from 'constants/index';\n\nimport { accountBalanceSelector, chainIDSelector } from 'redux/selectors';\nimport {\n  setTransactionsToSign,\n  setNotificationModal,\n  setTransactionsDisplayInfo\n} from 'redux/slices';\nimport { store } from 'redux/store';\nimport { NotificationTypesEnum, SignTransactionsPropsType } from 'types';\nimport { SendTransactionReturnType } from './sendTransactions';\nimport { calcTotalFee } from './utils';\nimport { stringIsFloat } from 'utils';\n\nexport function signTransactions({\n  transactions,\n  callbackRoute,\n  minGasLimit = networkConstants.DEFAULT_MIN_GAS_LIMIT,\n  customTransactionInformation,\n  transactionsDisplayInfo\n}: SignTransactionsPropsType): SendTransactionReturnType {\n  const appState = store.getState();\n  const sessionId = Date.now().toString();\n  const accountBalance = accountBalanceSelector(appState);\n  const storeChainId = chainIDSelector(appState);\n\n  const transactionsPayload = Array.isArray(transactions)\n    ? transactions\n    : [transactions];\n  const bNtotalFee = calcTotalFee(transactionsPayload, minGasLimit);\n  const bNbalance = new BigNumber(\n    stringIsFloat(accountBalance) ? accountBalance : '0'\n  );\n  const hasSufficientFunds = bNbalance.minus(bNtotalFee).isGreaterThan(0);\n\n  if (!hasSufficientFunds) {\n    const notificationPayload = {\n      type: NotificationTypesEnum.warning,\n      iconClassName: 'text-warning',\n      title: 'Insufficient EGLD funds',\n      description: 'Current EGLD balance cannot cover the transaction fees.'\n    };\n\n    store.dispatch(setNotificationModal(notificationPayload));\n    return { error: 'insufficient funds', sessionId: null };\n  }\n\n  const hasValidChainId = transactionsPayload?.every(\n    (tx) => tx.getChainID().valueOf() === storeChainId.valueOf()\n  );\n  if (!hasValidChainId) {\n    const notificationPayload = {\n      type: NotificationTypesEnum.warning,\n      iconClassName: 'text-warning',\n      title: 'Network change detected',\n      description: 'The application tried to change the transaction network'\n    };\n    store.dispatch(setNotificationModal(notificationPayload));\n    return { error: 'Invalid ChainID', sessionId: null };\n  }\n\n  const signTransactionsPayload = {\n    sessionId,\n    callbackRoute,\n    customTransactionInformation,\n    transactions: transactionsPayload.map((tx) => tx.toPlainObject())\n  };\n\n  store.dispatch(setTransactionsToSign(signTransactionsPayload));\n  store.dispatch(\n    setTransactionsDisplayInfo({ sessionId, transactionsDisplayInfo })\n  );\n  return { sessionId };\n}\n\nexport default signTransactions;\n","import { Transaction } from '@elrondnetwork/erdjs/out';\nimport BigNumber from 'bignumber.js';\nimport { gasPerDataByte, gasPriceModifier } from 'constants/index';\nimport { calculateFeeLimit } from 'utils/operations';\n\nexport function calcTotalFee(transactions: Transaction[], minGasLimit: number) {\n  let totalFee = new BigNumber(0);\n\n  transactions.forEach((tx) => {\n    const fee = calculateFeeLimit({\n      gasPerDataByte,\n      gasPriceModifier,\n      minGasLimit: String(minGasLimit),\n      gasLimit: tx\n        .getGasLimit()\n        .valueOf()\n        .toString(),\n      gasPrice: tx\n        .getGasPrice()\n        .valueOf()\n        .toString(),\n      data: tx.getData().toString(),\n      chainId: tx.getChainID().valueOf()\n    });\n    totalFee = totalFee.plus(new BigNumber(fee));\n  });\n\n  return totalFee;\n}\n","import { Transaction } from '@elrondnetwork/erdjs/out';\nimport { SendTransactionsPropsType, SimpleTransactionType } from 'types';\nimport { signTransactions } from './signTransactions';\nimport transformAndSignTransactions from './transformAndSignTransactions';\n\nexport interface SendTransactionReturnType {\n  error?: string;\n  sessionId: string | null;\n}\n\nexport async function sendTransactions({\n  transactions,\n  transactionsDisplayInfo,\n  redirectAfterSign = true,\n  callbackRoute = window.location.pathname,\n  signWithoutSending,\n  completedTransactionsDelay,\n  sessionInformation,\n  minGasLimit\n}: SendTransactionsPropsType): Promise<SendTransactionReturnType> {\n  try {\n    const transactionsPayload = Array.isArray(transactions)\n      ? transactions\n      : [transactions];\n\n    const areComplexTransactions = transactionsPayload.every(\n      (tx) => Object.getPrototypeOf(tx).toPlainObject != null\n    );\n    let txToSign = transactionsPayload;\n    if (!areComplexTransactions) {\n      txToSign = await transformAndSignTransactions({\n        transactions: transactionsPayload as SimpleTransactionType[],\n        minGasLimit\n      });\n    }\n\n    return signTransactions({\n      transactions: txToSign as Transaction[],\n      minGasLimit,\n      callbackRoute,\n      transactionsDisplayInfo,\n      customTransactionInformation: {\n        redirectAfterSign,\n        completedTransactionsDelay,\n        sessionInformation,\n        signWithoutSending\n      }\n    });\n  } catch (err) {\n    console.error('error signing transaction', err as any);\n    return { error: err as any, sessionId: null };\n  }\n}\n\nexport default sendTransactions;\n","import { useSelector } from 'redux/DappProviderContext';\nimport { pendingSignedTransactionsSelector } from 'redux/selectors';\nimport {\n  SignedTransactionsType,\n  SignedTransactionsBodyType\n} from 'types/transactions';\n\ninterface useGetPendingTransactionsReturnType {\n  pendingTransactions: SignedTransactionsType;\n  pendingTransactionsArray: [string, SignedTransactionsBodyType][];\n  hasPendingTransactions: boolean;\n}\n\n//this is a hook to be able to take advantage of memoization offered by useSelector\nexport function useGetPendingTransactions(): useGetPendingTransactionsReturnType {\n  const pendingTransactions = useSelector(pendingSignedTransactionsSelector);\n  const pendingTransactionsArray: [string, SignedTransactionsBodyType][] =\n    Object.entries(pendingTransactions);\n  const hasPendingTransactions = pendingTransactionsArray?.length > 0;\n  return {\n    pendingTransactions,\n    pendingTransactionsArray,\n    hasPendingTransactions\n  };\n}\n","import { useEffect, useState } from 'react';\nimport { Transaction } from '@elrondnetwork/erdjs';\nimport {\n  MultiSignTxType,\n  TxDataTokenType,\n  TxsDataTokensType\n} from 'types/transactions';\nimport { getTokenFromData } from 'utils';\nimport parseMultiEsdtTransferData from 'utils/transactions/parseMultiEsdtTransferData';\n\nconst defaultTransactionInfo: TxDataTokenType = {\n  tokenId: '',\n  amount: '',\n  type: '',\n  multiTxData: '',\n  receiver: ''\n};\n\ninterface UseParseMultiEsdtTransferDataPropsType {\n  transactions?: Transaction[];\n}\n\ninterface UseParseMultiEsdtTransferDataReturnType {\n  parsedTransactionsByDataField: TxsDataTokensType;\n  getTxInfoByDataField: (\n    data: string,\n    multiTransactionData?: string\n  ) => TxDataTokenType;\n  allTransactions: MultiSignTxType[];\n}\n\nexport function useParseMultiEsdtTransferData({\n  transactions\n}: UseParseMultiEsdtTransferDataPropsType): UseParseMultiEsdtTransferDataReturnType {\n  const [parsedTransactionsByDataField, setParsedTransactions] =\n    useState<TxsDataTokensType>({});\n  const [allTransactions, setAllTransactions] = useState<MultiSignTxType[]>([]);\n\n  function addTransactionDataToParsedInfo(\n    data: string,\n    txInfo: TxDataTokenType\n  ) {\n    setParsedTransactions((existing) => ({\n      ...existing,\n      [data]: txInfo\n    }));\n  }\n\n  function getTxInfoByDataField(\n    data: string,\n    multiTransactionData?: string\n  ): TxDataTokenType {\n    if (parsedTransactionsByDataField == null) {\n      return defaultTransactionInfo;\n    }\n\n    if (data in parsedTransactionsByDataField) {\n      return parsedTransactionsByDataField[data];\n    }\n\n    if (\n      multiTransactionData != null &&\n      String(multiTransactionData) in parsedTransactionsByDataField\n    ) {\n      return parsedTransactionsByDataField[multiTransactionData];\n    }\n\n    return defaultTransactionInfo;\n  }\n\n  function extractTransactionESDTData() {\n    if (transactions && transactions.length > 0) {\n      const allTxs: MultiSignTxType[] = [];\n      transactions.forEach((transaction, transactionIndex) => {\n        const txData = transaction.getData().toString();\n        const multiTxs = parseMultiEsdtTransferData(txData);\n\n        if (multiTxs.length > 0) {\n          multiTxs.forEach((trx, idx) => {\n            const newTx: MultiSignTxType = {\n              transaction,\n              multiTxData: trx.data,\n              transactionIndex: idx\n            };\n            addTransactionDataToParsedInfo(trx.data, {\n              tokenId: trx.token ? trx.token : '',\n              amount: trx.amount ? trx.amount : '',\n              type: trx.type,\n              nonce: trx.nonce ? trx.nonce : '',\n              multiTxData: trx.data,\n              receiver: trx.receiver\n            });\n            allTxs.push(newTx);\n          });\n        } else {\n          const { tokenId, amount } = getTokenFromData(\n            transaction.getData().toString()\n          );\n\n          if (tokenId) {\n            addTransactionDataToParsedInfo(transaction.getData().toString(), {\n              tokenId,\n              amount,\n              receiver: transaction.getReceiver().bech32()\n            });\n          }\n          allTxs.push({ transaction, transactionIndex });\n        }\n      });\n      setAllTransactions(allTxs);\n    }\n  }\n\n  useEffect(() => {\n    extractTransactionESDTData();\n  }, [transactions]);\n\n  return {\n    parsedTransactionsByDataField,\n    getTxInfoByDataField,\n    allTransactions\n  };\n}\n","import {\n  clearSignedTransaction,\n  clearAllTransactionsToSign,\n  clearAllSignedTransactions\n} from 'redux/slices';\nimport { store } from 'redux/store';\n\nexport function removeTransactionsToSign(sessionId: string) {\n  store.dispatch(clearSignedTransaction(sessionId));\n}\nexport function removeSignedTransaction(sessionId: string) {\n  store.dispatch(clearSignedTransaction(sessionId));\n}\n\nexport function removeAllSignedTransactions() {\n  store.dispatch(clearAllSignedTransactions());\n}\n\nexport function removeAllTransactionsToSign() {\n  store.dispatch(clearAllTransactionsToSign());\n}\n","import { useEffect } from 'react';\nimport { useSelector } from 'redux/DappProviderContext';\nimport { transactionStatusSelector } from 'redux/selectors';\nimport { RootState } from 'redux/store';\nimport { TransactionBatchStatusesEnum } from 'types/enums';\nimport {\n  getIsTransactionCompleted,\n  getIsTransactionFailed,\n  getIsTransactionPending,\n  getIsTransactionSuccessful,\n  getIsTransactionTimedOut\n} from 'utils';\n\nexport interface UseTrackTransactionStatusArgsType {\n  transactionId: string | null;\n  onSuccess?: (transactionId: string | null) => void;\n  onFail?: (transactionId: string | null, errorMessage?: string) => void;\n  onTimedOut?: (transactionId: string | null) => void;\n  onCancelled?: (transactionId: string | null) => void;\n  onCompleted?: (transactionId: string | null) => void;\n}\n\nexport function useTrackTransactionStatus({\n  transactionId,\n  onSuccess,\n  onFail,\n  onCancelled,\n  onTimedOut,\n  onCompleted\n}: UseTrackTransactionStatusArgsType) {\n  const transactionsBatch = useSelector((state: RootState) =>\n    transactionStatusSelector(state, transactionId)\n  );\n\n  const { status, transactions, errorMessage } = transactionsBatch;\n\n  const isPending = getIsTransactionPending(status);\n  const isFailed = getIsTransactionFailed(status);\n  const isTimedOut = getIsTransactionTimedOut(status);\n  const isSuccessful = getIsTransactionSuccessful(status);\n  const isCompleted = getIsTransactionCompleted(status);\n\n  const isCancelled = status === TransactionBatchStatusesEnum.cancelled;\n\n  useEffect(() => {\n    if (isSuccessful && onSuccess) {\n      onSuccess(transactionId);\n    }\n  }, [isSuccessful]);\n  useEffect(() => {\n    if (isCompleted && onCompleted) {\n      onCompleted(transactionId);\n    }\n  }, [isCompleted]);\n\n  useEffect(() => {\n    if (isFailed && onFail) {\n      onFail(transactionId, errorMessage);\n    }\n  }, [isFailed]);\n\n  useEffect(() => {\n    if (isCancelled && onCancelled) {\n      onCancelled(transactionId);\n    }\n  }, [isCancelled]);\n\n  useEffect(() => {\n    if (isTimedOut) {\n      if (onTimedOut) {\n        onTimedOut(transactionId);\n      } else {\n        onFail?.(transactionId, 'timeout');\n      }\n    }\n  }, [isTimedOut]);\n\n  if (transactionId == null) {\n    return {};\n  }\n\n  if (transactionsBatch == null) {\n    return { errorMessage: 'No transaction to track' };\n  }\n\n  return {\n    isPending,\n    isSuccessful,\n    isFailed,\n    isCancelled,\n    isCompleted,\n    errorMessage,\n    status,\n    transactions\n  };\n}\n\nexport default useTrackTransactionStatus;\n","import { useSelector } from 'redux/DappProviderContext';\nimport { failedTransactionsSelector } from 'redux/selectors';\nimport {\n  SignedTransactionsType,\n  SignedTransactionsBodyType\n} from 'types/transactions';\n\ninterface useGetFailedTransactionsReturnType {\n  failedTransactions: SignedTransactionsType;\n  failedTransactionsArray: [string, SignedTransactionsBodyType][];\n  hasFailedTransactions: boolean;\n}\n\n//this is a hook to be able to take advantage of memoization offered by useSelector\nexport function useGetFailedTransactions(): useGetFailedTransactionsReturnType {\n  const failedTransactions = useSelector(failedTransactionsSelector);\n  const failedTransactionsArray: [string, SignedTransactionsBodyType][] =\n    Object.entries(failedTransactions);\n  const hasFailedTransactions = failedTransactionsArray?.length > 0;\n  return {\n    failedTransactions,\n    failedTransactionsArray,\n    hasFailedTransactions\n  };\n}\n","import { useSelector } from 'redux/DappProviderContext';\nimport { successfulTransactionsSelector } from 'redux/selectors';\nimport {\n  SignedTransactionsType,\n  SignedTransactionsBodyType\n} from 'types/transactions';\n\ninterface useGetSuccessfulTransactionsReturnType {\n  successfulTransactions: SignedTransactionsType;\n  successfulTransactionsArray: [string, SignedTransactionsBodyType][];\n  hasSuccessfulTransactions: boolean;\n}\n\n//this is a hook to be able to take advantage of memoization offered by useSelector\nexport function useGetSuccessfulTransactions(): useGetSuccessfulTransactionsReturnType {\n  const successfulTransactions = useSelector(successfulTransactionsSelector);\n  const successfulTransactionsArray: [string, SignedTransactionsBodyType][] =\n    Object.entries(successfulTransactions);\n  const hasSuccessfulTransactions = successfulTransactionsArray?.length > 0;\n  return {\n    successfulTransactions,\n    successfulTransactionsArray,\n    hasSuccessfulTransactions\n  };\n}\n","import { useSelector } from 'redux/DappProviderContext';\nimport {\n  completedTransactionsSelector,\n  failedTransactionsSelector,\n  pendingSignedTransactionsSelector,\n  signedTransactionsSelector,\n  successfulTransactionsSelector,\n  timedOutTransactionsSelector\n} from 'redux/selectors';\n\ninterface useGetActiveTransactionsStatusReturnType {\n  pending: boolean;\n  timedOut: boolean;\n  fail: boolean;\n  success: boolean;\n  completed: boolean;\n  hasActiveTransactions: boolean;\n}\n\n//this is a hook to be able to take advantage of memoization offered by useSelector\nexport function useGetActiveTransactionsStatus(): useGetActiveTransactionsStatusReturnType {\n  const signedTransactions = useSelector(signedTransactionsSelector);\n  const timedOutTransactions = useSelector(timedOutTransactionsSelector);\n  const failedTransactions = useSelector(failedTransactionsSelector);\n  const successfulTransactions = useSelector(successfulTransactionsSelector);\n  const pendingTransactions = useSelector(pendingSignedTransactionsSelector);\n  const completedTransactions = useSelector(completedTransactionsSelector);\n\n  const pending = Object.keys(pendingTransactions)?.length > 0;\n\n  const timedOut = !pending && Object.keys(timedOutTransactions)?.length > 0;\n\n  const fail =\n    !pending && !timedOut && Object.keys(failedTransactions)?.length > 0;\n\n  const success =\n    !pending &&\n    !timedOut &&\n    !fail &&\n    Object.keys(successfulTransactions).length > 0;\n\n  const completed =\n    !pending &&\n    !timedOut &&\n    !fail &&\n    Object.keys(completedTransactions).length > 0;\n  const hasActiveTransactions = Object.keys(signedTransactions).length > 0;\n  return {\n    pending,\n    timedOut,\n    fail,\n    success,\n    completed,\n    hasActiveTransactions\n  };\n}\n","import { useSelector } from 'redux/DappProviderContext';\nimport { completedTransactionsSelector } from 'redux/selectors';\nimport {\n  SignedTransactionsType,\n  SignedTransactionsBodyType\n} from 'types/transactions';\n\ninterface useGetCompletedTransactionsReturnType {\n  completedTransactions: SignedTransactionsType;\n  completedTransactionsArray: [string, SignedTransactionsBodyType][];\n  hasCompletedTransactions: boolean;\n}\n\n//this is a hook to be able to take advantage of memoization offered by useSelector\nexport function useGetCompletedTransactions(): useGetCompletedTransactionsReturnType {\n  const completedTransactions = useSelector(completedTransactionsSelector);\n  const completedTransactionsArray: [string, SignedTransactionsBodyType][] =\n    Object.entries(completedTransactions);\n  const hasCompletedTransactions = completedTransactionsArray?.length > 0;\n  return {\n    completedTransactions,\n    completedTransactionsArray,\n    hasCompletedTransactions\n  };\n}\n","import { Transaction } from '@elrondnetwork/erdjs';\nimport axios from 'axios';\nimport { networkSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport type SendSignedTransactionsReturnType = string[];\n\nexport async function sendSignedTransactions(\n  signedTransactions: Transaction[]\n): Promise<SendSignedTransactionsReturnType> {\n  const { apiAddress, apiTimeout } = networkSelector(store.getState());\n  const promises = signedTransactions.map((transaction) => {\n    return axios.post(\n      `${apiAddress}/transactions`,\n      transaction.toPlainObject(),\n      { timeout: parseInt(apiTimeout) }\n    );\n  });\n  const response = await Promise.all(promises);\n\n  return response.map(({ data }) => data.txHash);\n}\n","import axios from 'axios';\nimport { networkConfigSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\nimport { SmartContractResult, TransactionServerStatusesEnum } from 'types';\n\nexport type GetTransactionsByHashesReturnType = {\n  hash: string;\n  invalidTransaction: boolean;\n  status: TransactionServerStatusesEnum;\n  results: SmartContractResult[];\n  sender: string;\n  receiver: string;\n  data: string;\n  pendingResults?: boolean;\n  previousStatus: string;\n  hasStatusChanged: boolean;\n}[];\n\nexport type PendingTransactionsType = {\n  hash: string;\n  previousStatus: string;\n}[];\n\nexport async function getTransactionsByHashes(\n  pendingTransactions: PendingTransactionsType\n): Promise<GetTransactionsByHashesReturnType> {\n  const networkConfig = networkConfigSelector(store.getState());\n  const hashes = pendingTransactions.map((tx) => tx.hash);\n  const { data: responseData } = await axios.get(\n    `${networkConfig.network.apiAddress}/transactions`,\n    {\n      params: {\n        hashes: hashes.join(','),\n        withScResults: true\n      }\n    }\n  );\n  return pendingTransactions.map(({ hash, previousStatus }) => {\n    const txOnNetwork = responseData.find(\n      (txResponse: any) => txResponse?.txHash === hash\n    );\n\n    return {\n      hash,\n      data: txOnNetwork.data,\n      invalidTransaction: txOnNetwork == null,\n      status: txOnNetwork.status,\n      results: txOnNetwork.results,\n      sender: txOnNetwork.sender,\n      receiver: txOnNetwork?.receiver,\n      pendingResults: txOnNetwork.pendingResults,\n      previousStatus,\n      hasStatusChanged: status !== previousStatus\n    };\n  });\n}\n","import { useEffect, useState } from 'react';\nimport { HWProvider, ExtensionProvider } from '@elrondnetwork/erdjs';\nimport {\n  setExternalProviderAsAccountProvider,\n  setAccountProvider\n} from 'providers/accountProvider';\nimport {\n  getNetworkConfigFromProxyProvider,\n  getProxyProvider\n} from 'providers/proxyProvider';\nimport { getLedgerConfiguration, newWalletProvider } from 'providers/utils';\nimport { loginAction } from 'redux/commonActions';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport {\n  loginMethodSelector,\n  walletConnectLoginSelector,\n  networkSelector,\n  walletLoginSelector,\n  addressSelector,\n  ledgerAccountSelector,\n  ledgerLoginSelector,\n  isLoggedInSelector\n} from 'redux/selectors';\nimport {\n  setAccount,\n  setIsAccountLoading,\n  setAccountLoadingError,\n  setLedgerAccount,\n  setWalletLogin,\n  setChainID\n} from 'redux/slices';\nimport { useWalletConnectLogin } from 'services/login/useWalletConnectLogin';\nimport { LoginMethodsEnum } from 'types/enums';\nimport { getAddress, getAccount, getLatestNonce, logout } from 'utils';\n\nexport default function ProviderInitializer() {\n  const network = useSelector(networkSelector);\n  const walletConnectLogin = useSelector(walletConnectLoginSelector);\n  const loginMethod = useSelector(loginMethodSelector);\n  const walletLogin = useSelector(walletLoginSelector);\n  const address = useSelector(addressSelector);\n  const ledgerAccount = useSelector(ledgerAccountSelector);\n  const ledgerLogin = useSelector(ledgerLoginSelector);\n  const isLoggedIn = useSelector(isLoggedInSelector);\n  const [ledgerData, setLedgerData] = useState<{\n    version: string;\n    dataEnabled: boolean;\n  }>();\n\n  const proxy = getProxyProvider();\n  const dispatch = useDispatch();\n\n  const { callbackRoute, logoutRoute } = walletConnectLogin\n    ? walletConnectLogin\n    : { callbackRoute: '', logoutRoute: '' };\n\n  const [initWalletLoginProvider] = useWalletConnectLogin({\n    callbackRoute,\n    logoutRoute\n  });\n\n  useEffect(() => {\n    refreshChainID();\n  }, [network]);\n\n  useEffect(() => {\n    initializeProvider();\n  }, [loginMethod]);\n\n  useEffect(() => {\n    fetchAccount();\n  }, [address, isLoggedIn]);\n\n  useEffect(() => {\n    // prevent balance double fetching by handling ledgerAccount data separately\n    setLedgerAccountInfo();\n  }, [ledgerAccount, isLoggedIn, ledgerData]);\n\n  function refreshChainID() {\n    getNetworkConfigFromProxyProvider()\n      .then((networkConfig) => {\n        if (networkConfig) {\n          dispatch(setChainID(networkConfig.ChainID.valueOf()));\n        }\n      })\n      .catch((e: any) => {\n        console.error('To do ', e);\n      });\n  }\n\n  function setLedgerAccountInfo() {\n    if (ledgerAccount == null && ledgerLogin != null && ledgerData) {\n      dispatch(\n        setLedgerAccount({\n          index: ledgerLogin.index,\n          address,\n          hasContractDataEnabled: ledgerData.dataEnabled,\n          version: ledgerData.version\n        })\n      );\n    }\n  }\n\n  async function fetchAccount() {\n    dispatch(setIsAccountLoading(true));\n    if (address && isLoggedIn) {\n      try {\n        const account = await getAccount(address);\n        if (account) {\n          dispatch(\n            setAccount({\n              balance: account.balance.toString(),\n              address,\n              nonce: account.nonce.valueOf()\n            })\n          );\n        }\n      } catch (e) {\n        dispatch(setAccountLoadingError('Failed getting account'));\n        console.error('Failed getting account ', e);\n      }\n    }\n    dispatch(setIsAccountLoading(false));\n  }\n\n  async function tryAuthenticateWalletUser() {\n    try {\n      if (walletLogin != null) {\n        const provider = newWalletProvider(network.walletAddress);\n        const address = await getAddress();\n        if (address) {\n          setAccountProvider(provider);\n          dispatch(\n            loginAction({ address, loginMethod: LoginMethodsEnum.wallet })\n          );\n          const account = await getAccount(address);\n          if (account) {\n            dispatch(\n              setAccount({\n                balance: account.balance.toString(),\n                address,\n                nonce: getLatestNonce(account)\n              })\n            );\n          }\n        }\n        dispatch(setWalletLogin(null));\n      }\n    } catch (e) {\n      console.error('Failed authenticating wallet user ', e);\n    }\n  }\n\n  async function getInitializedHwWalletProvider() {\n    const hwWalletP = new HWProvider(proxy);\n    let isInitialized = hwWalletP.isInitialized();\n    if (!isInitialized) {\n      isInitialized = await hwWalletP.init();\n    }\n    if (!isInitialized && isLoggedIn) {\n      console.warn('Could not initialise ledger app');\n      logout();\n      return;\n    }\n    if (ledgerLogin?.index != null) {\n      hwWalletP.addressIndex = ledgerLogin.index;\n    }\n    return hwWalletP;\n  }\n\n  async function setLedgerProvider() {\n    try {\n      const hwWalletP = await getInitializedHwWalletProvider();\n      if (!hwWalletP) {\n        return;\n      }\n      const ledgerConfig = await getLedgerConfiguration(hwWalletP);\n      setAccountProvider(hwWalletP);\n      setLedgerData(ledgerConfig);\n    } catch (err) {\n      console.error('Could not initialise ledger app', err);\n      logout();\n    }\n  }\n\n  async function setExtensionProvider() {\n    try {\n      const address = await getAddress();\n      const provider = ExtensionProvider.getInstance().setAddress(address);\n      const success = await provider.init();\n\n      if (success) {\n        setAccountProvider(provider);\n      } else {\n        console.error(\n          'Could not initialise extension, make sure Elrond wallet extension is installed.'\n        );\n      }\n    } catch (err) {\n      console.error('Unable to login to ExtensionProvider', err);\n    }\n  }\n\n  function initializeProvider() {\n    if (loginMethod == null) {\n      return;\n    }\n    switch (loginMethod) {\n      case LoginMethodsEnum.ledger: {\n        setLedgerProvider();\n        break;\n      }\n\n      case LoginMethodsEnum.walletconnect: {\n        initWalletLoginProvider(false);\n        break;\n      }\n      case LoginMethodsEnum.wallet: {\n        const provider = newWalletProvider(network.walletAddress);\n        setAccountProvider(provider);\n        break;\n      }\n\n      case LoginMethodsEnum.extension: {\n        setExtensionProvider();\n        break;\n      }\n\n      case LoginMethodsEnum.extra: {\n        setExternalProviderAsAccountProvider();\n        break;\n      }\n\n      case LoginMethodsEnum.none: {\n        tryAuthenticateWalletUser();\n        break;\n      }\n      default:\n        return;\n    }\n  }\n\n  return null;\n}\n","import React from 'react';\nimport {\n  getTransactionsByHashes,\n  sendSignedTransactions\n} from 'apiCalls/transactions';\nimport { OverrideDefaultBehaviourContextValueType } from './types';\n\nconst defaultValue: OverrideDefaultBehaviourContextValueType = {\n  sendSignedTransactionsAsync: sendSignedTransactions,\n  getTransactionsByHash: getTransactionsByHashes\n};\n\nconst OverrideDefaultBehaviourContext = React.createContext(defaultValue);\n\nexport default OverrideDefaultBehaviourContext;\n","import React, { useContext, useRef } from 'react';\nimport { Address } from '@elrondnetwork/erdjs';\nimport { Signature } from '@elrondnetwork/erdjs/out/signature';\n\nimport OverrideDefaultBehaviourContext from 'contexts/OverrideDefaultBehaviourContext';\nimport newTransaction from 'models/newTransaction';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport { signedTransactionsSelector } from 'redux/selectors';\nimport { accountSelector } from 'redux/selectors';\nimport {\n  setTxSubmittedModal,\n  clearAllTransactionsToSign,\n  updateSignedTransactions\n} from 'redux/slices';\nimport {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum\n} from 'types/enums';\nimport { setNonce } from 'utils';\n\nconst TransactionSender = () => {\n  const account = useSelector(accountSelector);\n  const signedTransactions = useSelector(signedTransactionsSelector);\n  const { sendSignedTransactionsAsync } = useContext(\n    OverrideDefaultBehaviourContext\n  );\n  const sendingRef = useRef(false);\n\n  const dispatch = useDispatch();\n\n  const clearSignInfo = () => {\n    dispatch(clearAllTransactionsToSign());\n    sendingRef.current = false;\n  };\n  async function handleSendTransactions() {\n    const sessionIds = Object.keys(signedTransactions);\n    for (const sessionId of sessionIds) {\n      const skipSending =\n        signedTransactions?.[sessionId]?.customTransactionInformation\n          ?.signWithoutSending;\n\n      if (!sessionId || skipSending) {\n        continue;\n      }\n\n      try {\n        const isSessionIdSigned =\n          signedTransactions[sessionId].status ===\n          TransactionBatchStatusesEnum.signed;\n        const shouldSendCurrentSession =\n          isSessionIdSigned && !sendingRef.current;\n        if (!shouldSendCurrentSession) {\n          continue;\n        }\n        const { transactions } = signedTransactions[sessionId];\n\n        if (!transactions) {\n          continue;\n        }\n        sendingRef.current = true;\n        const transactionsToSend = transactions.map((tx) => {\n          const address = new Address(tx.sender);\n          const transactionObject = newTransaction(tx);\n          const signature = new Signature(tx.signature);\n\n          transactionObject.applySignature(signature, address);\n          return transactionObject;\n        });\n        const responseHashes = await sendSignedTransactionsAsync(\n          transactionsToSend\n        );\n\n        const newStatus = TransactionServerStatusesEnum.pending;\n        const newTransactions = transactions.map((transaction) => {\n          if (responseHashes.includes(transaction.hash)) {\n            return { ...transaction, status: newStatus };\n          }\n\n          return transaction;\n        });\n\n        const submittedModalPayload = {\n          sessionId,\n          submittedMessage: 'submitted'\n        };\n\n        dispatch(setTxSubmittedModal(submittedModalPayload));\n        dispatch(\n          updateSignedTransactions({\n            sessionId,\n            status: TransactionBatchStatusesEnum.sent,\n            transactions: newTransactions\n          })\n        );\n        clearSignInfo();\n        setNonce(account.nonce + transactions.length);\n\n        history.pushState({}, document.title, '?');\n      } catch (error) {\n        console.error('Unable to send transactions', error);\n        dispatch(\n          updateSignedTransactions({\n            sessionId,\n            status: TransactionBatchStatusesEnum.fail,\n            errorMessage: (error as any).message\n          })\n        );\n        clearSignInfo();\n      } finally {\n        sendingRef.current = false;\n      }\n    }\n  }\n\n  React.useEffect(() => {\n    handleSendTransactions();\n  }, [signedTransactions, account]);\n\n  return null;\n};\n\nexport default TransactionSender;\n","import { useContext, useEffect, useRef } from 'react';\nimport OverrideDefaultBehaviourContext from 'contexts/OverrideDefaultBehaviourContext';\nimport { useDispatch } from 'redux/DappProviderContext';\nimport {\n  updateSignedTransactions,\n  updateSignedTransactionStatus\n} from 'redux/slices';\nimport {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum\n} from 'types/enums';\nimport { SignedTransactionsBodyType } from 'types/transactions';\nimport {\n  getIsTransactionCompleted,\n  getIsTransactionFailed,\n  getIsTransactionPending,\n  getIsTransactionTimedOut\n} from 'utils';\nimport { refreshAccount } from 'utils/account';\ninterface RetriesType {\n  [hash: string]: number;\n}\n\ninterface TransactionStatusTrackerPropsType {\n  sessionId: string;\n  transactionPayload: SignedTransactionsBodyType;\n}\n\nexport function TransactionStatusTracker({\n  sessionId,\n  transactionPayload: { transactions, status, customTransactionInformation }\n}: TransactionStatusTrackerPropsType) {\n  const dispatch = useDispatch();\n  const intervalRef = useRef<any>(null);\n  const isFetchingStatusRef = useRef(false);\n  const retriesRef = useRef<RetriesType>({});\n  const timeoutRefs = useRef<string[]>([]);\n  const { getTransactionsByHash } = useContext(OverrideDefaultBehaviourContext);\n\n  const isPending = sessionId != null && getIsTransactionPending(status);\n  const manageTimedOutTransactions = () => {\n    dispatch(\n      updateSignedTransactions({\n        sessionId,\n        status: TransactionBatchStatusesEnum.timedOut\n      })\n    );\n  };\n\n  const checkTransactionStatus = async () => {\n    try {\n      if (!isPending || transactions == null) {\n        return;\n      }\n      isFetchingStatusRef.current = true;\n\n      const pendingTransactions = transactions.reduce(\n        (\n          acc: {\n            hash: string;\n            previousStatus: string;\n          }[],\n          { status, hash }\n        ) => {\n          if (\n            hash != null &&\n            !timeoutRefs.current.includes(hash) &&\n            getIsTransactionPending(status)\n          ) {\n            acc.push({\n              hash,\n              previousStatus: status\n            });\n          }\n          return acc;\n        },\n        []\n      );\n\n      if (pendingTransactions?.length === 0) {\n        isFetchingStatusRef.current = false;\n        return;\n      }\n      const serverTransactions = await getTransactionsByHash(\n        pendingTransactions\n      );\n      for (const {\n        hash,\n        status,\n        results,\n        invalidTransaction,\n        pendingResults,\n        hasStatusChanged\n      } of serverTransactions) {\n        try {\n          const retriesForThisHash = retriesRef.current[hash];\n          if (retriesForThisHash > 30) {\n            // consider transaction as stuck after 1 minute\n            manageTimedOutTransactions();\n            return;\n          }\n          if (!invalidTransaction) {\n            if (!getIsTransactionPending(status)) {\n              if (!getIsTransactionCompleted(status)) {\n                if (\n                  !getIsTransactionFailed(status) &&\n                  !getIsTransactionTimedOut(status)\n                ) {\n                  if (!pendingResults) {\n                    timeoutRefs.current.push(hash);\n\n                    const transitionToCompletedDelay =\n                      customTransactionInformation?.completedTransactionsDelay ||\n                      0;\n                    setTimeout(() => {\n                      dispatch(\n                        updateSignedTransactionStatus({\n                          sessionId,\n                          status: TransactionServerStatusesEnum.completed,\n                          transactionHash: hash\n                        })\n                      );\n                    }, transitionToCompletedDelay);\n                  }\n                }\n              }\n\n              if (hasStatusChanged) {\n                dispatch(\n                  updateSignedTransactionStatus({\n                    sessionId,\n                    status,\n                    transactionHash: hash\n                  })\n                );\n              }\n\n              refreshAccount();\n\n              if (getIsTransactionFailed(status)) {\n                const resultWithError = results?.find(\n                  (scResult) => scResult?.returnMessage !== ''\n                );\n\n                dispatch(\n                  updateSignedTransactionStatus({\n                    transactionHash: hash,\n                    sessionId,\n                    status: TransactionServerStatusesEnum.fail,\n                    errorMessage: resultWithError?.returnMessage\n                  })\n                );\n                dispatch(\n                  updateSignedTransactions({\n                    sessionId,\n                    status: TransactionBatchStatusesEnum.fail,\n                    errorMessage: resultWithError?.returnMessage\n                  })\n                );\n              }\n            } else {\n              retriesRef.current[hash] = retriesRef.current[hash]\n                ? retriesRef.current[hash] + 1\n                : 1;\n            }\n          } else {\n            retriesRef.current[hash] = retriesRef.current[hash]\n              ? retriesRef.current[hash] + 1\n              : 1;\n          }\n        } catch (error) {\n          console.error(error);\n          manageTimedOutTransactions();\n        }\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    if (isPending) {\n      intervalRef.current = setInterval(() => {\n        checkTransactionStatus();\n      }, 2000);\n    } else {\n      clearInterval(intervalRef.current);\n    }\n    return () => {\n      clearInterval(intervalRef.current);\n    };\n  }, [isPending]);\n  return null;\n}\n\nexport default TransactionStatusTracker;\n","import React from 'react';\nimport { useGetPendingTransactions } from 'services/transactions';\nimport { SignedTransactionsBodyType } from 'types/transactions';\nimport TransactionStatusTracker from './TransactionStatusTracker';\n\nexport function TransactionsTracker() {\n  const { pendingTransactionsArray } = useGetPendingTransactions();\n\n  const mappedPendingTransactionsTrackers = pendingTransactionsArray.map(\n    ([sessionId, transactionPayload]) => (\n      <TransactionStatusTracker\n        key={sessionId}\n        sessionId={sessionId}\n        transactionPayload={transactionPayload as SignedTransactionsBodyType}\n      />\n    )\n  );\n\n  return <React.Fragment>{mappedPendingTransactionsTrackers}</React.Fragment>;\n}\n\nexport default TransactionsTracker;\n","import axios from 'axios';\nimport { configEndpoint } from 'constants/network';\nimport { NetworkType } from 'types';\n\nexport async function getServerConfiguration(apiAddress: string) {\n  const cleanApiAddress = apiAddress.endsWith('/')\n    ? apiAddress.slice(0, -1)\n    : apiAddress;\n\n  const configUrl = `${cleanApiAddress}/${configEndpoint}`;\n\n  try {\n    const { data } = await axios.get<NetworkType>(configUrl);\n    if (data != null) {\n      return data;\n    }\n  } catch (err) {\n    console.error('error fetching configuration for ', configUrl);\n  }\n  return null;\n}\n","import { fallbackNetworkConfigurations } from 'constants/network';\nimport { EnvironmentsEnum } from 'types';\nimport { getServerConfiguration } from './getServerConfiguration';\n\nexport async function getServerConfigurationForEnvironment(\n  environment: EnvironmentsEnum\n) {\n  const fallbackConfig = fallbackNetworkConfigurations[environment];\n  const config = await getServerConfiguration(fallbackConfig.apiAddress);\n\n  return config !== null ? config : fallbackConfig;\n}\n","import axios from 'axios';\nimport { networkConfigSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport type ScamInfoType = {\n  scamInfo?: {\n    type: string;\n    info: string;\n  };\n  code: string;\n};\n\nexport async function getScamAddressData(addressToVerify: string) {\n  const {\n    network: { apiAddress, apiTimeout }\n  } = networkConfigSelector(store.getState());\n  const { data } = await axios.get<ScamInfoType>(\n    `/accounts/${addressToVerify}`,\n    {\n      baseURL: apiAddress,\n      timeout: Number(apiTimeout)\n    }\n  );\n\n  return data;\n}\n\nexport default getScamAddressData;\n","import { useSelector } from 'redux/DappProviderContext';\nimport { networkConfigSelector } from 'redux/selectors';\n\nexport const useGetNetworkConfig = () => {\n  return useSelector(networkConfigSelector);\n};\n\nexport default useGetNetworkConfig;\n","import { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport { notificationModalSelector } from 'redux/selectors';\nimport { clearNotificationModal } from 'redux/slices';\n\nexport function useGetNotification() {\n  const notification = useSelector(notificationModalSelector);\n  const dispatch = useDispatch();\n  const clearNotification = () => dispatch(clearNotificationModal());\n  return { notification, clearNotification };\n}\n","import { useSelector } from 'redux/DappProviderContext';\nimport { transactionDisplayInfoSelector } from 'redux/selectors';\nimport { RootState } from 'redux/store';\n\nexport function useGetTransactionDisplayInfo(toastId: string | null) {\n  return useSelector((state: RootState) =>\n    transactionDisplayInfoSelector(state, toastId)\n  );\n}\n","import React from 'react';\nimport { WalletProvider } from '@elrondnetwork/erdjs';\nimport qs from 'qs';\nimport { dappInitRoute, walletSignSession } from 'constants/index';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport { networkSelector } from 'redux/selectors';\nimport { moveTransactionsToSignedState } from 'redux/slices';\nimport { TransactionBatchStatusesEnum } from 'types/enums';\nimport { parseTransactionAfterSigning } from 'utils';\n\nexport function useParseSignedTransactions() {\n  const { search } = window.location;\n  const network = useSelector(networkSelector);\n  const dispatch = useDispatch();\n\n  React.useEffect(() => {\n    if (search != null) {\n      const searchData = qs.parse(search.replace('?', ''));\n\n      if (searchData && walletSignSession in searchData) {\n        const signSessionId: number = (searchData as any)[walletSignSession];\n        const signedTransactions = new WalletProvider(\n          `${network.walletAddress}${dappInitRoute}`\n        ).getTransactionsFromWalletUrl();\n        if (signedTransactions.length > 0) {\n          dispatch(\n            moveTransactionsToSignedState({\n              sessionId: signSessionId.toString(),\n              status: TransactionBatchStatusesEnum.signed,\n              transactions: signedTransactions.map((tx) =>\n                parseTransactionAfterSigning(tx)\n              )\n            })\n          );\n          history.pushState({}, document.title, '?');\n        }\n      }\n    }\n  }, [search]);\n}\n\nexport default useParseSignedTransactions;\n","import { useEffect, useRef, useState } from 'react';\nimport { ExtensionProvider, Nonce, Transaction } from '@elrondnetwork/erdjs';\n\nimport { errorsMessages, walletSignSession } from 'constants/index';\nimport { useParseSignedTransactions } from 'hooks/transactions/useParseSignedTransactions';\nimport { getAccountProvider } from 'providers/accountProvider';\nimport { getAccountFromProxyProvider } from 'providers/proxyProvider';\nimport { getProviderType } from 'providers/utils';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport { addressSelector, transactionsToSignSelector } from 'redux/selectors';\nimport {\n  clearAllTransactionsToSign,\n  clearTransactionsInfoForSessionId,\n  moveTransactionsToSignedState\n} from 'redux/slices';\nimport { LoginMethodsEnum, TransactionBatchStatusesEnum } from 'types/enums';\nimport {\n  builtCallbackUrl,\n  getLatestNonce,\n  parseTransactionAfterSigning\n} from 'utils';\n\nexport const useSignTransactions = () => {\n  const dispatch = useDispatch();\n  const savedCallback = useRef('/');\n  const address = useSelector(addressSelector);\n  const provider = getAccountProvider();\n  const providerType = getProviderType(provider);\n  const [error, setError] = useState<string | null>(null);\n  const transactionsToSign = useSelector(transactionsToSignSelector);\n  const hasTransactions = Boolean(transactionsToSign?.transactions);\n\n  useParseSignedTransactions();\n\n  const onAbort = (sessionId?: string) => {\n    setError(null);\n    clearSignInfo(sessionId);\n  };\n\n  function clearSignInfo(sessionId?: string) {\n    const isExtensionProvider = provider instanceof ExtensionProvider;\n\n    dispatch(clearAllTransactionsToSign());\n    dispatch(clearTransactionsInfoForSessionId(sessionId));\n\n    if (!isExtensionProvider) {\n      return;\n    }\n\n    ExtensionProvider.getInstance()?.cancelAction?.();\n  }\n\n  const onCancel = (errorMessage: string, sessionId?: string) => {\n    const isTxCancelled = errorMessage !== errorsMessages.TRANSACTION_CANCELLED;\n\n    clearSignInfo(sessionId);\n\n    /*\n     * this is triggered by abort action,\n     * so no need to show error again\n     */\n    if (!isTxCancelled) {\n      return;\n    }\n\n    setError(errorMessage);\n  };\n\n  const signWithWallet = (\n    transactions: Array<Transaction>,\n    sessionId: string,\n    callbackRoute = ''\n  ) => {\n    const urlParams = { [walletSignSession]: sessionId };\n    const callbackUrl = `${window.location.origin}${callbackRoute}`;\n    const buildedCallbackUrl = builtCallbackUrl({ callbackUrl, urlParams });\n\n    provider.signTransactions(transactions, {\n      callbackUrl: encodeURIComponent(buildedCallbackUrl)\n    });\n  };\n\n  const signTransactionsWithProvider = async () => {\n    const {\n      sessionId,\n      transactions,\n      callbackRoute,\n      customTransactionInformation\n    } = transactionsToSign!;\n    const { redirectAfterSign } = customTransactionInformation;\n    const redirectRoute = callbackRoute || window.location.pathname;\n    const isCurrentRoute = window.location.pathname.includes(redirectRoute);\n    const shouldRedirectAfterSign = redirectAfterSign && !isCurrentRoute;\n\n    try {\n      const isProviderInitialized = await provider.init();\n\n      if (!isProviderInitialized) {\n        return;\n      }\n    } catch (error) {\n      const errorMessage =\n        ((error as unknown) as Error)?.message ||\n        (error as string) ||\n        errorsMessages.PROVIDER_NOT_INTIALIZED;\n      console.error(errorsMessages.PROVIDER_NOT_INTIALIZED, errorMessage);\n      onCancel(errorMessage);\n      return;\n    }\n\n    try {\n      const signedTransactions = await provider.signTransactions(transactions);\n      const hasSameTransactions =\n        Object.keys(signedTransactions).length === transactions.length;\n      const hasAllTransactionsSigned =\n        signedTransactions && hasSameTransactions;\n      const shouldMoveTransactionsToSignedState =\n        signedTransactions && hasAllTransactionsSigned;\n\n      if (!shouldMoveTransactionsToSignedState) {\n        return;\n      }\n\n      const signedTransactionsArray = Object.values(\n        signedTransactions\n      ).map((tx: any) => parseTransactionAfterSigning(tx));\n\n      dispatch(\n        moveTransactionsToSignedState({\n          sessionId,\n          transactions: signedTransactionsArray,\n          status: TransactionBatchStatusesEnum.signed\n        })\n      );\n\n      if (shouldRedirectAfterSign) {\n        window.location.href = redirectRoute;\n      }\n    } catch (err) {\n      const errorMessage =\n        ((error as unknown) as Error)?.message ||\n        (error as string) ||\n        errorsMessages.ERROR_SIGNING_TX;\n      console.error(errorsMessages.ERROR_SIGNING_TX, errorMessage);\n      onCancel(errorMessage, sessionId);\n    }\n  };\n\n  const signTransactions = async () => {\n    if (!transactionsToSign) {\n      return;\n    }\n\n    const { sessionId, transactions, callbackRoute } = transactionsToSign;\n\n    if (!provider) {\n      console.error(errorsMessages.MISSING_PROVIDER_MESSAGE);\n      return;\n    }\n\n    /*\n     * if the transaction is cancelled\n     * the callback will go to undefined,\n     * we save the most recent one for a valid transaction\n     */\n    savedCallback.current = callbackRoute || window.location.pathname;\n\n    const setTransactionNonces = (\n      latestNonce: number,\n      transactions: Array<Transaction>\n    ): Array<Transaction> => {\n      return transactions.map((tx: Transaction, index: number) => {\n        tx.setNonce(new Nonce(latestNonce + index));\n\n        return tx;\n      });\n    };\n\n    try {\n      const proxyAccount = await getAccountFromProxyProvider(address);\n      if (proxyAccount == null) {\n        return;\n      }\n      const isSigningWithWebWallet = providerType === LoginMethodsEnum.wallet;\n\n      const isSigningWithProvider = ![\n        LoginMethodsEnum.wallet,\n        LoginMethodsEnum.ledger\n      ].includes(providerType);\n\n      const latestNonce = getLatestNonce(proxyAccount);\n      const mappedTransactions = setTransactionNonces(\n        latestNonce,\n        transactions\n      );\n\n      if (isSigningWithWebWallet) {\n        signWithWallet(mappedTransactions, sessionId, callbackRoute);\n      }\n      if (isSigningWithProvider) {\n        signTransactionsWithProvider();\n      }\n    } catch (err) {\n      const defaultErrorMessage = ((error as unknown) as Error)?.message;\n      const errorMessage = defaultErrorMessage || errorsMessages.ERROR_SIGNING;\n      onCancel(errorMessage, sessionId);\n\n      dispatch(\n        moveTransactionsToSignedState({\n          sessionId,\n          status: TransactionBatchStatusesEnum.cancelled\n        })\n      );\n\n      console.error(errorMessage, err);\n    }\n  };\n\n  useEffect(() => {\n    signTransactions();\n  }, [transactionsToSign]);\n\n  return {\n    error,\n    onAbort,\n    hasTransactions,\n    callbackRoute: savedCallback.current,\n    sessionId: transactionsToSign?.sessionId,\n    transactions: transactionsToSign?.transactions\n  };\n};\n\nexport default useSignTransactions;\n","import { useSelector } from 'redux/DappProviderContext';\nimport { signedTransactionsSelector } from 'redux/selectors';\n\nimport {\n  SignedTransactionsType,\n  SignedTransactionsBodyType\n} from 'types/transactions';\n\ninterface useGetSignedTransactionsReturnType {\n  signedTransactions: SignedTransactionsType;\n  signedTransactionsArray: [string, SignedTransactionsBodyType][];\n  hasSignedTransactions: boolean;\n}\n\nexport function useGetSignedTransactions(): useGetSignedTransactionsReturnType {\n  const signedTransactions = useSelector(signedTransactionsSelector);\n  const signedTransactionsArray: [string, SignedTransactionsBodyType][] =\n    Object.entries(signedTransactions);\n  const hasSignedTransactions = signedTransactionsArray?.length > 0;\n  return {\n    signedTransactions,\n    signedTransactionsArray,\n    hasSignedTransactions\n  };\n}\n","let swr: any = {};\ntry {\n  swr = require('swr').default;\n} catch (err) {}\n\nexport default swr;\n","import axios from 'axios';\nimport useGetNetworkConfig from 'hooks/useGetNetworkConfig';\n\nimport useSwr from 'optionalPackages/swr';\nimport { getIdentifierType } from 'utils';\n\ninterface TokenOptionType {\n  tokenLabel: string;\n  tokenDenomination: number;\n  tokenAvatar: string;\n  error?: string;\n}\n\ninterface TokenInfoResponse {\n  identifier: string;\n  name: string;\n  ticker: string;\n  decimals: number;\n  assets: {\n    description: string;\n    status: string;\n    svgUrl: string;\n  };\n}\n\nconst fetcher = (url: string) =>\n  axios.get(url).then((response) => response.data);\n\nexport function useGetTokenDetails({\n  tokenId\n}: {\n  tokenId: string;\n}): TokenOptionType {\n  const { network } = useGetNetworkConfig();\n\n  const { isEsdt } = getIdentifierType(tokenId);\n  const tokenEndpoint = isEsdt ? 'tokens' : 'nfts';\n\n  const {\n    data: selectedToken,\n    error\n  }: { data?: TokenInfoResponse; error?: string } = useSwr(\n    Boolean(tokenId)\n      ? `${network.apiAddress}/${tokenEndpoint}/${tokenId}`\n      : null,\n    fetcher\n  );\n\n  if (!tokenId) {\n    return {\n      tokenDenomination: Number(network.egldDenomination),\n      tokenLabel: '',\n      tokenAvatar: ''\n    };\n  }\n\n  const tokenDenomination = selectedToken\n    ? selectedToken?.decimals\n    : Number(network.egldDenomination);\n  const tokenLabel = selectedToken ? selectedToken?.name : '';\n  const tokenAvatar = selectedToken ? `${selectedToken?.assets?.svgUrl}` : '';\n\n  return { tokenDenomination, tokenLabel, tokenAvatar, error };\n}\n\nexport default useGetTokenDetails;\n","import { useSelector } from 'redux/DappProviderContext';\nimport { accountInfoSelector } from 'redux/selectors';\n\nexport const useGetAccountInfo = () => {\n  return useSelector(accountInfoSelector);\n};\n\nexport default useGetAccountInfo;\n","import { useSelector } from 'redux/DappProviderContext';\nimport { isLoggedInSelector, loginInfoSelector } from 'redux/selectors';\n\nexport const useGetLoginInfo = () => {\n  const loginInfo = useSelector(loginInfoSelector);\n  const isLoggedIn = useSelector(isLoggedInSelector);\n  return { ...loginInfo, isLoggedIn };\n};\n\nexport default useGetLoginInfo;\n","import { getAccountProvider } from 'providers/accountProvider';\nimport { getProviderType } from 'providers/utils';\n\nexport const useGetAccountProvider = () => {\n  const provider = getAccountProvider();\n  const providerType = getProviderType(provider);\n  return { provider, providerType };\n};\n\nexport default useGetAccountProvider;\n","import { useEffect, useState } from 'react';\nimport { Transaction } from '@elrondnetwork/erdjs';\nimport { getScamAddressData } from 'apiCalls';\nimport ledgerErrorCodes from 'constants/ledgerErrorCodes';\nimport { useGetAccountInfo } from 'hooks/account';\nimport { getAccountProvider } from 'providers/accountProvider';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport { egldLabelSelector, transactionsToSignSelector } from 'redux/selectors';\nimport {\n  clearAllTransactionsToSign,\n  moveTransactionsToSignedState,\n  setSignTransactionsError\n} from 'redux/slices/transactionsSlice';\nimport { useParseMultiEsdtTransferData } from 'services/transactions/hooks/useParseMultiEsdtTransferData';\nimport { ActiveLedgerTransactionType, MultiSignTxType } from 'types';\nimport { LoginMethodsEnum, TransactionBatchStatusesEnum } from 'types/enums';\nimport { getIsProviderEqualTo, isTokenTransfer } from 'utils';\nimport { parseTransactionAfterSigning } from 'utils';\n\ninterface UseSignTransactionsWithLedgerPropsType {\n  onCancel: () => void;\n  verifyReceiverScam?: boolean;\n}\n\ninterface VerifiedAddressesType {\n  [address: string]: { type: string; info: string };\n}\nlet verifiedAddresses: VerifiedAddressesType = {};\n\ntype LedgerSignedTransactions = Record<number, Transaction>;\n\ninterface UseSignTransactionsWithLedgerReturnType {\n  allTransactions: MultiSignTxType[];\n  onSignTransaction: () => void;\n  onNext: () => void;\n  onPrev: () => void;\n  onAbort: () => void;\n  waitingForDevice: boolean;\n  isLastTransaction: boolean;\n  currentStep: number;\n  callbackRoute?: string;\n  signedTransactions?: LedgerSignedTransactions;\n  currentTransaction: ActiveLedgerTransactionType | null;\n}\n\nexport function useSignTransactionsWithLedger({\n  onCancel,\n  verifyReceiverScam = true\n}: UseSignTransactionsWithLedgerPropsType): UseSignTransactionsWithLedgerReturnType {\n  const transactionsToSign = useSelector(transactionsToSignSelector);\n  const {\n    account: { address }\n  } = useGetAccountInfo();\n\n  const {\n    sessionId,\n    transactions,\n    callbackRoute,\n    customTransactionInformation\n  } = transactionsToSign || {};\n  const [currentStep, setCurrentStep] = useState(0);\n  const [signedTransactions, setSignedTransactions] = useState<\n    LedgerSignedTransactions\n  >();\n  const {\n    getTxInfoByDataField,\n    allTransactions\n  } = useParseMultiEsdtTransferData({ transactions });\n  const [\n    currentTransaction,\n    setCurrentTransaction\n  ] = useState<ActiveLedgerTransactionType | null>(null);\n  const provider = getAccountProvider();\n  const egldLabel = useSelector(egldLabelSelector);\n  const [waitingForDevice, setWaitingForDevice] = useState(false);\n  const dispatch = useDispatch();\n\n  const isLastTransaction = currentStep === allTransactions.length - 1;\n\n  useEffect(() => {\n    extractTransactionsInfo();\n  }, [currentStep, allTransactions]);\n\n  async function extractTransactionsInfo() {\n    const tx = allTransactions[currentStep];\n    if (tx == null) {\n      return;\n    }\n    const { transaction, multiTxData } = tx;\n    const dataField = transaction.getData().toString();\n    const transactionTokenInfo = getTxInfoByDataField(\n      transaction.getData().toString(),\n      multiTxData\n    );\n    const { tokenId } = transactionTokenInfo;\n    const receiver = transaction.getReceiver().toString();\n    const notSender = address !== receiver;\n    const verified = receiver in verifiedAddresses;\n\n    if (notSender && !verified && verifyReceiverScam) {\n      const data = await getScamAddressData(receiver);\n      verifiedAddresses = {\n        ...verifiedAddresses,\n        ...(data.scamInfo ? { [receiver]: data.scamInfo } : {})\n      };\n    }\n\n    const isTokenTransaction = Boolean(\n      tokenId && isTokenTransfer({ tokenId, erdLabel: egldLabel })\n    );\n\n    setCurrentTransaction({\n      transaction,\n      receiverScamInfo: verifiedAddresses[receiver]?.info || null,\n      transactionTokenInfo,\n      isTokenTransaction,\n      dataField\n    });\n  }\n\n  function reset() {\n    setCurrentStep(0);\n    setSignedTransactions(undefined);\n    setWaitingForDevice(false);\n  }\n\n  async function sign() {\n    try {\n      if (currentTransaction == null || sessionId == null) {\n        return;\n      }\n\n      const trueForLedger = getIsProviderEqualTo(LoginMethodsEnum.ledger);\n      setWaitingForDevice(trueForLedger);\n\n      const signedTx = await provider.signTransaction(\n        currentTransaction.transaction\n      );\n      const newSignedTx = { [currentStep]: signedTx };\n      const newSignedTransactions: any = signedTransactions\n        ? { ...signedTransactions, ...newSignedTx }\n        : newSignedTx;\n      setSignedTransactions(newSignedTransactions);\n      if (!isLastTransaction) {\n        setCurrentStep((exising) => exising + 1);\n        setWaitingForDevice(false);\n      } else if (newSignedTransactions) {\n        dispatch(\n          moveTransactionsToSignedState({\n            sessionId,\n            status: TransactionBatchStatusesEnum.signed,\n            transactions: Object.values(newSignedTransactions).map((tx) =>\n              parseTransactionAfterSigning(tx as Transaction, trueForLedger)\n            )\n          })\n        );\n\n        reset();\n        if (\n          callbackRoute != null &&\n          customTransactionInformation?.redirectAfterSign &&\n          !window.location.pathname.includes(callbackRoute)\n        ) {\n          window.location.href = callbackRoute;\n        }\n      }\n    } catch (err) {\n      console.error(err, 'sign error');\n      const { message, statusCode } = err as any;\n\n      const errMessage =\n        statusCode in ledgerErrorCodes\n          ? (ledgerErrorCodes as any)[statusCode].message\n          : message;\n\n      reset();\n      dispatch(setSignTransactionsError(errMessage));\n    }\n  }\n\n  function signTx() {\n    try {\n      if (currentTransaction == null) {\n        return;\n      }\n      const signature = currentTransaction.transaction.getSignature();\n      if (signature) {\n        if (!isLastTransaction) {\n          setCurrentStep((exising) => exising + 1);\n        }\n      } else {\n        // currently code doesn't reach here because getSignature throws error if none is found\n        sign();\n      }\n    } catch {\n      // the only way to check if tx has signature is with try catch\n      sign();\n    }\n  }\n\n  const isFirst = currentStep === 0;\n\n  function onAbort() {\n    if (isFirst) {\n      dispatch(clearAllTransactionsToSign());\n      onCancel();\n      if (\n        callbackRoute != null &&\n        customTransactionInformation?.redirectAfterSign\n      ) {\n        window.location.href = callbackRoute;\n      }\n    } else {\n      setCurrentStep((existing) => existing - 1);\n    }\n  }\n\n  const continueWithoutSigning =\n    currentTransaction?.transactionTokenInfo?.type &&\n    currentTransaction?.transactionTokenInfo?.multiTxData &&\n    !currentTransaction?.dataField.endsWith(\n      currentTransaction?.transactionTokenInfo?.multiTxData\n    );\n\n  function onSignTransaction() {\n    if (continueWithoutSigning) {\n      setCurrentStep((exising) => exising + 1);\n    } else {\n      signTx();\n    }\n  }\n\n  function onNext() {\n    setCurrentStep((current) => {\n      const nextStep = current + 1;\n      if (nextStep > allTransactions?.length) {\n        return current;\n      }\n      return nextStep;\n    });\n  }\n\n  function onPrev() {\n    setCurrentStep((current) => {\n      const nextStep = current - 1;\n      if (nextStep < 0) {\n        return current;\n      }\n      return nextStep;\n    });\n  }\n\n  return {\n    allTransactions,\n    onSignTransaction,\n    onNext,\n    onPrev,\n    waitingForDevice,\n    onAbort,\n    isLastTransaction,\n    callbackRoute,\n    currentStep,\n    signedTransactions,\n    currentTransaction\n  };\n}\n\nexport default useSignTransactionsWithLedger;\n","import { useSelector } from 'redux/DappProviderContext';\nimport { signTransactionsErrorSelector } from 'redux/selectors';\n\nexport const useGetSignTransactionsError = () => {\n  return useSelector(signTransactionsErrorSelector);\n};\n\nexport default useGetSignTransactionsError;\n","import axios from 'axios';\nimport {\n  addressSelector,\n  apiNetworkSelector,\n  shardSelector\n} from 'redux/selectors';\n\nimport { setAccountShard } from 'redux/slices';\nimport { store } from 'redux/store';\n\nexport default async function getAccountShard() {\n  const appState = store.getState();\n  const apiAddress = apiNetworkSelector(appState);\n  const address = addressSelector(appState);\n  const shard = shardSelector(appState);\n\n  try {\n    if (shard == null && address) {\n      const { data: account } = await axios.get(\n        `${apiAddress}/accounts/${address}`\n      );\n      store.dispatch(setAccountShard(account.shard));\n      return account.shard;\n    } else {\n      return shard;\n    }\n  } catch (err) {\n    console.error(err);\n    return null;\n  }\n}\n","import React, { useEffect, useState } from 'react';\nimport { Address } from '@elrondnetwork/erdjs/out';\nimport { getServerConfiguration } from 'apiCalls';\nimport { fallbackNetworkConfigurations } from 'constants/network';\nimport { useGetAccountInfo } from 'hooks';\nimport { initializeProxyProvider } from 'providers/proxyProvider';\nimport { useDispatch } from 'redux/DappProviderContext';\nimport { initializeNetworkConfig } from 'redux/slices/networkConfigSlice';\nimport { CustomNetworkType, EnvironmentsEnum, NetworkType } from 'types';\nimport { logout } from 'utils';\nimport getAccountShard from 'utils/account/getAccountShard';\n\ninterface AppInitializerPropsType {\n  customNetworkConfig?: CustomNetworkType;\n  children: any;\n  environment: EnvironmentsEnum;\n}\n\nexport function AppInitializer({\n  customNetworkConfig = {},\n  children,\n  environment\n}: AppInitializerPropsType) {\n  const [initialized, setInitialized] = useState(false);\n  const account = useGetAccountInfo();\n  const { address, publicKey } = account;\n  const dispatch = useDispatch();\n\n  function initializeProviders(networkConfig: NetworkType) {\n    initializeProxyProvider(networkConfig);\n  }\n\n  async function initializeNetwork() {\n    const fetchConfigFromServer = !customNetworkConfig?.skipFetchFromServer;\n    const customNetworkApiAddress = customNetworkConfig?.apiAddress;\n    const fallbackConfig = fallbackNetworkConfigurations[environment] || {};\n\n    const localConfig = {\n      ...fallbackConfig,\n      ...customNetworkConfig\n    };\n\n    if (fetchConfigFromServer) {\n      const fallbackApiAddress = fallbackConfig?.apiAddress;\n\n      const serverConfig = await getServerConfiguration(\n        customNetworkApiAddress || fallbackApiAddress\n      );\n\n      if (serverConfig != null) {\n        const apiConfig = {\n          ...fallbackConfig,\n          ...serverConfig,\n          ...customNetworkConfig\n        };\n        dispatch(initializeNetworkConfig(apiConfig));\n        initializeProviders(apiConfig);\n        return;\n      }\n    }\n\n    dispatch(initializeNetworkConfig(localConfig));\n    initializeProviders(localConfig);\n  }\n\n  async function initializeApp() {\n    await initializeNetwork();\n    setInitialized(true);\n\n    getAccountShard();\n  }\n\n  useEffect(() => {\n    if (!address) {\n      return;\n    }\n\n    getAccountShard();\n  }, [address]);\n\n  useEffect(() => {\n    if (address) {\n      const pubKey = new Address(address).hex();\n      if (pubKey !== publicKey) {\n        logout();\n      }\n    }\n  }, [address, publicKey]);\n\n  useEffect(() => {\n    initializeApp();\n  }, [customNetworkConfig, environment]);\n\n  return initialized ? <>{children}</> : null;\n}\n\nexport default AppInitializer;\n","import { Address } from '@elrondnetwork/erdjs';\n\nexport class TransactionParameter {\n  sender: Address;\n  receiver: Address;\n  functionName: string;\n  inputParameters: string[];\n  outputParameters: string[];\n\n  constructor(\n    sender: Address,\n    receiver: Address,\n    functionName: string,\n    inputParameters: string[],\n    outputParameters: string[]\n  ) {\n    this.sender = sender;\n    this.receiver = receiver;\n    this.functionName = functionName;\n    this.inputParameters = inputParameters;\n    this.outputParameters = outputParameters;\n  }\n}\n","import React from 'react';\nimport { wrapperClassName } from 'utils';\n\nexport const withClassNameWrapper =\n  (Component: any) =>\n  ({ ...props }) =>\n    (\n      <span className={wrapperClassName}>\n        <Component {...props} />\n      </span>\n    );\n","import React from 'react';\nimport {\n  denomination as configDenomination,\n  decimals as configDecimals\n} from 'constants/index';\nimport { denominate, getEgldLabel, stringIsInteger } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\n\nexport interface DenominateType {\n  value: string;\n  showLastNonZeroDecimal?: boolean;\n  showLabel?: boolean;\n  token?: string;\n  decimals?: number;\n  denomination?: number;\n  egldLabel?: string;\n  'data-testid'?: string;\n}\n\nconst denominateInvalid = (props: DenominateType) => {\n  return (\n    <span\n      data-testid={\n        props['data-testid'] ? props['data-testid'] : 'denominateComponent'\n      }\n    >\n      <span className='int-amount'>...</span>\n    </span>\n  );\n};\n\nconst denominateValid = (props: DenominateType, erdLabel: string) => {\n  const { value, showLastNonZeroDecimal = false, showLabel = true } = props;\n  const decimals =\n    props.decimals !== undefined ? props.decimals : configDecimals;\n  const denomination =\n    props.denomination !== undefined ? props.denomination : configDenomination;\n\n  const denominatedValue = denominate({\n    input: value,\n    denomination,\n    decimals,\n    showLastNonZeroDecimal,\n    addCommas: true\n  });\n\n  const valueParts = denominatedValue.split('.');\n  const hasNoDecimals = valueParts.length === 1;\n  const isNotZero = denominatedValue !== '0';\n\n  if (decimals > 0 && hasNoDecimals && isNotZero) {\n    let zeros = '';\n\n    for (let i = 1; i <= decimals; i++) {\n      zeros = zeros + '0';\n    }\n\n    valueParts.push(zeros);\n  }\n\n  return (\n    <span\n      data-testid={\n        props['data-testid'] ? props['data-testid'] : 'denominateComponent'\n      }\n    >\n      <span className='int-amount'>{valueParts[0]}</span>\n      {valueParts.length > 1 && (\n        <span className='decimals'>.{valueParts[1]}</span>\n      )}\n      {showLabel && (\n        <span className={`symbol ${props.token ? 'text-muted' : ''}`}>\n          &nbsp;{props.token ? props.token : erdLabel}\n        </span>\n      )}\n    </span>\n  );\n};\n\nconst Denominate = (props: DenominateType) => {\n  const { value } = props;\n\n  return !stringIsInteger(value)\n    ? denominateInvalid(props)\n    : denominateValid(props, props.egldLabel || '');\n};\n\nconst DenominateWrapper = (props: DenominateType) => {\n  const egldLabel = props.egldLabel || getEgldLabel();\n  const denominateProps = { ...props, egldLabel };\n  return <Denominate {...denominateProps} />;\n};\n\nexport default withClassNameWrapper(DenominateWrapper);\n","let fontawesomeFreeSolidIcons: any = {};\ntry {\n  fontawesomeFreeSolidIcons = require('@fortawesome/free-solid-svg-icons');\n} catch (err) {}\n\nexport default fontawesomeFreeSolidIcons;\n","let ReactFontawesome: any = {};\ntry {\n  ReactFontawesome = require('@fortawesome/react-fontawesome');\n} catch (err) {}\n\nexport default ReactFontawesome;\n","import React from 'react';\nimport { useGetNetworkConfig } from 'hooks';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\n\nconst ExplorerLink = ({\n  page,\n  text,\n  className\n}: {\n  page: string;\n  text?: any;\n  className?: string;\n}) => {\n  const {\n    network: { explorerAddress }\n  } = useGetNetworkConfig();\n  return (\n    <a\n      href={`${explorerAddress}${page}`}\n      {...{\n        target: '_blank'\n      }}\n      className={`link-style ${className}`}\n    >\n      {text ? (\n        <React.Fragment>{text}</React.Fragment>\n      ) : (\n        <ReactFontawesome.FontAwesomeIcon\n          icon={icons.faSearch}\n          className='text-secondary'\n        />\n      )}\n    </a>\n  );\n};\n\nexport default withClassNameWrapper(ExplorerLink);\n","import React from 'react';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { useExtensionLogin } from 'services';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { ExtensionLoginButtonPropsType } from './types';\n\nconst ExtensionLoginButton: (\n  props: ExtensionLoginButtonPropsType\n) => JSX.Element = ({\n  token,\n  className = 'extension-login',\n  children,\n  callbackRoute,\n  buttonClassName,\n  loginButtonText = 'Maiar DeFi Wallet',\n  redirectAfterLogin = false,\n  shouldRenderDefaultCss = true\n}) => {\n  const [onInitiateLogin] = useExtensionLogin({\n    callbackRoute,\n    token,\n    redirectAfterLogin\n  });\n\n  const isFirefox = navigator.userAgent.indexOf('Firefox') != -1;\n  const classes = getGeneratedClasses(className, shouldRenderDefaultCss, {\n    wrapper: `btn btn-primary px-sm-4 m-1 mx-sm-3 ${\n      buttonClassName != null ? buttonClassName : ''\n    }`,\n    loginText: 'text-left',\n    noExtensionButtonWrapper: 'btn btn-unlock d-inline-block',\n    noExtensionButtonContent:\n      'd-flex justify-content-between align-items-center',\n    noExtensionButtonTitle: 'title',\n    noExtensionButtonIcon: ''\n  });\n\n  const handleLogin = () => {\n    onInitiateLogin();\n  };\n\n  return !window.elrondWallet ? (\n    <a\n      rel='noreferrer'\n      href={\n        isFirefox\n          ? 'https://addons.mozilla.org/en-US/firefox/addon/maiar-defi-wallet/'\n          : 'https://chrome.google.com/webstore/detail/dngmlblcodfobpdpecaadgfbcggfjfnm?authuser=0&hl=en'\n      }\n      target='_blank'\n      className={classes.noExtensionButtonWrapper}\n    >\n      {children || (\n        <div className={classes.noExtensionButtonContent}>\n          <div className={classes.noExtensionButtonTitle}>\n            Maiar DeFi Wallet\n          </div>\n          <ReactFontawesome.FontAwesomeIcon\n            className={classes.noExtensionButtonIcon}\n            icon={icons.faArrowRight}\n          />\n        </div>\n      )}\n    </a>\n  ) : (\n    <button onClick={handleLogin} className={classes.wrapper}>\n      {children || <span className={classes.loginText}>{loginButtonText}</span>}\n    </button>\n  );\n};\n\nexport default withClassNameWrapper(ExtensionLoginButton);\n","let ReactBootstrap: any = {};\ntry {\n  ReactBootstrap = require('react-bootstrap');\n} catch (err) {}\n\nexport default ReactBootstrap;\n","import React from 'react';\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactBootstrap from 'optionalPackages/react-bootstrap';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { wrapperClassName } from 'utils';\n\nconst ModalContainer = ({\n  children,\n  noSpacer,\n  className,\n  title,\n  onClose\n}: {\n  children: React.ReactNode;\n  noSpacer?: boolean;\n  className?: string;\n  title: React.ReactNode;\n  onClose?: () => void;\n}) => {\n  return (\n    <ReactBootstrap.Modal\n      show\n      backdrop='static'\n      onHide={onClose}\n      className={`modal-container ${\n        className ? className : ''\n      } ${wrapperClassName}`}\n      animation={false}\n      centered\n    >\n      <div className='modal-card card w-100'>\n        <div className='card-title h5 mb-0'>\n          <div className='d-flex justify-content-between align-items-center pt-spacer px-spacer mb-0'>\n            <div className={'px-3'}>{title}</div>\n            <button\n              type='button'\n              className='btn btn-light px-3 py-2'\n              onClick={onClose}\n            >\n              <ReactFontawesome.FontAwesomeIcon\n                size='lg'\n                icon={icons.faTimes}\n              />\n            </button>\n          </div>\n        </div>\n\n        <div\n          className={`modal-card-body text-center ${\n            noSpacer ? 'p-0' : 'p-spacer'\n          }`}\n        >\n          {children}\n        </div>\n      </div>\n    </ReactBootstrap.Modal>\n  );\n};\n\nexport default ModalContainer;\n","import React from 'react';\nimport classNames from 'classnames';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { PageStateProps } from './types';\n\nexport const PageState = ({\n  icon,\n  title,\n  action,\n  iconClass,\n  dataTestId,\n  description,\n  iconBgClass,\n  iconSize = '5x',\n  className = 'page-state',\n  shouldRenderDefaultCss = true\n}: PageStateProps) => {\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      wrapper: 'state m-auto p-4 text-center',\n      iconContainer: classNames('icon-state mx-auto', {\n        [`${iconBgClass}`]: Boolean(iconBgClass)\n      }),\n      iconClass: classNames(iconClass != null && iconClass),\n      title: 'h4 my-4',\n      description: 'mb-3'\n    }\n  );\n\n  return (\n    <div className={generatedClasses.wrapper} data-testid={dataTestId}>\n      {icon && (\n        <span className={generatedClasses.iconContainer}>\n          <ReactFontawesome.FontAwesomeIcon\n            icon={icon}\n            className={generatedClasses.iconClass}\n            size={iconSize}\n          />\n        </span>\n      )}\n      {title && <p className={generatedClasses.title}>{title}</p>}\n      {description && (\n        <div className={generatedClasses.description}>{description}</div>\n      )}\n      {action && <React.Fragment>{action}</React.Fragment>}\n    </div>\n  );\n};\n\nexport default withClassNameWrapper(PageState);\n","import React from 'react';\n\nimport Denominate from 'UI/Denominate';\nimport { getAccountBalance } from 'utils';\n\ninterface AddressRowType {\n  selectedAddress?: string;\n  index: number;\n  address: string;\n  onSelectAddress: (address: { address: string; index: number } | null) => void;\n}\n\n// TODO: why not use Trim component?\nconst trimHash = (hash: string, keep = 10) => {\n  const start = hash.substring(0, keep);\n  const end = hash.substring(hash.length - keep);\n  return `${start}...${end}`;\n};\n\nconst noBalance = '...';\n\nconst AddressRow = ({\n  address,\n  index,\n  selectedAddress,\n  onSelectAddress\n}: AddressRowType) => {\n  const [balance, setBalance] = React.useState(noBalance);\n\n  const handleChange = (e: React.SyntheticEvent) => {\n    const { checked } = e.target as HTMLInputElement;\n    if (checked) {\n      onSelectAddress({ address, index });\n    }\n  };\n\n  const fetchBalance = async () => {\n    try {\n      const balance = await getAccountBalance(address);\n      setBalance(balance);\n    } catch (err) {\n      console.error('error fetching balance', err, balance);\n    }\n  };\n\n  React.useEffect(() => {\n    fetchBalance();\n  }, []);\n\n  return (\n    <tr>\n      <td className='text-left'>\n        <div className='d-flex align-items-start text-left form-check'>\n          <input\n            type='radio'\n            id={`check_${index}`}\n            data-testid={`check_${index}`}\n            onChange={handleChange}\n            role='button'\n            checked={selectedAddress === address}\n            className='form-check-input mr-1'\n          />\n          <label\n            htmlFor={`check_${index}`}\n            role='button'\n            data-testid={`label_${index}`}\n            className='form-check-label text-nowrap trim-size-xl m-0'\n          >\n            <div className='d-flex align-items-center text-nowrap trim'>\n              <span>{trimHash(address)}</span>\n            </div>\n          </label>\n        </div>\n      </td>\n      <td className='text-left'>\n        <Denominate value={balance} />\n      </td>\n      <td className='text-left'>{index}</td>\n    </tr>\n  );\n};\n\nexport default AddressRow;\n","import React from 'react';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport PageState from 'UI/PageState';\nimport { getGeneratedClasses } from 'utils';\n\nimport AddressRow from './AddressRow';\n\nconst ledgerWaitingText = 'Waiting for device';\n\nconst addressesPerPage = 10;\n\ninterface AddressTablePropsType {\n  loading: boolean;\n  accounts: string[];\n  startIndex: number;\n  selectedAddress?: string;\n  className: string;\n  shouldRenderDefaultCss: boolean;\n  onSelectAddress: (address: { address: string; index: number } | null) => void;\n  onGoToPrevPage: () => void;\n  onGoToNextPage: () => void;\n  onConfirmSelectedAddress: () => void;\n}\n\nconst AddressTable = ({\n  loading,\n  accounts,\n  startIndex,\n  selectedAddress,\n  onGoToPrevPage,\n  onGoToNextPage,\n  onConfirmSelectedAddress,\n  onSelectAddress,\n  shouldRenderDefaultCss = true,\n  className = 'ledger-address-table'\n}: AddressTablePropsType) => {\n  const classes = getGeneratedClasses(className, shouldRenderDefaultCss, {\n    wrapper: 'card my-4 text-center border-0',\n    cardBody: 'card-body p-4 mx-lg-4',\n    tableWrapper: 'table-responsive',\n    tableContent: 'table m-0 border-bottom',\n    tableHeader: 'py-2 text-semibold border-bottom',\n    tableHeaderText: 'text-left border-0',\n    buttonsWrapper: 'd-flex justify-content-center pager mt-2',\n    arrowButton: 'btn btn-link mx-2',\n    confirmButton: 'btn btn-primary px-4 mt-4'\n  });\n  switch (true) {\n    case loading:\n      return (\n        <PageState\n          className={className}\n          icon={icons.faCircleNotch}\n          iconClass='fa-spin text-primary'\n          title={ledgerWaitingText}\n        />\n      );\n    default:\n      return (\n        <React.Fragment>\n          <div className='m-auto'>\n            <div className={classes.wrapper}>\n              <div className={classes.cardBody}>\n                <div\n                  className={classes.tableWrapper}\n                  data-testid='ledgerAddresses'\n                >\n                  <table className={classes.tableContent}>\n                    <thead className={classes.tableHeader}>\n                      <tr>\n                        <th className={classes.tableHeaderText}>Address</th>\n                        <th className={classes.tableHeaderText}>Balance</th>\n                        <th className={classes.tableHeaderText}>#</th>\n                      </tr>\n                    </thead>\n                    <tbody data-testid='addressesTable'>\n                      {accounts.map((address, index) => {\n                        const key = index + startIndex * addressesPerPage;\n                        return (\n                          <AddressRow\n                            key={key}\n                            address={address}\n                            index={key}\n                            selectedAddress={selectedAddress}\n                            onSelectAddress={onSelectAddress}\n                          />\n                        );\n                      })}\n                    </tbody>\n                  </table>\n                </div>\n                <div className={classes.buttonsWrapper}>\n                  <button\n                    type='button'\n                    className={classes.arrowButton}\n                    onClick={onGoToPrevPage}\n                    data-testid='prevBtn'\n                    disabled={startIndex === 0}\n                  >\n                    <ReactFontawesome.FontAwesomeIcon\n                      size='sm'\n                      icon={icons.faChevronLeft}\n                    />{' '}\n                    Prev\n                  </button>\n                  <button\n                    type='button'\n                    className={classes.arrowButton}\n                    onClick={onGoToNextPage}\n                    data-testid='nextBtn'\n                  >\n                    Next{' '}\n                    <ReactFontawesome.FontAwesomeIcon\n                      size='sm'\n                      icon={icons.faChevronRight}\n                    />\n                  </button>\n                </div>\n                <button\n                  className={classes.confirmButton}\n                  disabled={selectedAddress === ''}\n                  onClick={onConfirmSelectedAddress}\n                  data-testid='confirmBtn'\n                >\n                  Confirm\n                </button>\n              </div>\n            </div>\n          </div>\n        </React.Fragment>\n      );\n  }\n};\n\nexport default AddressTable;\n","import React from 'react';\nimport { useGetAccountInfo } from 'hooks';\n\nconst ConfirmAddress = ({\n  token,\n  noBorder\n}: {\n  token?: string;\n  noBorder?: boolean;\n}) => {\n  const { ledgerAccount } = useGetAccountInfo();\n  return (\n    <div className='m-auto'>\n      <div className={`card my-4 text-center ${noBorder ? 'border-0' : ''}`}>\n        <div className='card-body p-4 mx-lg-4'>\n          <h4 className='mb-4'>Confirm Ledger Address</h4>\n          <p>For security, please confirm that your address: </p>\n          <p className='lead border rounded p-2'>\n            {ledgerAccount ? ledgerAccount.address : ''}\n          </p>\n          {token && (\n            <React.Fragment>\n              <p>and Auth Token</p>\n              <p className='lead border rounded p-2'>{`${token}{}`}</p>\n            </React.Fragment>\n          )}\n          <p className='m-0'>\n            {token\n              ? 'are the one shown on your Ledger device screen now.'\n              : 'is the one shown on your Ledger device screen now.'}\n          </p>\n\n          <p>Select Approve on your device to confirm.</p>\n          <p>\n            Or, if it does not match, close this page and{' '}\n            <a\n              href='https://help.elrond.com/en/'\n              {...{\n                target: '_blank'\n              }}\n            >\n              contact support\n            </a>\n            .\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ConfirmAddress;\n","import React from 'react';\nimport { ReactComponent as LedgerLogo } from '../assets/ledger-nano.svg';\n\nconst LedgerConnect = ({\n  onClick,\n  error,\n  connectPageContent\n}: {\n  onClick: () => void;\n  error: string;\n  connectPageContent?: React.ReactNode;\n}) => {\n  return (\n    <div className='m-auto login-container'>\n      <div className='card my-4 text-center border-0'>\n        <div className='card-body p-4 mx-lg-4'>\n          {connectPageContent ? (\n            <React.Fragment>{connectPageContent}</React.Fragment>\n          ) : (\n            <React.Fragment>\n              <LedgerLogo className='mb-4' />\n              <h4 className='mb-4'>Connect Ledger</h4>\n              <p className='lead mb-4'>\n                Unlock your device &amp; open the Elrond App.\n              </p>\n            </React.Fragment>\n          )}\n\n          <div>\n            {error && (\n              <p className='text-danger d-flex justify-content-center align-items-center'>\n                {error}\n              </p>\n            )}\n            <button\n              className='btn btn-primary px-4'\n              onClick={onClick}\n              data-testid='connectBtn'\n            >\n              Connect Ledger\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LedgerConnect;\n","import React from 'react';\nimport { useGetAccountInfo } from 'hooks';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport { useLedgerLogin } from 'services';\nimport ModalContainer from 'UI/ModalContainer';\n\nimport PageState from 'UI/PageState';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport AddressTable from './AddressTable';\nimport ConfirmAddress from './ConfirmAddress';\nimport LedgerConnect from './LedgerConnect';\n\nconst ledgerWaitingText = 'Waiting for device';\n\ninterface LedgerLoginContainerPropsType {\n  callbackRoute: string;\n  className?: string;\n  shouldRenderDefaultCss?: boolean;\n  wrapContentInsideModal?: boolean;\n  redirectAfterLogin?: boolean;\n  token?: string;\n  onClose?: () => void;\n}\n\nfunction LedgerLoginContainer({\n  callbackRoute,\n  className = 'login-modal-content',\n  shouldRenderDefaultCss = true,\n  wrapContentInsideModal = true,\n  redirectAfterLogin,\n  onClose,\n  token\n}: LedgerLoginContainerPropsType) {\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    { spinner: 'fa-spin text-primary' }\n  );\n  const { ledgerAccount } = useGetAccountInfo();\n  const [\n    onStartLogin,\n    { error, isLoading },\n    {\n      showAddressList,\n      accounts,\n      onGoToPrevPage,\n      onGoToNextPage,\n      onSelectAddress,\n      onConfirmSelectedAddress,\n      startIndex,\n      selectedAddress\n    }\n  ] = useLedgerLogin({ callbackRoute, token, redirectAfterLogin });\n\n  function getContent() {\n    if (isLoading) {\n      return (\n        <PageState\n          icon={icons.faCircleNotch}\n          iconClass={generatedClasses.spinner}\n          title={ledgerWaitingText}\n        />\n      );\n    }\n    if (ledgerAccount != null && !error) {\n      return <ConfirmAddress token={token} />;\n    }\n\n    if (showAddressList && !error) {\n      return (\n        <AddressTable\n          accounts={accounts}\n          loading={isLoading}\n          className={className}\n          shouldRenderDefaultCss={shouldRenderDefaultCss}\n          onGoToNextPage={onGoToNextPage}\n          onGoToPrevPage={onGoToPrevPage}\n          onSelectAddress={onSelectAddress}\n          startIndex={startIndex}\n          selectedAddress={selectedAddress?.address}\n          onConfirmSelectedAddress={onConfirmSelectedAddress}\n        />\n      );\n    }\n\n    return <LedgerConnect onClick={onStartLogin} error={error} />;\n  }\n  return wrapContentInsideModal ? (\n    <ModalContainer\n      title={'Login with ledger'}\n      className={className}\n      onClose={onClose}\n    >\n      {getContent()}\n    </ModalContainer>\n  ) : (\n    getContent()\n  );\n}\n\nexport default withClassNameWrapper(LedgerLoginContainer);\n","import React from 'react';\nimport { getGeneratedClasses, wrapperClassName } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport LedgerLoginContainer from '../LoginModal';\nimport { LedgerLoginButtonPropsType } from './types';\n\nconst LedgerLoginButton: (props: LedgerLoginButtonPropsType) => JSX.Element = ({\n  token,\n  callbackRoute,\n  children,\n  onModalOpens,\n  onModalCloses,\n  loginButtonText = 'Ledger',\n  buttonClassName,\n  className = 'ledger-login',\n  redirectAfterLogin = false,\n  wrapContentInsideModal = true,\n  shouldRenderDefaultCss = true,\n  shouldRenderDefaultModalCss = true,\n  hideButtonWhenModalOpens = false\n}) => {\n  const [showLoginModal, setShowLoginModal] = React.useState(false);\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      wrapper: `btn btn-primary px-sm-4 m-1 mx-sm-3 ${\n        buttonClassName != null ? buttonClassName : ''\n      }`,\n      loginText: 'text-left'\n    }\n  );\n\n  function handleOpenModal() {\n    setShowLoginModal(true);\n    onModalOpens?.();\n  }\n\n  function handleCloseModal() {\n    setShowLoginModal(false);\n    onModalCloses?.();\n  }\n  \n  const shouldRenderButton = !hideButtonWhenModalOpens || !showLoginModal;\n\n  return (\n    <span className={wrapperClassName}>\n      {shouldRenderButton && (\n        <button onClick={handleOpenModal} className={generatedClasses.wrapper}>\n          {children || (\n            <span className={generatedClasses.loginText}>\n              {loginButtonText}\n            </span>\n          )}\n        </button>\n      )}\n      {showLoginModal && (\n        <LedgerLoginContainer\n          className={className}\n          shouldRenderDefaultCss={shouldRenderDefaultModalCss}\n          callbackRoute={callbackRoute}\n          token={token}\n          wrapContentInsideModal={wrapContentInsideModal}\n          redirectAfterLogin={redirectAfterLogin}\n          onClose={handleCloseModal}\n        />\n      )}\n    </span>\n  );\n};\n\nexport default withClassNameWrapper(LedgerLoginButton);\n","import React from 'react';\n\nimport { useGetNotification } from 'hooks';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactBootstrap from 'optionalPackages/react-bootstrap';\nimport { NotificationTypesEnum } from 'types';\n\nimport { wrapperClassName } from 'utils';\nimport PageState from '../PageState';\n\nconst typedIcons: any = icons;\n\nconst notificationTypesToIcons = {\n  [NotificationTypesEnum.warning]: typedIcons.faExclamationTriangle\n};\nconst defaultIcon = typedIcons.faExclamationTriangle;\n\nexport function NotificationModal() {\n  const { notification, clearNotification } = useGetNotification();\n\n  const showModal = Boolean(notification);\n  const onDone = () => {\n    clearNotification();\n  };\n\n  const type = notification?.type as NotificationTypesEnum.warning;\n\n  const icon = notification\n    ? notificationTypesToIcons[type] || defaultIcon\n    : null;\n\n  return notification ? (\n    <ReactBootstrap.Modal\n      show={showModal}\n      backdrop={true}\n      onHide={notification}\n      className={`modal-container ${wrapperClassName}`}\n      animation={false}\n      centered\n    >\n      <div className='card w-100 notification-modal'>\n        <PageState\n          icon={icon}\n          iconClass={notification.iconClassName}\n          iconBgClass='p-4 rounded-bg-circle'\n          iconSize='3x'\n          title={notification.title}\n          description={notification.description}\n          action={\n            <button className='btn btn-primary' onClick={onDone}>\n              Done\n            </button>\n          }\n        />\n      </div>\n    </ReactBootstrap.Modal>\n  ) : null;\n}\n\nexport default NotificationModal;\n","import React from 'react';\n\nconst Dot = ({\n  color,\n  'data-testid': dataTestId\n}: {\n  color: string;\n  'data-testid'?: string;\n}) => {\n  return <span className={`dot ${color}`} data-testid={dataTestId} />;\n};\nexport default Dot;\n","import React from 'react';\nimport Dot from './Dot';\n\ninterface ProgressStepsType {\n  totalSteps: number;\n  currentStep: number;\n  className?: string;\n}\n\nconst ProgressSteps = ({\n  totalSteps,\n  currentStep,\n  className\n}: ProgressStepsType) => {\n  const dots = [];\n\n  for (let i = 1; i <= totalSteps; i += 1) {\n    const isCurrentStep = currentStep === i;\n    const color =\n      isCurrentStep || i < currentStep ? 'bg-primary' : 'bg-secondary';\n\n    dots.push(\n      <Dot\n        data-testid={`step${i}${isCurrentStep ? 'active' : ''}`}\n        key={i}\n        color={color}\n      />\n    );\n  }\n\n  return (\n    <div\n      className={`progress-steps d-flex justify-content-center ${className}`}\n    >\n      <div className='steps d-flex justify-content-center align-items-center position-relative'>\n        <hr className='position-absolute w-100 m-0' />\n        {dots}\n      </div>\n    </div>\n  );\n};\nexport default ProgressSteps;\n","import React from 'react';\nimport classNames from 'optionalPackages/classnames';\nimport freeSolidIcons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactBootstrap from 'optionalPackages/react-bootstrap';\nimport { SignModalPropsType } from 'types';\nimport PageState from 'UI/PageState';\nimport { getGeneratedClasses, wrapperClassName } from 'utils';\n\nconst SignWithExtensionModal = ({\n  handleClose,\n  error,\n  callbackRoute,\n  transactions,\n  className = 'extension-modal'\n}: SignModalPropsType) => {\n  const classes = getGeneratedClasses(className, true, {\n    wrapper: 'modal-container extension',\n    icon: 'text-white',\n    closeBtn: 'btn btn-close-link mt-2'\n  });\n  const description = error\n    ? error\n    : transactions && transactions.length > 1\n    ? 'Check your Elrond Wallet Extension to sign the transactions'\n    : 'Check your Elrond Wallet Extension to sign the transaction';\n\n  const close = (e: React.MouseEvent) => {\n    e.preventDefault();\n    handleClose();\n    if (\n      callbackRoute != null &&\n      !window.location.pathname.includes(callbackRoute)\n    ) {\n      window.location.href = callbackRoute;\n    }\n  };\n\n  return (\n    <ReactBootstrap.Modal\n      show\n      backdrop='static'\n      onHide={handleClose}\n      className={classNames(classes.wrapper, wrapperClassName)}\n      animation={false}\n      centered\n    >\n      <PageState\n        icon={error ? freeSolidIcons.faTimes : freeSolidIcons.faHourglass}\n        iconClass={classes.icon}\n        className={className}\n        iconBgClass={error ? 'bg-danger' : 'bg-warning'}\n        iconSize='3x'\n        title='Confirm on Maiar DeFi Wallet'\n        description={description}\n        action={\n          <button\n            id='closeButton'\n            data-testid='closeButton'\n            onClick={close}\n            className={classes.closeBtn}\n          >\n            Close\n          </button>\n        }\n      />\n    </ReactBootstrap.Modal>\n  );\n};\n\nexport default SignWithExtensionModal;\n","import * as React from 'react';\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\n\nexport const Simple = ({ children }: { children: React.ReactNode }) => (\n  <div className='token-symbol'>{children}</div>\n);\n\nexport const Combined = ({\n  small,\n  children\n}: {\n  small: boolean | undefined;\n  children: React.ReactNode;\n}) => (\n  <div className={`token-symbol-combined ${small ? 'small' : ''}`}>\n    {children}\n  </div>\n);\n\nexport const Wrapped = ({ children }: { children: React.ReactNode }) => (\n  <div className='token-symbol-wrapped'>\n    <div className='wrapped rounded-circle shadow'>\n      <div className='locked-icon'>\n        <ReactFontawesome.FontAwesomeIcon icon={icons.faDollarSign} size='sm' />\n      </div>\n      {children}\n    </div>\n  </div>\n);\n\nexport const Pool = ({\n  first,\n  second\n}: {\n  first: React.ReactNode;\n  second: React.ReactNode;\n}) => (\n  <div className='token-symbol-pool'>\n    <div className='pool rounded-circle shadow'>\n      {first}\n      <div className='pool-icon'>{second}</div>\n    </div>\n  </div>\n);\n\nexport const Locked = ({ children }: { children: React.ReactNode }) => (\n  <div className='token-symbol-locked'>\n    <div className='locked rounded-circle shadow'>\n      <div className='locked-icon'>\n        <ReactFontawesome.FontAwesomeIcon icon={icons.faLock} size='sm' />\n      </div>\n      {children}\n    </div>\n  </div>\n);\n","import React from 'react';\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { getEgldLabel, wrapperClassName } from 'utils';\nimport { ReactComponent as EgldIcon } from '../../assets/icons/EGLD.svg';\nimport { Simple, Combined } from './TokenSymbol';\n\nconst getIdentifierWithoutNonce = (identifier: string) => {\n  const tokenParts = identifier.split('-');\n  return identifier.includes('-')\n    ? `${tokenParts[0]}-${tokenParts[1]}`\n    : identifier;\n};\n\ntype TokenIconProps = {\n  token: string;\n  combined?: boolean | undefined;\n  small?: boolean | undefined;\n  tokenAvatar?: string;\n};\ntype TokenIconType = TokenIconProps & {\n  symbol: string;\n  label: string;\n  icon: React.ReactNode;\n};\n\nfunction getIcon(isEgldTransfer: boolean, tokenAvatar?: string) {\n  if (tokenAvatar) {\n    return <img className='token-symbol-custom-token' src={tokenAvatar} />;\n  }\n  return isEgldTransfer ? (\n    <EgldIcon />\n  ) : (\n    <ReactFontawesome.FontAwesomeIcon icon={icons.faDiamond} />\n  );\n}\n\nconst getDetails = (token: string, tokenAvatar?: string): TokenIconType => {\n  const egldLabel = getEgldLabel();\n  const isEgldTransfer = token === egldLabel;\n\n  return {\n    token,\n    symbol: token ? token.split('-')[0] : '',\n    label: token,\n    // eslint-disable-next-line react/display-name\n    icon: () => getIcon(isEgldTransfer, tokenAvatar)\n  };\n};\n\nexport default class TokenDetails extends React.Component {\n  static Token = (props: TokenIconProps) => (\n    <React.Fragment>{props.token}</React.Fragment>\n  );\n  static Symbol = (props: TokenIconProps) => (\n    <React.Fragment>\n      {\n        getDetails(getIdentifierWithoutNonce(props.token), props.tokenAvatar)\n          .symbol\n      }\n    </React.Fragment>\n  );\n  static Label = (props: TokenIconProps) => (\n    <React.Fragment>\n      {\n        getDetails(getIdentifierWithoutNonce(props.token), props.tokenAvatar)\n          .label\n      }\n    </React.Fragment>\n  );\n  static Icon = (props: TokenIconProps) => {\n    const Component: any =\n      process.env.NODE_ENV !== 'test'\n        ? getDetails(getIdentifierWithoutNonce(props.token), props.tokenAvatar)\n            .icon\n        : () => null;\n\n    return (\n      <span className={wrapperClassName}>\n        {props.combined ? (\n          <Combined small={props.small}>\n            <Component />\n          </Combined>\n        ) : (\n          <Simple>\n            <Component />\n          </Simple>\n        )}\n      </span>\n    );\n  };\n  render() {\n    return null;\n  }\n}\n","import * as React from 'react';\nimport { decodePart } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\n\nconst allOccurences = (sourceStr: string, searchStr: string) =>\n  [...sourceStr.matchAll(new RegExp(searchStr, 'gi'))].map((a) => a.index);\n\nconst TransactionData = ({\n  data,\n  highlight,\n  isScCall\n}: {\n  data: string;\n  highlight?: string;\n  isScCall?: boolean;\n}) => {\n  let output = <React.Fragment>{data}</React.Fragment>;\n\n  const [encodedScCall, ...remainingDataFields] =\n    highlight && isScCall ? highlight.split('@') : [];\n\n  if (data && highlight && allOccurences(data, highlight).length === 1) {\n    switch (true) {\n      case data.startsWith(highlight): {\n        const [, rest] = data.split(highlight);\n        output = (\n          <React.Fragment>\n            {highlight}\n            <span className='text-muted'>{rest}</span>\n          </React.Fragment>\n        );\n        break;\n      }\n      case data.endsWith(highlight): {\n        const [rest] = data.split(highlight);\n        output = (\n          <React.Fragment>\n            <span className='text-muted'>{rest}</span>\n            {highlight}\n          </React.Fragment>\n        );\n        break;\n      }\n\n      default: {\n        const [start, end] = data.split(highlight);\n\n        output = (\n          <React.Fragment>\n            <span className='text-muted'>{start}</span>\n            <span className={'highlighted'}>{highlight}</span>\n            <span className='text-muted'>{end}</span>\n          </React.Fragment>\n        );\n        break;\n      }\n    }\n  }\n\n  return (\n    <React.Fragment>\n      {encodedScCall && (\n        <div className='form-group mb-0 data-field mw-100'>\n          <span className='form-label text-secondary d-block'>SC Call</span>\n\n          <div\n            data-testid='confirmScCall'\n            className='textarea sc-call form-control cursor-text mt-1 text-break-all'\n          >\n            {[decodePart(encodedScCall), ...remainingDataFields].join('@')}\n          </div>\n        </div>\n      )}\n      <div className='form-group mb-0 data-field mw-100'>\n        <span className='form-label text-secondary d-block'>Data</span>\n\n        <div\n          data-testid='confirmData'\n          className='textarea form-control cursor-text mt-1 text-break-all'\n        >\n          {data ? output : 'N/A'}\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default withClassNameWrapper(TransactionData);\n","import React from 'react';\nimport { Address } from '@elrondnetwork/erdjs/out';\nimport { useGetNetworkConfig } from 'hooks';\nimport useGetTokenDetails from 'hooks/transactions/useGetTokenDetails';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { ActiveLedgerTransactionType, MultiSignTxType } from 'types';\nimport PageState from 'UI/PageState';\nimport ProgressSteps from 'UI/ProgressSteps';\nimport TokenDetails from 'UI/TokenDetails';\nimport TransactionData from 'UI/TransactionData';\nimport {\n  denominate,\n  getEgldLabel,\n  getGeneratedClasses,\n  isTokenTransfer\n} from 'utils';\n\nexport interface SignStepType {\n  onSignTransaction: () => void;\n  onPrev: () => void;\n  handleClose: () => void;\n  waitingForDevice: boolean;\n  error: string | null;\n  callbackRoute?: string;\n  title?: React.ReactNode;\n  currentStep: number;\n  currentTransaction: ActiveLedgerTransactionType | null;\n  allTransactions: MultiSignTxType[];\n  isLastTransaction: boolean;\n  className: string;\n}\n\nconst SignStep = ({\n  onSignTransaction,\n  handleClose,\n  onPrev,\n  title,\n  waitingForDevice,\n  currentTransaction,\n  error,\n  allTransactions,\n  isLastTransaction,\n  currentStep,\n  className\n}: SignStepType) => {\n  const egldLabel = getEgldLabel();\n\n  if (!currentTransaction) {\n    return null;\n  }\n\n  const transactionData = currentTransaction.transaction.getData().toString();\n  const { network } = useGetNetworkConfig();\n\n  const { tokenId, amount, type, multiTxData, receiver } =\n    currentTransaction.transactionTokenInfo;\n\n  const isTokenTransaction = Boolean(\n    tokenId && isTokenTransfer({ tokenId, erdLabel: egldLabel })\n  );\n\n  const isFirst = currentStep === 0;\n\n  const onCloseClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    if (isFirst) {\n      handleClose();\n    } else {\n      onPrev();\n    }\n  };\n\n  const continueWithoutSigning =\n    type && multiTxData && !transactionData.endsWith(multiTxData);\n\n  let signBtnLabel = 'Sign & Continue';\n  signBtnLabel = waitingForDevice ? 'Check your Ledger' : signBtnLabel;\n  signBtnLabel =\n    isLastTransaction && !waitingForDevice ? 'Sign & Submit' : signBtnLabel;\n  signBtnLabel = continueWithoutSigning ? 'Continue' : signBtnLabel;\n\n  const { tokenDenomination, tokenAvatar } = useGetTokenDetails({\n    tokenId: currentTransaction.transactionTokenInfo.tokenId\n  });\n\n  const denominatedAmount = denominate({\n    input: isTokenTransaction\n      ? amount\n      : currentTransaction.transaction.getValue().toString(),\n    denomination: isTokenTransaction\n      ? tokenDenomination\n      : Number(network.egldDenomination),\n    decimals: Number(network.decimals),\n    showLastNonZeroDecimal: false,\n    addCommas: true\n  });\n\n  const scamReport = currentTransaction.receiverScamInfo;\n  const showProgressSteps = allTransactions.length > 1;\n\n  const classes = getGeneratedClasses(className, true, {\n    formGroup: 'form-group text-left',\n    formLabel: 'form-label text-secondary',\n    icon: 'text-white',\n    contentWrapper:\n      'd-flex flex-column justify-content-start flex-md-row justify-content-md-between mb-3',\n    tokenWrapper: 'mb-3 mb-md-0 d-flex flex-column align-items-start',\n    tokenLabel: 'text-secondary text-left',\n    tokenValue: 'd-flex align-items-center mt-1',\n    scamReport: 'text-warning',\n    scamReportIcon: 'text-warning mr-1',\n    tokenAmountLabel: 'text-secondary text-left',\n    tokenAmountValue: 'd-flex align-items-center',\n    dataFormGroup: 'form-group text-left',\n    errorMessage:\n      'text-danger d-flex justify-content-center align-items-center',\n    buttonsWrapper: 'd-flex align-items-center justify-content-end mt-spacer',\n    cancelButton: 'btn btn-dark text-white flex-even mr-2',\n    signButton: `btn ${\n      scamReport ? 'btn-warning' : 'btn-primary'\n    } flex-even ml-2`\n  });\n\n  return (\n    <PageState\n      icon={error ? icons.faTimes : icons.faHourglass}\n      iconClass={classes.icon}\n      iconBgClass={error ? 'bg-danger' : 'bg-warning'}\n      iconSize='3x'\n      className={className}\n      title={title || 'Confirm on Ledger'}\n      description={\n        <React.Fragment>\n          {currentTransaction.transaction && (\n            <React.Fragment>\n              {showProgressSteps && (\n                <ProgressSteps\n                  totalSteps={allTransactions.length}\n                  currentStep={currentStep + 1} // currentStep starts at 0\n                  className='mb-4'\n                />\n              )}\n\n              <div className={classes.formGroup} data-testid='transactionTitle'>\n                <div className={classes.formLabel}>To: </div>\n                {multiTxData\n                  ? new Address(receiver).bech32()\n                  : currentTransaction.transaction.getReceiver().toString()}\n                {scamReport && (\n                  <div className={classes.scamReport}>\n                    <span>\n                      <ReactFontawesome.FontAwesomeIcon\n                        icon={icons.faExclamationTriangle}\n                        className={classes.scamReportIcon}\n                      />\n                      <small>{scamReport}</small>\n                    </span>\n                  </div>\n                )}\n              </div>\n\n              <div className={classes.contentWrapper}>\n                <div className={classes.tokenWrapper}>\n                  <div className={classes.tokenlabel}>Token</div>\n                  <div className={classes.tokenValue}>\n                    <TokenDetails.Icon\n                      tokenAvatar={tokenAvatar}\n                      token={tokenId || egldLabel}\n                    />\n                    <div className='mr-1'></div>\n                    <TokenDetails.Label token={tokenId || egldLabel} />\n                  </div>\n                </div>\n                <div>\n                  <div className={classes.tokenAmountLabel}>Amount</div>\n                  <div className={classes.tokenAmountValue}>\n                    <div className='mr-1'>{denominatedAmount}</div>\n                    <TokenDetails.Symbol token={tokenId || egldLabel} />\n                  </div>\n                </div>\n              </div>\n\n              <div className={classes.dataFormGroup}>\n                {currentTransaction.transaction.getData() && (\n                  <TransactionData\n                    {...{\n                      data: currentTransaction.transaction.getData().toString(),\n                      highlight: multiTxData,\n                      isScCall: !tokenId\n                    }}\n                  />\n                )}\n              </div>\n              {error && <p className={classes.errorMessage}>{error}</p>}\n            </React.Fragment>\n          )}\n        </React.Fragment>\n      }\n      action={\n        <div className={classes.buttonsWrapper}>\n          <button\n            id='closeButton'\n            data-testid='closeButton'\n            onClick={onCloseClick}\n            className={classes.cancelButton}\n          >\n            {isFirst ? 'Cancel' : 'Back'}\n          </button>\n\n          <button\n            type='button'\n            className={classes.signButton}\n            id='signBtn'\n            data-testid='signBtn'\n            onClick={onSignTransaction}\n            disabled={waitingForDevice}\n          >\n            {signBtnLabel}\n          </button>\n        </div>\n      }\n    />\n  );\n};\n\nexport default SignStep;\n","import React from 'react';\nimport { useSignTransactionsWithLedger } from 'hooks';\nimport classNames from 'optionalPackages/classnames';\nimport ReactBootstrap from 'optionalPackages/react-bootstrap';\nimport { SignModalPropsType } from 'types';\nimport { getGeneratedClasses, wrapperClassName } from 'utils';\nimport SignStep from './SignStep';\n\nconst SignWithLedgerModal = ({\n  handleClose,\n  error,\n  className = 'ledger-modal',\n  verifyReceiverScam = true,\n  title = 'Confirm on Ledger'\n}: SignModalPropsType) => {\n  const {\n    onSignTransaction,\n    onNext,\n    onPrev,\n    allTransactions,\n    waitingForDevice,\n    onAbort,\n    isLastTransaction,\n    currentStep,\n    callbackRoute,\n    currentTransaction\n  } = useSignTransactionsWithLedger({\n    onCancel: handleClose,\n    verifyReceiverScam\n  });\n  const classes = getGeneratedClasses(className, true, {\n    wrapper: 'modal-container wallet-connect',\n    container: 'card container',\n    cardBody: 'card-body'\n  });\n  return (\n    <ReactBootstrap.Modal\n      show={currentTransaction != null}\n      backdrop='static'\n      onHide={handleClose}\n      className={classNames(classes.wrapper, wrapperClassName)}\n      animation={false}\n      centered\n    >\n      <div className={classes.container}>\n        <div className={classes.cardBody}>\n          <SignStep\n            {...{\n              onSignTransaction,\n              onNext,\n              onPrev,\n              allTransactions,\n              waitingForDevice,\n              isLastTransaction,\n              currentStep,\n              callbackRoute,\n              currentTransaction,\n              handleClose: onAbort,\n              className,\n              error,\n              title\n            }}\n          />\n        </div>\n      </div>\n    </ReactBootstrap.Modal>\n  );\n};\n\nexport default SignWithLedgerModal;\n","import React from 'react';\n\nimport classNames from 'optionalPackages/classnames';\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactBootstrap from 'optionalPackages/react-bootstrap';\nimport { SignModalPropsType } from 'types';\nimport PageState from 'UI/PageState';\nimport { getGeneratedClasses, wrapperClassName } from 'utils';\n\nexport const SignWithWalletConnectModal = ({\n  error,\n  handleClose,\n  callbackRoute,\n  transactions,\n  className = 'wallet-connect-modal'\n}: SignModalPropsType) => {\n  const classes = getGeneratedClasses(className, true, {\n    wrapper: 'modal-container wallet-connect',\n    icon: 'text-white',\n    closeBtn: 'btn btn-close-link mt-2'\n  });\n\n  const hasMultipleTransactions = transactions && transactions?.length > 1;\n  const description = error\n    ? error\n    : `Check your phone to sign the transaction${\n        hasMultipleTransactions ? 's' : ''\n      }`;\n\n  const close = (e: React.MouseEvent) => {\n    e.preventDefault();\n    handleClose();\n    if (\n      callbackRoute != null &&\n      !window.location.pathname.includes(callbackRoute)\n    ) {\n      window.location.href = callbackRoute;\n    }\n  };\n  return (\n    <ReactBootstrap.Modal\n      show\n      backdrop='static'\n      onHide={close}\n      className={classNames(classes.wrapper, wrapperClassName)}\n      animation={false}\n      centered\n    >\n      <PageState\n        icon={error ? icons.faTimes : icons.faHourglass}\n        iconClass={classes.icon}\n        className={className}\n        iconBgClass={error ? 'bg-danger' : 'bg-warning'}\n        iconSize='3x'\n        title='Confirm on Maiar'\n        description={description}\n        action={\n          <button\n            id='closeButton'\n            data-testid='closeButton'\n            onClick={close}\n            className={classes.closeBtn}\n          >\n            Close\n          </button>\n        }\n      />\n    </ReactBootstrap.Modal>\n  );\n};\n\nexport default SignWithWalletConnectModal;\n","import React from 'react';\n\nimport { Transaction } from '@elrondnetwork/erdjs';\nimport { useGetLoginInfo } from 'hooks';\nimport {\n  useGetAccountProvider,\n  useGetSignTransactionsError,\n  useSignTransactions\n} from 'hooks';\nimport { LoginMethodsEnum } from 'types';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport SignWithExtensionModal from './SignWithExtensionModal';\nimport SignWithLedgerModal from './SignWithLedgerModal';\nimport SignWithWalletConnectModal from './SignWithWalletConnectModal';\n\ninterface SignPropsType {\n  handleClose: () => void;\n  error: string | null;\n  sessionId?: string;\n  transactions: Transaction[];\n  providerType: LoginMethodsEnum;\n  callbackRoute: string;\n  className?: string;\n  verifyReceiverScam?: boolean;\n}\n\ninterface CustomConfirmScreensType {\n  Ledger: (signProps: SignPropsType) => JSX.Element;\n  Extension: (signProps: SignPropsType) => JSX.Element;\n  WalletConnect: (signProps: SignPropsType) => JSX.Element;\n  Extra: (signProps: SignPropsType) => JSX.Element;\n}\n\ninterface SignTransactionsPropsType {\n  className?: string;\n  CustomConfirmScreens?: CustomConfirmScreensType;\n  verifyReceiverScam?: SignPropsType['verifyReceiverScam'];\n}\n\nfunction SignTransactionsModals({\n  className,\n  CustomConfirmScreens,\n  verifyReceiverScam = true\n}: SignTransactionsPropsType) {\n  const {\n    callbackRoute,\n    transactions,\n    error,\n    sessionId,\n    onAbort,\n    hasTransactions\n  } = useSignTransactions();\n\n  const { providerType } = useGetAccountProvider();\n  const signTransactionsError = useGetSignTransactionsError();\n  const { loginMethod } = useGetLoginInfo();\n\n  const handleClose = () => {\n    onAbort(sessionId);\n  };\n\n  const signError = error || signTransactionsError;\n\n  const signProps: SignPropsType = {\n    handleClose,\n    error: signError,\n    sessionId,\n    transactions: transactions!,\n    providerType,\n    callbackRoute,\n    className,\n    verifyReceiverScam\n  };\n\n  if (signError || hasTransactions) {\n    switch (loginMethod) {\n      case LoginMethodsEnum.ledger:\n        return CustomConfirmScreens?.Ledger ? (\n          <CustomConfirmScreens.Ledger {...signProps} />\n        ) : (\n          <SignWithLedgerModal {...signProps} />\n        );\n\n      case LoginMethodsEnum.walletconnect:\n        return CustomConfirmScreens?.WalletConnect ? (\n          <CustomConfirmScreens.WalletConnect {...signProps} />\n        ) : (\n          <SignWithWalletConnectModal {...signProps} />\n        );\n\n      case LoginMethodsEnum.extension:\n        return CustomConfirmScreens?.Extension ? (\n          <CustomConfirmScreens.Extension {...signProps} />\n        ) : (\n          <SignWithExtensionModal {...signProps} />\n        );\n\n      case LoginMethodsEnum.extra:\n        return CustomConfirmScreens?.Extra ? (\n          <CustomConfirmScreens.Extra {...signProps} />\n        ) : null;\n\n      default:\n        return null;\n    }\n  }\n\n  return null;\n}\n\nexport default withClassNameWrapper(SignTransactionsModals);\n","enum SessionStorageKeysEnum {\n  'toasts' = 'toasts'\n}\n\nexport function setToastsIdsToStorage(ids: string[]) {\n  return sessionStorage.setItem(\n    SessionStorageKeysEnum.toasts,\n    JSON.stringify(ids)\n  );\n}\n\nexport function getToastsIdsFromStorage() {\n  const toastsIds = sessionStorage.getItem(SessionStorageKeysEnum.toasts);\n  return toastsIds != null ? JSON.parse(toastsIds) : [];\n}\n","import React from 'react';\nimport classnames from 'optionalPackages/classnames';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { Props } from './types';\n\nconst IconState = ({\n  icon,\n  iconSize = '3x',\n  className = 'icon-state',\n  shouldRenderDefaultCss = true\n}: Props) => {\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      wrapper: classnames('icon-state mx-auto', className, {\n        half: iconSize === '2x'\n      }),\n      icon: classnames('text-white', className)\n    }\n  );\n\n  return (\n    <span className={generatedClasses.wrapper}>\n      <ReactFontawesome.FontAwesomeIcon\n        icon={icon}\n        size={iconSize}\n        className={generatedClasses.icon}\n      />\n    </span>\n  );\n};\n\nexport default withClassNameWrapper(IconState);\n","import React from 'react';\nimport moment from 'optionalPackages/moment';\nimport { logarithmicRest } from 'utils';\nimport storage from 'utils/storage';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { Props } from './type';\n\nconst Progress = ({\n  id,\n  children,\n  progress,\n  done,\n  expiresIn = 10 * 60\n}: Props) => {\n  const ref = React.useRef(null);\n  const intervalRef = React.useRef<any>();\n  const removeTxFromSession = () => {\n    const toastProgress = storage.session.getItem('toastProgress');\n    const hasSessionStoredTx = Boolean(toastProgress?.[id]);\n\n    if (!hasSessionStoredTx) {\n      return;\n    }\n\n    const expires = moment().add(expiresIn, 'seconds').unix();\n\n    delete toastProgress[id];\n\n    storage.session.setItem({\n      key: 'toastProgress',\n      data: toastProgress,\n      expires\n    });\n  };\n\n  const saveToSession = ({ value }: { value: number }) => {\n    const toastProgress = storage.session.getItem('toastProgress') || {};\n    toastProgress[id] = value;\n    storage.session.setItem({\n      key: 'toastProgress',\n      data: toastProgress,\n      expires: moment().add(expiresIn, 'seconds').unix()\n    });\n  };\n\n  const getInitialData = () => {\n    const totalSeconds = progress ? progress.endTime - progress.startTime : 0;\n    const toastProgress = storage.session.getItem('toastProgress');\n    const remaining = progress\n      ? ((progress.endTime - moment().unix()) * 100) / totalSeconds\n      : 0;\n\n    const currentRemaining =\n      toastProgress && id in toastProgress ? toastProgress[id] : remaining;\n    return { currentRemaining, totalSeconds };\n  };\n\n  const { totalSeconds, currentRemaining } = getInitialData();\n\n  const [percentRemaining, setPercentRemaining] =\n    React.useState<number>(currentRemaining);\n\n  React.useEffect(() => {\n    if (progress) {\n      const maxPercent = 90;\n      const perc = totalSeconds / maxPercent;\n      const int = moment.duration(perc.toFixed(2), 's').asMilliseconds();\n\n      if (done) {\n        intervalRef.current = setInterval(() => {\n          if (ref.current !== null) {\n            setPercentRemaining((existing) => {\n              const value = existing - 1;\n              if (value <= 0) {\n                clearInterval(intervalRef.current);\n                removeTxFromSession();\n                return 0;\n              } else {\n                saveToSession({ value });\n                return value;\n              }\n            });\n          }\n        }, 5);\n      } else {\n        intervalRef.current = setInterval(() => {\n          if (ref.current !== null) {\n            setPercentRemaining((existing) => {\n              const decrement =\n                existing > 100 - maxPercent ? 1 : logarithmicRest(existing);\n              const value = existing - decrement;\n              saveToSession({ value });\n              return value;\n            });\n          }\n        }, int);\n      }\n\n      return () => {\n        clearInterval(intervalRef.current);\n      };\n    }\n    return;\n  }, [progress, done]);\n  return progress ? (\n    <div className='progress position-relative' ref={ref}>\n      <div\n        className='progress-bar'\n        role='progressbar'\n        style={{ width: `${percentRemaining}%` }}\n        aria-valuenow={percentRemaining}\n        aria-valuemin={0}\n        aria-valuemax={100}\n      >\n        <div className='content-height'>{children}</div>\n      </div>\n      <div className='d-flex position-absolute w-100'>{children}</div>\n    </div>\n  ) : (\n    <React.Fragment>{children}</React.Fragment>\n  );\n};\n\nexport default withClassNameWrapper(Progress);\n","function fallbackCopyTextToClipboard(text: string) {\n  let success = false;\n\n  const textArea = document.createElement('textarea');\n  textArea.value = text;\n  textArea.style.position = 'fixed';\n  document.body.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n\n  try {\n    document.execCommand('copy');\n    success = true;\n  } catch (err) {\n    console.error('Fallback: Oops, unable to copy', err);\n  }\n\n  document.body.removeChild(textArea);\n\n  return success;\n}\n\nexport default async function copyTextToClipboard(text: string) {\n  let success = false;\n\n  if (!navigator.clipboard) {\n    success = fallbackCopyTextToClipboard(text);\n  } else {\n    success = await navigator.clipboard.writeText(text).then(\n      function done() {\n        return true;\n      },\n      function error(err) {\n        console.error('Async: Could not copy text: ', err);\n        return false;\n      }\n    );\n  }\n\n  return success;\n}\n","import React from 'react';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport copyTextToClipboard from './helpers/copyToClipboard';\n\ninterface CopyButtonType {\n  text: string;\n  className?: string;\n}\n\nconst CopyButton = ({ text, className = '' }: CopyButtonType) => {\n  const [copyResult, setCopyResut] = React.useState({\n    default: true,\n    success: false\n  });\n\n  const handleCopyToClipboard = async (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    const noSpaces = text ? text.trim() : text;\n    setCopyResut({\n      default: false,\n      success: await copyTextToClipboard(noSpaces)\n    });\n\n    setTimeout(() => {\n      setCopyResut({\n        default: true,\n        success: false\n      });\n    }, 1000);\n  };\n\n  return (\n    <a\n      href='/#'\n      onClick={handleCopyToClipboard}\n      className={`side-action text-secondary ${className}`}\n    >\n      {copyResult.default || !copyResult.success ? (\n        <ReactFontawesome.FontAwesomeIcon icon={icons.faCopy} />\n      ) : (\n        <ReactFontawesome.FontAwesomeIcon\n          icon={icons.faCheck}\n          className='text-primary-highlight'\n        />\n      )}\n    </a>\n  );\n};\n\nexport default withClassNameWrapper(CopyButton);\n","import React from 'react';\nimport { useCallback } from 'react';\nimport debounce from 'lodash.debounce';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\n\ninterface TrimType {\n  text: string;\n  dataTestId?: string;\n}\n\nconst Trim = ({ text, dataTestId = '' }: TrimType) => {\n  const [overflow, setOverflow] = React.useState(false);\n  const trimRef = React.useRef(document.createElement('span'));\n  const hiddenTextRef = React.useRef(document.createElement('span'));\n\n  const listener = useCallback(\n    debounce(() => {\n      if (trimRef.current && hiddenTextRef.current) {\n        const diff =\n          hiddenTextRef.current.offsetWidth - trimRef.current.offsetWidth;\n        setOverflow(diff > 1);\n      }\n    }, 300),\n    []\n  );\n\n  const addWindowResizeListener = () => {\n    window.addEventListener('resize', listener);\n    return () => {\n      window.removeEventListener('resize', listener);\n    };\n  };\n\n  React.useEffect(addWindowResizeListener);\n\n  React.useEffect(() => {\n    listener();\n  }, []);\n\n  return (\n    <span\n      ref={trimRef}\n      className={`trim ${overflow ? 'overflow' : ''}`}\n      data-testid={dataTestId}\n    >\n      <span ref={hiddenTextRef} className='hidden-text-ref'>\n        {text}\n      </span>\n\n      {overflow ? (\n        <React.Fragment>\n          <span className='left'>\n            <span>\n              {String(text).substring(0, Math.floor(text.length / 2))}\n            </span>\n          </span>\n          <span className='ellipsis'>...</span>\n          <span className='right'>\n            <span>{String(text).substring(Math.ceil(text.length / 2))}</span>\n          </span>\n        </React.Fragment>\n      ) : (\n        <span>{text}</span>\n      )}\n    </span>\n  );\n};\n\nexport default withClassNameWrapper(Trim);\n","import React from 'react';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport CopyButton from 'UI/CopyButton';\nimport ExplorerLink from 'UI/ExplorerLink';\nimport Trim from 'UI/Trim';\nimport { getGeneratedClasses, isServerTransactionPending } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { Props } from './types';\n\nconst TxDetails = ({\n  title,\n  transactions,\n  className = 'tx-details',\n  isTimedOut = false,\n  shouldRenderDefaultCss = true\n}: Props) => {\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      title: 'mb-0',\n      statusTransactions: 'mb-2 mt-1',\n      iconSuccess: 'mr-1 text-secondary',\n      iconFailed: 'mr-1 text-secondary',\n      trimContainer: 'text-nowrap trim-fs-sm mr-3',\n      iconPending: 'mr-1 text-secondary fa-spin slow-spin',\n      item: 'tx-description d-flex justify-content-start align-items-center'\n    }\n  );\n\n  const iconSuccessData = {\n    icon: icons.faCheck,\n    classNames: generatedClasses.iconSuccess\n  };\n\n  const iconFailedData = {\n    icon: icons.faTimes,\n    classNames: generatedClasses.iconSuccess\n  };\n\n  const iconPendingData = {\n    icon: icons.faCircleNotch,\n    classNames: generatedClasses.iconPending\n  };\n\n  const iconData: Record<string, typeof iconPendingData> = {\n    pending: iconPendingData,\n    success: iconSuccessData,\n    completed: iconSuccessData,\n    fail: iconFailedData,\n    invalid: iconFailedData,\n    timedOut: iconFailedData\n  };\n  return (\n    <React.Fragment>\n      {title && <div className={generatedClasses.title}>{title}</div>}\n      <div className={generatedClasses.statusTransactions}>\n        {\n          transactions.filter((tx) => !isServerTransactionPending(tx.status))\n            .length\n        }{' '}\n        / {transactions.length} transactions processed\n      </div>\n      {transactions.map(({ hash, status }) => {\n        const iconSrc = iconData[status];\n        return (\n          <div className={generatedClasses.item} key={hash}>\n            {!isTimedOut && iconSrc != null && (\n              <ReactFontawesome.FontAwesomeIcon\n                icon={iconSrc.icon}\n                className={iconSrc.classNames}\n              />\n            )}\n            <span\n              className={generatedClasses.trimContainer}\n              style={{ width: '10rem' }}\n            >\n              <Trim text={hash} />\n            </span>\n            <CopyButton text={hash} />\n            {!isServerTransactionPending(status) && (\n              <ExplorerLink page={`/transactions/${hash}`} className='ml-2' />\n            )}\n          </div>\n        );\n      })}\n    </React.Fragment>\n  );\n};\n\nexport default withClassNameWrapper(TxDetails);\n","import React, { useMemo, useRef, useState } from 'react';\n\nimport { useGetTransactionDisplayInfo } from 'hooks';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport moment from 'optionalPackages/moment';\nimport ReactBootstrap from 'optionalPackages/react-bootstrap';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { useSelector } from 'redux/DappProviderContext';\nimport { shardSelector } from 'redux/selectors';\nimport { isCrossShardTransaction } from 'services/transactions/isCrossShardTransaction';\nimport { SignedTransactionType } from 'types';\nimport IconState from 'UI/IconState';\nimport Progress from 'UI/Progress';\nimport TxDetails from 'UI/TxDetails';\nimport {\n  getAddressFromDataField,\n  getGeneratedClasses,\n  getIsTransactionPending,\n  getIsTransactionTimedOut\n} from 'utils';\n\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { TransactionToastPropsType } from './types';\n\nconst averageTxDurationMs = 6000;\nconst crossShardRounds = 5;\n\nconst TransactionToast = ({\n  toastId,\n  title = '',\n  shouldRenderDefaultCss = true,\n  className = 'transaction-toast',\n  withTxNonce = false,\n  transactions,\n  status,\n  onClose,\n  startTimeProgress,\n  endTimeProgress,\n  lifetimeAfterSuccess\n}: TransactionToastPropsType) => {\n  const ref = useRef(null);\n  const [shouldRender, setShouldRender] = useState(true);\n  const transactionDisplayInfo = useGetTransactionDisplayInfo(toastId);\n  const accountShard = useSelector(shardSelector);\n\n  const {\n    errorMessage = 'Transaction failed',\n    timedOutMessage = 'Transaction timed out',\n    successMessage = 'Transaction successful',\n    processingMessage = 'Processing transaction'\n  } = transactionDisplayInfo;\n\n  const isSameShard = useMemo(\n    () =>\n      transactions!.reduce(\n        (\n          prevTxIsSameShard: boolean,\n          { receiver, data }: SignedTransactionType\n        ) => {\n          const receiverAddress = getAddressFromDataField({\n            receiver,\n            data\n          });\n          if (receiverAddress == null) {\n            return prevTxIsSameShard;\n          }\n          return (\n            prevTxIsSameShard &&\n            isCrossShardTransaction({\n              receiverAddress,\n              senderShard: accountShard\n            })\n          );\n        },\n        true\n      ),\n    [transactions, accountShard]\n  );\n\n  const shardAdjustedDuration = isSameShard\n    ? averageTxDurationMs\n    : crossShardRounds * averageTxDurationMs;\n\n  const transactionDuration =\n    transactionDisplayInfo?.transactionDuration || shardAdjustedDuration;\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      toastFooter: 'mb-0 text-break',\n      details: 'media-body flex-grow-1',\n      toastContainer: 'w-100 media p-2',\n      wrapper: 'toast-visible clickable',\n      toastHeader: 'd-flex justify-content-between mb-1',\n      iconContainer: 'align-self-center ml-2 mr-2 pr-1',\n      title: 'm-0 font-weight-normal text-nowrap text-truncate',\n      closeButton: 'close d-flex side-action align-items-center mx-2 outline-0'\n    }\n  );\n\n  const [startTime, endTime] = useMemo(() => {\n    const startTime = startTimeProgress || moment().unix();\n    const endTime =\n      endTimeProgress ||\n      moment().add(Number(transactionDuration), 'milliseconds').unix();\n    return [startTime, endTime];\n  }, []);\n\n  const progress = { startTime, endTime };\n\n  const successToastData = {\n    id: toastId,\n    icon: icons.faCheck,\n    expires: 30000,\n    hasCloseButton: true,\n    title: successMessage,\n    iconClassName: 'bg-success'\n  };\n\n  const pendingToastData = {\n    id: toastId,\n    expires: false,\n    icon: icons.faHourglass,\n    hasCloseButton: false,\n    title: processingMessage,\n    iconClassName: 'bg-warning'\n  };\n\n  const failToastData = {\n    id: toastId,\n    icon: icons.faTimes,\n    title: errorMessage,\n    hasCloseButton: true,\n    iconClassName: 'bg-danger'\n  };\n\n  const timedOutToastData = {\n    id: toastId,\n    icon: icons.faTimes,\n    title: timedOutMessage,\n    hasCloseButton: true,\n    iconClassName: 'bg-warning'\n  };\n\n  const isPending = getIsTransactionPending(status);\n  const isTimedOut = getIsTransactionTimedOut(status);\n\n  const toatsOptionsData = {\n    signed: pendingToastData,\n    sent: pendingToastData,\n    pending: pendingToastData,\n    success: successToastData,\n    completed: successToastData,\n    cancelled: failToastData,\n    fail: failToastData,\n    timedOut: timedOutToastData\n  };\n\n  const toastDataState = toatsOptionsData[status!];\n\n  const handleDeleteToast = () => {\n    setShouldRender(false);\n    onClose?.(toastId);\n  };\n\n  if (!shouldRender || transactions == null) {\n    return null;\n  }\n\n  return (\n    <ReactBootstrap.Toast\n      ref={ref}\n      className={generatedClasses.wrapper}\n      key={toastId}\n    >\n      <Progress\n        key={toastId}\n        id={toastId}\n        progress={progress}\n        expiresIn={lifetimeAfterSuccess}\n        done={!isPending || isTimedOut}\n      >\n        <div className={generatedClasses.toastContainer}>\n          <div className={generatedClasses.iconContainer}>\n            <IconState\n              iconSize='2x'\n              icon={toastDataState.icon}\n              className={toastDataState.iconClassName}\n            />\n            {withTxNonce &&\n              transactions.map((tx: any) => (\n                <p key={tx.nonce.valueOf()}>{tx.nonce.valueOf()}</p>\n              ))}\n          </div>\n          <div className={generatedClasses.details} style={{ minWidth: 0 }}>\n            <div className={generatedClasses.toastHeader}>\n              <h5 className={generatedClasses.title}>{toastDataState.title}</h5>\n              {!isPending && (\n                <button\n                  type='button'\n                  className={generatedClasses.closeButton}\n                  onClick={handleDeleteToast}\n                >\n                  <ReactFontawesome.FontAwesomeIcon\n                    icon={icons.faTimes}\n                    size='xs'\n                  />\n                </button>\n              )}\n            </div>\n            <div className={generatedClasses.toastFooter}>\n              <TxDetails\n                transactions={transactions}\n                title={title}\n                isTimedOut={isTimedOut}\n              />\n            </div>\n          </div>\n        </div>\n      </Progress>\n    </ReactBootstrap.Toast>\n  );\n};\n\nexport default withClassNameWrapper(TransactionToast);\n","import { Address } from '@elrondnetwork/erdjs/out';\nimport { getShardOfAddress } from 'utils';\n\ninterface IsCrossShardTransactionPropsType {\n  receiverAddress: string;\n  senderShard?: number;\n  senderAddress?: string;\n}\nexport function isCrossShardTransaction({\n  receiverAddress,\n  senderShard,\n  senderAddress\n}: IsCrossShardTransactionPropsType) {\n  try {\n    const receiver = new Address(receiverAddress);\n    const receiverShard = getShardOfAddress(receiver.pubkey());\n    if (senderShard == null && senderAddress != null) {\n      const sender = new Address(senderAddress);\n      return getShardOfAddress(sender) === receiverShard;\n    }\n    return receiverShard === senderShard;\n  } catch (err) {\n    return false;\n  }\n}\n","import React, { useEffect, useState } from 'react';\nimport { useGetSignedTransactions } from 'hooks';\nimport { useGetPendingTransactions } from 'services';\nimport {\n  getToastsIdsFromStorage,\n  setToastsIdsToStorage\n} from 'storage/session';\nimport { SignedTransactionsBodyType } from 'types';\nimport TransactionToast from 'UI/TransactionToast';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\n\nimport { TransactionsToastListPropsType } from './types';\n\nfunction TransactionsToastList({\n  shouldRenderDefaultCss = true,\n  withTxNonce = false,\n  className = 'transactions-toast-list',\n  pendingTransactions,\n  signedTransactions,\n  successfulToastLifetime\n}: TransactionsToastListPropsType) {\n  const [toastsIds, setToastsIds] = useState<any>([]);\n\n  const pendingTransactionsFromStore =\n    useGetPendingTransactions().pendingTransactions;\n\n  const signedTransactionsFromStore =\n    useGetSignedTransactions().signedTransactions;\n\n  const pendingTransactionsToRender =\n    pendingTransactions || pendingTransactionsFromStore;\n\n  const signedTransactionsToRender =\n    signedTransactions || signedTransactionsFromStore;\n\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      wrapper:\n        'toast-messages d-flex flex-column align-items-center justify-content-sm-end',\n      toast: ''\n    }\n  );\n\n  const mappedToastsList = toastsIds?.map((toastId: string) => {\n    const currentTx: SignedTransactionsBodyType =\n      signedTransactionsToRender[toastId];\n    if (\n      currentTx == null ||\n      currentTx?.transactions == null ||\n      currentTx?.status == null\n    ) {\n      return null;\n    }\n\n    const { transactions, status } = currentTx;\n    return (\n      <TransactionToast\n        className={className}\n        key={toastId}\n        transactions={transactions}\n        status={status}\n        toastId={toastId}\n        withTxNonce={withTxNonce}\n        lifetimeAfterSuccess={successfulToastLifetime}\n      />\n    );\n  });\n\n  const mapPendingSignedTransactions = () => {\n    const newToasts = [...toastsIds];\n\n    for (const sessionId in pendingTransactionsToRender) {\n      const hasToast = toastsIds.includes(sessionId);\n\n      if (!hasToast) {\n        newToasts.push(sessionId);\n      }\n    }\n\n    setToastsIds(newToasts);\n  };\n\n  const fetchSessionStorageToasts = () => {\n    const sessionStorageToastsIds = getToastsIdsFromStorage();\n\n    if (sessionStorageToastsIds) {\n      const newToasts = [...toastsIds, ...sessionStorageToastsIds];\n      setToastsIds(newToasts);\n    }\n  };\n\n  const saveSessionStorageToasts = () => {\n    const shouldSaveLocalToasts = Boolean(toastsIds.length);\n    if (!shouldSaveLocalToasts) {\n      return;\n    }\n\n    setToastsIdsToStorage(toastsIds);\n  };\n\n  useEffect(() => {\n    fetchSessionStorageToasts();\n    return () => {\n      saveSessionStorageToasts();\n    };\n  }, []);\n\n  useEffect(() => {\n    mapPendingSignedTransactions();\n  }, [pendingTransactionsToRender]);\n\n  return <div className={generatedClasses.wrapper}>{mappedToastsList}</div>;\n}\n\nexport default withClassNameWrapper(TransactionsToastList);\n","let platform: any = {};\ntry {\n  platform = require('platform');\n} catch (err) {}\n\nexport default platform;\n","let qrcode: any = {};\ntry {\n  qrcode = require('qrcode');\n} catch (err) {}\n\nexport default qrcode;\n","import React, { useEffect, useState } from 'react';\n\nimport platform from 'optionalPackages/platform';\nimport QRCode from 'optionalPackages/qrcode';\nimport { useWalletConnectLogin } from 'services';\nimport ModalContainer from 'UI/ModalContainer';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { ReactComponent as Lighting } from '../WalletConnectLoginButton/lightning.svg';\nimport { LoginModalPropsType } from './types';\n\nfunction WalletConnectLoginContainer({\n  callbackRoute,\n  loginButtonText,\n  title = 'Maiar Login',\n  logoutRoute = '/unlock',\n  className = 'wallect-connect-login-modal',\n  lead = 'Scan the QR code using Maiar',\n  shouldRenderDefaultCss = true,\n  wrapContentInsideModal = true,\n  redirectAfterLogin,\n  token,\n  onClose\n}: LoginModalPropsType) {\n  const [\n    initLoginWithWalletConnect,\n    { error },\n    { uriDeepLink, walletConnectUri }\n  ] = useWalletConnectLogin({\n    logoutRoute,\n    callbackRoute,\n    token,\n    redirectAfterLogin,\n    shouldLoginUser: true\n  });\n  const [qrCodeSvg, setQrCodeSvg] = useState<string>('');\n  const isMobileDevice =\n    platform?.os?.family === 'iOS' || platform?.os?.family === 'Android';\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      wrapper: 'btn btn-primary px-sm-4 m-1 mx-sm-3',\n      loginText: 'text-left',\n      container: 'm-auto login-container',\n      card: 'card my-3 text-center',\n      cardBody: 'card-body p-4 mx-lg-4',\n      qrCodeSvgContainer: 'mx-auto mb-3',\n      title: 'mb-3',\n      leadText: 'lead mb-0',\n      mobileLoginButton:\n        'btn btn-primary d-inline-flex align-items-center px-4 mt-4',\n      mobileLoginButtonIcon: 'mr-2',\n      errorMessage:\n        'text-danger d-flex justify-content-center align-items-center'\n    }\n  );\n\n  const generateQRCode = async () => {\n    if (!walletConnectUri) {\n      return;\n    }\n\n    const svg = await QRCode.toString(walletConnectUri, {\n      type: 'svg'\n    });\n\n    setQrCodeSvg(svg);\n  };\n\n  useEffect(() => {\n    generateQRCode();\n  }, [walletConnectUri]);\n\n  useEffect(() => {\n    initLoginWithWalletConnect();\n  }, []);\n\n  const content = (\n    <div className={generatedClasses.container}>\n      <div className={generatedClasses.root}>\n        <div className={generatedClasses.card}>\n          <div className={generatedClasses.cardBody}>\n            <div\n              className={generatedClasses.qrCodeSvgContainer}\n              dangerouslySetInnerHTML={{\n                __html: qrCodeSvg\n              }}\n              style={{\n                width: '15rem',\n                height: '15rem'\n              }}\n            />\n            <h4 className={generatedClasses.title}>{title}</h4>\n            {isMobileDevice ? (\n              <React.Fragment>\n                <p className={generatedClasses.leadText}>{loginButtonText}</p>\n                <a\n                  id='accessWalletBtn'\n                  data-testid='accessWalletBtn'\n                  className={generatedClasses.mobileLoginButton}\n                  href={uriDeepLink || undefined}\n                  rel='noopener noreferrer nofollow'\n                  target='_blank'\n                >\n                  <Lighting\n                    className={generatedClasses.mobileLoginButtonIcon}\n                    style={{\n                      width: '0.9rem',\n                      height: '0.9rem'\n                    }}\n                  />\n                  {title}\n                </a>\n              </React.Fragment>\n            ) : (\n              <p className={generatedClasses.leadText}>{lead}</p>\n            )}\n            <div>\n              {error && (\n                <p className={generatedClasses.errorMessage}>{error}</p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  return wrapContentInsideModal ? (\n    <ModalContainer\n      title={'Login with Maiar'}\n      className={className}\n      onClose={onClose}\n    >\n      {content}\n    </ModalContainer>\n  ) : (\n    content\n  );\n}\n\nexport default withClassNameWrapper(WalletConnectLoginContainer);\n","import React, { Fragment, useState } from 'react';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport WalletConnectLoginContainer from '../WalletConnectLoginContainer';\nimport { WalletConnectLoginButtonPropsType } from './types';\n\nconst WalletConnectLoginButton = ({\n  children,\n  callbackRoute,\n  onModalOpens,\n  onModalCloses,\n  loginButtonText = 'Maiar App',\n  title = 'Maiar Login',\n  logoutRoute = '/unlock',\n  shouldRenderDefaultCss = true,\n  wrapContentInsideModal = true,\n  redirectAfterLogin = false,\n  buttonClassName,\n  className = 'wallect-connect-login',\n  lead = 'Scan the QR code using Maiar',\n  token,\n  hideButtonWhenModalOpens = false\n}: WalletConnectLoginButtonPropsType) => {\n  const [showLoginModal, setShowLoginModal] = useState(false);\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      wrapper: `btn btn-primary px-sm-4 m-1 mx-sm-3 ${\n        buttonClassName != null ? buttonClassName : ''\n      }`,\n      loginText: 'text-left'\n    }\n  );\n\n  const handleOpenModal = () => {\n    setShowLoginModal(true);\n    onModalOpens?.();\n  };\n\n  const handleCloseModal = () => {\n    setShowLoginModal(false);\n    onModalCloses?.();\n  };\n\n  const shouldRenderButton = !hideButtonWhenModalOpens || !showLoginModal;\n  return (\n    <Fragment>\n      {shouldRenderButton && (\n        <button onClick={handleOpenModal} className={generatedClasses.wrapper}>\n          {children || (\n            <span className={generatedClasses.loginText}>\n              {loginButtonText}\n            </span>\n          )}\n        </button>\n      )}\n      {showLoginModal && (\n        <WalletConnectLoginContainer\n          callbackRoute={callbackRoute}\n          loginButtonText={loginButtonText}\n          title={title}\n          token={token}\n          className={className}\n          logoutRoute={logoutRoute}\n          lead={lead}\n          wrapContentInsideModal={wrapContentInsideModal}\n          redirectAfterLogin={redirectAfterLogin}\n          onClose={handleCloseModal}\n        />\n      )}\n    </Fragment>\n  );\n};\n\nexport default withClassNameWrapper(WalletConnectLoginButton);\n","import React from 'react';\nimport { useWebWalletLogin } from 'services';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { WebWalletLoginButtonPropsType } from './types';\n\nconst WebWalletLoginButton: (\n  props: WebWalletLoginButtonPropsType\n) => JSX.Element = ({\n  children,\n  token,\n  className = 'web-wallet-login',\n  callbackRoute,\n  buttonClassName,\n  loginButtonText = 'Elrond Web Wallet',\n  shouldRenderDefaultCss = true\n}) => {\n  const [onInitiateLogin] = useWebWalletLogin({\n    callbackRoute,\n    token\n  });\n  const classes = getGeneratedClasses(className, shouldRenderDefaultCss, {\n    wrapper: `btn btn-primary px-sm-4 m-1 mx-sm-3 ${\n      buttonClassName != null ? buttonClassName : ''\n    }`,\n    loginText: 'text-left'\n  });\n\n  const handleLogin = () => {\n    onInitiateLogin();\n  };\n\n  return (\n    <button onClick={handleLogin} className={classes.wrapper}>\n      {children || <span className={classes.loginText}>{loginButtonText}</span>}\n    </button>\n  );\n};\n\nexport default withClassNameWrapper(WebWalletLoginButton);\n","import * as React from 'react';\nimport { getUsdValue } from 'utils/operations';\n\nconst UsdValue = (props: {\n  amount: string;\n  usd: number;\n  'data-testid'?: string;\n}) => {\n  const { amount, usd, ...dataTestId } = props;\n  const value = `≈ $${getUsdValue({ amount, usd })}`;\n  return (\n    <small className='form-text text-secondary mt-0' {...dataTestId}>\n      {`${amount}` === '0' ? '= $0' : value}\n    </small>\n  );\n};\n\nexport default UsdValue;\n","import React from 'react';\nimport { useGetLoginInfo } from 'hooks';\nimport ExtensionLoginButton from 'UI/extension/LoginButton';\n\nimport LedgerLoginButton from 'UI/ledger/LoginButton';\nimport WalletConnectLoginButton from 'UI/walletConnect/WalletConnectLoginButton';\nimport WebWalletLoginButton from 'UI/webWallet/LoginButton';\nimport { getGeneratedClasses, wrapperClassName } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { Props } from './types';\n\nconst UnlockPage = ({\n  loginRoute,\n  title = 'Login',\n  className = 'unlock-page',\n  shouldRenderDefaultCss = true,\n  LedgerLoginButtonText = 'Ledger',\n  description = 'Pick a login method',\n  WalletConnectLoginButtonText = 'Maiar',\n  ExtensionLoginButtonText = 'Extension',\n  WebWalletLoginButtonText = 'Web wallet'\n}: Props) => {\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      wrapper: `home d-flex flex-fill align-items-center ${wrapperClassName}`,\n      title: 'mb-4',\n      description: 'mb-4',\n      cardContainer: 'm-auto',\n      card: 'card my-4 text-center',\n      cardBody: 'card-body py-4 px-2 px-sm-2 mx-lg-4'\n    }\n  );\n  const { isLoggedIn } = useGetLoginInfo();\n\n  React.useEffect(() => {\n    if (isLoggedIn) {\n      window.location.href = loginRoute;\n    }\n  }, [isLoggedIn]);\n\n  return (\n    <div className={generatedClasses.wrapper}>\n      <div className={generatedClasses.cardContainer}>\n        <div className={generatedClasses.card}>\n          <div className={generatedClasses.cardBody}>\n            <h4 className={generatedClasses.title}>{title}</h4>\n            <p className={generatedClasses.description}>{description}</p>\n            <ExtensionLoginButton\n              callbackRoute={loginRoute}\n              loginButtonText={ExtensionLoginButtonText}\n            />\n            <WebWalletLoginButton\n              callbackRoute={loginRoute}\n              loginButtonText={WebWalletLoginButtonText}\n            />\n            <LedgerLoginButton\n              loginButtonText={LedgerLoginButtonText}\n              callbackRoute={loginRoute}\n            />\n            <WalletConnectLoginButton\n              callbackRoute={loginRoute}\n              loginButtonText={WalletConnectLoginButtonText}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withClassNameWrapper(UnlockPage);\n","import { ApiProvider } from '@elrondnetwork/erdjs';\nimport { networkSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\nimport { NetworkType } from 'types';\n\nlet apiProvider: ApiProvider | null = null;\n\nexport function initializeApiProvider(networkConfig?: NetworkType) {\n  const initializationNetworkConfig =\n    networkConfig || networkSelector(store.getState());\n  apiProvider = new ApiProvider(initializationNetworkConfig.apiAddress, {\n    timeout: Number(initializationNetworkConfig.apiTimeout)\n  });\n\n  return apiProvider;\n}\n\nexport function getApiProvider(): ApiProvider {\n  if (apiProvider == null) {\n    return initializeApiProvider();\n  } else {\n    return apiProvider;\n  }\n}\n","const mnemonicWords = [\n  'abandon',\n  'ability',\n  'able',\n  'about',\n  'above',\n  'absent',\n  'absorb',\n  'abstract',\n  'absurd',\n  'abuse',\n  'access',\n  'accident',\n  'account',\n  'accuse',\n  'achieve',\n  'acid',\n  'acoustic',\n  'acquire',\n  'across',\n  'act',\n  'action',\n  'actor',\n  'actress',\n  'actual',\n  'adapt',\n  'add',\n  'addict',\n  'address',\n  'adjust',\n  'admit',\n  'adult',\n  'advance',\n  'advice',\n  'aerobic',\n  'affair',\n  'afford',\n  'afraid',\n  'again',\n  'age',\n  'agent',\n  'agree',\n  'ahead',\n  'aim',\n  'air',\n  'airport',\n  'aisle',\n  'alarm',\n  'album',\n  'alcohol',\n  'alert',\n  'alien',\n  'all',\n  'alley',\n  'allow',\n  'almost',\n  'alone',\n  'alpha',\n  'already',\n  'also',\n  'alter',\n  'always',\n  'amateur',\n  'amazing',\n  'among',\n  'amount',\n  'amused',\n  'analyst',\n  'anchor',\n  'ancient',\n  'anger',\n  'angle',\n  'angry',\n  'animal',\n  'ankle',\n  'announce',\n  'annual',\n  'another',\n  'answer',\n  'antenna',\n  'antique',\n  'anxiety',\n  'any',\n  'apart',\n  'apology',\n  'appear',\n  'apple',\n  'approve',\n  'april',\n  'arch',\n  'arctic',\n  'area',\n  'arena',\n  'argue',\n  'arm',\n  'armed',\n  'armor',\n  'army',\n  'around',\n  'arrange',\n  'arrest',\n  'arrive',\n  'arrow',\n  'art',\n  'artefact',\n  'artist',\n  'artwork',\n  'ask',\n  'aspect',\n  'assault',\n  'asset',\n  'assist',\n  'assume',\n  'asthma',\n  'athlete',\n  'atom',\n  'attack',\n  'attend',\n  'attitude',\n  'attract',\n  'auction',\n  'audit',\n  'august',\n  'aunt',\n  'author',\n  'auto',\n  'autumn',\n  'average',\n  'avocado',\n  'avoid',\n  'awake',\n  'aware',\n  'away',\n  'awesome',\n  'awful',\n  'awkward',\n  'axis',\n  'baby',\n  'bachelor',\n  'bacon',\n  'badge',\n  'bag',\n  'balance',\n  'balcony',\n  'ball',\n  'bamboo',\n  'banana',\n  'banner',\n  'bar',\n  'barely',\n  'bargain',\n  'barrel',\n  'base',\n  'basic',\n  'basket',\n  'battle',\n  'beach',\n  'bean',\n  'beauty',\n  'because',\n  'become',\n  'beef',\n  'before',\n  'begin',\n  'behave',\n  'behind',\n  'believe',\n  'below',\n  'belt',\n  'bench',\n  'benefit',\n  'best',\n  'betray',\n  'better',\n  'between',\n  'beyond',\n  'bicycle',\n  'bid',\n  'bike',\n  'bind',\n  'biology',\n  'bird',\n  'birth',\n  'bitter',\n  'black',\n  'blade',\n  'blame',\n  'blanket',\n  'blast',\n  'bleak',\n  'bless',\n  'blind',\n  'blood',\n  'blossom',\n  'blouse',\n  'blue',\n  'blur',\n  'blush',\n  'board',\n  'boat',\n  'body',\n  'boil',\n  'bomb',\n  'bone',\n  'bonus',\n  'book',\n  'boost',\n  'border',\n  'boring',\n  'borrow',\n  'boss',\n  'bottom',\n  'bounce',\n  'box',\n  'boy',\n  'bracket',\n  'brain',\n  'brand',\n  'brass',\n  'brave',\n  'bread',\n  'breeze',\n  'brick',\n  'bridge',\n  'brief',\n  'bright',\n  'bring',\n  'brisk',\n  'broccoli',\n  'broken',\n  'bronze',\n  'broom',\n  'brother',\n  'brown',\n  'brush',\n  'bubble',\n  'buddy',\n  'budget',\n  'buffalo',\n  'build',\n  'bulb',\n  'bulk',\n  'bullet',\n  'bundle',\n  'bunker',\n  'burden',\n  'burger',\n  'burst',\n  'bus',\n  'business',\n  'busy',\n  'butter',\n  'buyer',\n  'buzz',\n  'cabbage',\n  'cabin',\n  'cable',\n  'cactus',\n  'cage',\n  'cake',\n  'call',\n  'calm',\n  'camera',\n  'camp',\n  'can',\n  'canal',\n  'cancel',\n  'candy',\n  'cannon',\n  'canoe',\n  'canvas',\n  'canyon',\n  'capable',\n  'capital',\n  'captain',\n  'car',\n  'carbon',\n  'card',\n  'cargo',\n  'carpet',\n  'carry',\n  'cart',\n  'case',\n  'cash',\n  'casino',\n  'castle',\n  'casual',\n  'cat',\n  'catalog',\n  'catch',\n  'category',\n  'cattle',\n  'caught',\n  'cause',\n  'caution',\n  'cave',\n  'ceiling',\n  'celery',\n  'cement',\n  'census',\n  'century',\n  'cereal',\n  'certain',\n  'chair',\n  'chalk',\n  'champion',\n  'change',\n  'chaos',\n  'chapter',\n  'charge',\n  'chase',\n  'chat',\n  'cheap',\n  'check',\n  'cheese',\n  'chef',\n  'cherry',\n  'chest',\n  'chicken',\n  'chief',\n  'child',\n  'chimney',\n  'choice',\n  'choose',\n  'chronic',\n  'chuckle',\n  'chunk',\n  'churn',\n  'cigar',\n  'cinnamon',\n  'circle',\n  'citizen',\n  'city',\n  'civil',\n  'claim',\n  'clap',\n  'clarify',\n  'claw',\n  'clay',\n  'clean',\n  'clerk',\n  'clever',\n  'click',\n  'client',\n  'cliff',\n  'climb',\n  'clinic',\n  'clip',\n  'clock',\n  'clog',\n  'close',\n  'cloth',\n  'cloud',\n  'clown',\n  'club',\n  'clump',\n  'cluster',\n  'clutch',\n  'coach',\n  'coast',\n  'coconut',\n  'code',\n  'coffee',\n  'coil',\n  'coin',\n  'collect',\n  'color',\n  'column',\n  'combine',\n  'come',\n  'comfort',\n  'comic',\n  'common',\n  'company',\n  'concert',\n  'conduct',\n  'confirm',\n  'congress',\n  'connect',\n  'consider',\n  'control',\n  'convince',\n  'cook',\n  'cool',\n  'copper',\n  'copy',\n  'coral',\n  'core',\n  'corn',\n  'correct',\n  'cost',\n  'cotton',\n  'couch',\n  'country',\n  'couple',\n  'course',\n  'cousin',\n  'cover',\n  'coyote',\n  'crack',\n  'cradle',\n  'craft',\n  'cram',\n  'crane',\n  'crash',\n  'crater',\n  'crawl',\n  'crazy',\n  'cream',\n  'credit',\n  'creek',\n  'crew',\n  'cricket',\n  'crime',\n  'crisp',\n  'critic',\n  'crop',\n  'cross',\n  'crouch',\n  'crowd',\n  'crucial',\n  'cruel',\n  'cruise',\n  'crumble',\n  'crunch',\n  'crush',\n  'cry',\n  'crystal',\n  'cube',\n  'culture',\n  'cup',\n  'cupboard',\n  'curious',\n  'current',\n  'curtain',\n  'curve',\n  'cushion',\n  'custom',\n  'cute',\n  'cycle',\n  'dad',\n  'damage',\n  'damp',\n  'dance',\n  'danger',\n  'daring',\n  'dash',\n  'daughter',\n  'dawn',\n  'day',\n  'deal',\n  'debate',\n  'debris',\n  'decade',\n  'december',\n  'decide',\n  'decline',\n  'decorate',\n  'decrease',\n  'deer',\n  'defense',\n  'define',\n  'defy',\n  'degree',\n  'delay',\n  'deliver',\n  'demand',\n  'demise',\n  'denial',\n  'dentist',\n  'deny',\n  'depart',\n  'depend',\n  'deposit',\n  'depth',\n  'deputy',\n  'derive',\n  'describe',\n  'desert',\n  'design',\n  'desk',\n  'despair',\n  'destroy',\n  'detail',\n  'detect',\n  'develop',\n  'device',\n  'devote',\n  'diagram',\n  'dial',\n  'diamond',\n  'diary',\n  'dice',\n  'diesel',\n  'diet',\n  'differ',\n  'digital',\n  'dignity',\n  'dilemma',\n  'dinner',\n  'dinosaur',\n  'direct',\n  'dirt',\n  'disagree',\n  'discover',\n  'disease',\n  'dish',\n  'dismiss',\n  'disorder',\n  'display',\n  'distance',\n  'divert',\n  'divide',\n  'divorce',\n  'dizzy',\n  'doctor',\n  'document',\n  'dog',\n  'doll',\n  'dolphin',\n  'domain',\n  'donate',\n  'donkey',\n  'donor',\n  'door',\n  'dose',\n  'double',\n  'dove',\n  'draft',\n  'dragon',\n  'drama',\n  'drastic',\n  'draw',\n  'dream',\n  'dress',\n  'drift',\n  'drill',\n  'drink',\n  'drip',\n  'drive',\n  'drop',\n  'drum',\n  'dry',\n  'duck',\n  'dumb',\n  'dune',\n  'during',\n  'dust',\n  'dutch',\n  'duty',\n  'dwarf',\n  'dynamic',\n  'eager',\n  'eagle',\n  'early',\n  'earn',\n  'earth',\n  'easily',\n  'east',\n  'easy',\n  'echo',\n  'ecology',\n  'economy',\n  'edge',\n  'edit',\n  'educate',\n  'effort',\n  'egg',\n  'eight',\n  'either',\n  'elbow',\n  'elder',\n  'electric',\n  'elegant',\n  'element',\n  'elephant',\n  'elevator',\n  'elite',\n  'else',\n  'embark',\n  'embody',\n  'embrace',\n  'emerge',\n  'emotion',\n  'employ',\n  'empower',\n  'empty',\n  'enable',\n  'enact',\n  'end',\n  'endless',\n  'endorse',\n  'enemy',\n  'energy',\n  'enforce',\n  'engage',\n  'engine',\n  'enhance',\n  'enjoy',\n  'enlist',\n  'enough',\n  'enrich',\n  'enroll',\n  'ensure',\n  'enter',\n  'entire',\n  'entry',\n  'envelope',\n  'episode',\n  'equal',\n  'equip',\n  'era',\n  'erase',\n  'erode',\n  'erosion',\n  'error',\n  'erupt',\n  'escape',\n  'essay',\n  'essence',\n  'estate',\n  'eternal',\n  'ethics',\n  'evidence',\n  'evil',\n  'evoke',\n  'evolve',\n  'exact',\n  'example',\n  'excess',\n  'exchange',\n  'excite',\n  'exclude',\n  'excuse',\n  'execute',\n  'exercise',\n  'exhaust',\n  'exhibit',\n  'exile',\n  'exist',\n  'exit',\n  'exotic',\n  'expand',\n  'expect',\n  'expire',\n  'explain',\n  'expose',\n  'express',\n  'extend',\n  'extra',\n  'eye',\n  'eyebrow',\n  'fabric',\n  'face',\n  'faculty',\n  'fade',\n  'faint',\n  'faith',\n  'fall',\n  'false',\n  'fame',\n  'family',\n  'famous',\n  'fan',\n  'fancy',\n  'fantasy',\n  'farm',\n  'fashion',\n  'fat',\n  'fatal',\n  'father',\n  'fatigue',\n  'fault',\n  'favorite',\n  'feature',\n  'february',\n  'federal',\n  'fee',\n  'feed',\n  'feel',\n  'female',\n  'fence',\n  'festival',\n  'fetch',\n  'fever',\n  'few',\n  'fiber',\n  'fiction',\n  'field',\n  'figure',\n  'file',\n  'film',\n  'filter',\n  'final',\n  'find',\n  'fine',\n  'finger',\n  'finish',\n  'fire',\n  'firm',\n  'first',\n  'fiscal',\n  'fish',\n  'fit',\n  'fitness',\n  'fix',\n  'flag',\n  'flame',\n  'flash',\n  'flat',\n  'flavor',\n  'flee',\n  'flight',\n  'flip',\n  'float',\n  'flock',\n  'floor',\n  'flower',\n  'fluid',\n  'flush',\n  'fly',\n  'foam',\n  'focus',\n  'fog',\n  'foil',\n  'fold',\n  'follow',\n  'food',\n  'foot',\n  'force',\n  'forest',\n  'forget',\n  'fork',\n  'fortune',\n  'forum',\n  'forward',\n  'fossil',\n  'foster',\n  'found',\n  'fox',\n  'fragile',\n  'frame',\n  'frequent',\n  'fresh',\n  'friend',\n  'fringe',\n  'frog',\n  'front',\n  'frost',\n  'frown',\n  'frozen',\n  'fruit',\n  'fuel',\n  'fun',\n  'funny',\n  'furnace',\n  'fury',\n  'future',\n  'gadget',\n  'gain',\n  'galaxy',\n  'gallery',\n  'game',\n  'gap',\n  'garage',\n  'garbage',\n  'garden',\n  'garlic',\n  'garment',\n  'gas',\n  'gasp',\n  'gate',\n  'gather',\n  'gauge',\n  'gaze',\n  'general',\n  'genius',\n  'genre',\n  'gentle',\n  'genuine',\n  'gesture',\n  'ghost',\n  'giant',\n  'gift',\n  'giggle',\n  'ginger',\n  'giraffe',\n  'girl',\n  'give',\n  'glad',\n  'glance',\n  'glare',\n  'glass',\n  'glide',\n  'glimpse',\n  'globe',\n  'gloom',\n  'glory',\n  'glove',\n  'glow',\n  'glue',\n  'goat',\n  'goddess',\n  'gold',\n  'good',\n  'goose',\n  'gorilla',\n  'gospel',\n  'gossip',\n  'govern',\n  'gown',\n  'grab',\n  'grace',\n  'grain',\n  'grant',\n  'grape',\n  'grass',\n  'gravity',\n  'great',\n  'green',\n  'grid',\n  'grief',\n  'grit',\n  'grocery',\n  'group',\n  'grow',\n  'grunt',\n  'guard',\n  'guess',\n  'guide',\n  'guilt',\n  'guitar',\n  'gun',\n  'gym',\n  'habit',\n  'hair',\n  'half',\n  'hammer',\n  'hamster',\n  'hand',\n  'happy',\n  'harbor',\n  'hard',\n  'harsh',\n  'harvest',\n  'hat',\n  'have',\n  'hawk',\n  'hazard',\n  'head',\n  'health',\n  'heart',\n  'heavy',\n  'hedgehog',\n  'height',\n  'hello',\n  'helmet',\n  'help',\n  'hen',\n  'hero',\n  'hidden',\n  'high',\n  'hill',\n  'hint',\n  'hip',\n  'hire',\n  'history',\n  'hobby',\n  'hockey',\n  'hold',\n  'hole',\n  'holiday',\n  'hollow',\n  'home',\n  'honey',\n  'hood',\n  'hope',\n  'horn',\n  'horror',\n  'horse',\n  'hospital',\n  'host',\n  'hotel',\n  'hour',\n  'hover',\n  'hub',\n  'huge',\n  'human',\n  'humble',\n  'humor',\n  'hundred',\n  'hungry',\n  'hunt',\n  'hurdle',\n  'hurry',\n  'hurt',\n  'husband',\n  'hybrid',\n  'ice',\n  'icon',\n  'idea',\n  'identify',\n  'idle',\n  'ignore',\n  'ill',\n  'illegal',\n  'illness',\n  'image',\n  'imitate',\n  'immense',\n  'immune',\n  'impact',\n  'impose',\n  'improve',\n  'impulse',\n  'inch',\n  'include',\n  'income',\n  'increase',\n  'index',\n  'indicate',\n  'indoor',\n  'industry',\n  'infant',\n  'inflict',\n  'inform',\n  'inhale',\n  'inherit',\n  'initial',\n  'inject',\n  'injury',\n  'inmate',\n  'inner',\n  'innocent',\n  'input',\n  'inquiry',\n  'insane',\n  'insect',\n  'inside',\n  'inspire',\n  'install',\n  'intact',\n  'interest',\n  'into',\n  'invest',\n  'invite',\n  'involve',\n  'iron',\n  'island',\n  'isolate',\n  'issue',\n  'item',\n  'ivory',\n  'jacket',\n  'jaguar',\n  'jar',\n  'jazz',\n  'jealous',\n  'jeans',\n  'jelly',\n  'jewel',\n  'job',\n  'join',\n  'joke',\n  'journey',\n  'joy',\n  'judge',\n  'juice',\n  'jump',\n  'jungle',\n  'junior',\n  'junk',\n  'just',\n  'kangaroo',\n  'keen',\n  'keep',\n  'ketchup',\n  'key',\n  'kick',\n  'kid',\n  'kidney',\n  'kind',\n  'kingdom',\n  'kiss',\n  'kit',\n  'kitchen',\n  'kite',\n  'kitten',\n  'kiwi',\n  'knee',\n  'knife',\n  'knock',\n  'know',\n  'lab',\n  'label',\n  'labor',\n  'ladder',\n  'lady',\n  'lake',\n  'lamp',\n  'language',\n  'laptop',\n  'large',\n  'later',\n  'latin',\n  'laugh',\n  'laundry',\n  'lava',\n  'law',\n  'lawn',\n  'lawsuit',\n  'layer',\n  'lazy',\n  'leader',\n  'leaf',\n  'learn',\n  'leave',\n  'lecture',\n  'left',\n  'leg',\n  'legal',\n  'legend',\n  'leisure',\n  'lemon',\n  'lend',\n  'length',\n  'lens',\n  'leopard',\n  'lesson',\n  'letter',\n  'level',\n  'liar',\n  'liberty',\n  'library',\n  'license',\n  'life',\n  'lift',\n  'light',\n  'like',\n  'limb',\n  'limit',\n  'link',\n  'lion',\n  'liquid',\n  'list',\n  'little',\n  'live',\n  'lizard',\n  'load',\n  'loan',\n  'lobster',\n  'local',\n  'lock',\n  'logic',\n  'lonely',\n  'long',\n  'loop',\n  'lottery',\n  'loud',\n  'lounge',\n  'love',\n  'loyal',\n  'lucky',\n  'luggage',\n  'lumber',\n  'lunar',\n  'lunch',\n  'luxury',\n  'lyrics',\n  'machine',\n  'mad',\n  'magic',\n  'magnet',\n  'maid',\n  'mail',\n  'main',\n  'major',\n  'make',\n  'mammal',\n  'man',\n  'manage',\n  'mandate',\n  'mango',\n  'mansion',\n  'manual',\n  'maple',\n  'marble',\n  'march',\n  'margin',\n  'marine',\n  'market',\n  'marriage',\n  'mask',\n  'mass',\n  'master',\n  'match',\n  'material',\n  'math',\n  'matrix',\n  'matter',\n  'maximum',\n  'maze',\n  'meadow',\n  'mean',\n  'measure',\n  'meat',\n  'mechanic',\n  'medal',\n  'media',\n  'melody',\n  'melt',\n  'member',\n  'memory',\n  'mention',\n  'menu',\n  'mercy',\n  'merge',\n  'merit',\n  'merry',\n  'mesh',\n  'message',\n  'metal',\n  'method',\n  'middle',\n  'midnight',\n  'milk',\n  'million',\n  'mimic',\n  'mind',\n  'minimum',\n  'minor',\n  'minute',\n  'miracle',\n  'mirror',\n  'misery',\n  'miss',\n  'mistake',\n  'mix',\n  'mixed',\n  'mixture',\n  'mobile',\n  'model',\n  'modify',\n  'mom',\n  'moment',\n  'monitor',\n  'monkey',\n  'monster',\n  'month',\n  'moon',\n  'moral',\n  'more',\n  'morning',\n  'mosquito',\n  'mother',\n  'motion',\n  'motor',\n  'mountain',\n  'mouse',\n  'move',\n  'movie',\n  'much',\n  'muffin',\n  'mule',\n  'multiply',\n  'muscle',\n  'museum',\n  'mushroom',\n  'music',\n  'must',\n  'mutual',\n  'myself',\n  'mystery',\n  'myth',\n  'naive',\n  'name',\n  'napkin',\n  'narrow',\n  'nasty',\n  'nation',\n  'nature',\n  'near',\n  'neck',\n  'need',\n  'negative',\n  'neglect',\n  'neither',\n  'nephew',\n  'nerve',\n  'nest',\n  'net',\n  'network',\n  'neutral',\n  'never',\n  'news',\n  'next',\n  'nice',\n  'night',\n  'noble',\n  'noise',\n  'nominee',\n  'noodle',\n  'normal',\n  'north',\n  'nose',\n  'notable',\n  'note',\n  'nothing',\n  'notice',\n  'novel',\n  'now',\n  'nuclear',\n  'number',\n  'nurse',\n  'nut',\n  'oak',\n  'obey',\n  'object',\n  'oblige',\n  'obscure',\n  'observe',\n  'obtain',\n  'obvious',\n  'occur',\n  'ocean',\n  'october',\n  'odor',\n  'off',\n  'offer',\n  'office',\n  'often',\n  'oil',\n  'okay',\n  'old',\n  'olive',\n  'olympic',\n  'omit',\n  'once',\n  'one',\n  'onion',\n  'online',\n  'only',\n  'open',\n  'opera',\n  'opinion',\n  'oppose',\n  'option',\n  'orange',\n  'orbit',\n  'orchard',\n  'order',\n  'ordinary',\n  'organ',\n  'orient',\n  'original',\n  'orphan',\n  'ostrich',\n  'other',\n  'outdoor',\n  'outer',\n  'output',\n  'outside',\n  'oval',\n  'oven',\n  'over',\n  'own',\n  'owner',\n  'oxygen',\n  'oyster',\n  'ozone',\n  'pact',\n  'paddle',\n  'page',\n  'pair',\n  'palace',\n  'palm',\n  'panda',\n  'panel',\n  'panic',\n  'panther',\n  'paper',\n  'parade',\n  'parent',\n  'park',\n  'parrot',\n  'party',\n  'pass',\n  'patch',\n  'path',\n  'patient',\n  'patrol',\n  'pattern',\n  'pause',\n  'pave',\n  'payment',\n  'peace',\n  'peanut',\n  'pear',\n  'peasant',\n  'pelican',\n  'pen',\n  'penalty',\n  'pencil',\n  'people',\n  'pepper',\n  'perfect',\n  'permit',\n  'person',\n  'pet',\n  'phone',\n  'photo',\n  'phrase',\n  'physical',\n  'piano',\n  'picnic',\n  'picture',\n  'piece',\n  'pig',\n  'pigeon',\n  'pill',\n  'pilot',\n  'pink',\n  'pioneer',\n  'pipe',\n  'pistol',\n  'pitch',\n  'pizza',\n  'place',\n  'planet',\n  'plastic',\n  'plate',\n  'play',\n  'please',\n  'pledge',\n  'pluck',\n  'plug',\n  'plunge',\n  'poem',\n  'poet',\n  'point',\n  'polar',\n  'pole',\n  'police',\n  'pond',\n  'pony',\n  'pool',\n  'popular',\n  'portion',\n  'position',\n  'possible',\n  'post',\n  'potato',\n  'pottery',\n  'poverty',\n  'powder',\n  'power',\n  'practice',\n  'praise',\n  'predict',\n  'prefer',\n  'prepare',\n  'present',\n  'pretty',\n  'prevent',\n  'price',\n  'pride',\n  'primary',\n  'print',\n  'priority',\n  'prison',\n  'private',\n  'prize',\n  'problem',\n  'process',\n  'produce',\n  'profit',\n  'program',\n  'project',\n  'promote',\n  'proof',\n  'property',\n  'prosper',\n  'protect',\n  'proud',\n  'provide',\n  'public',\n  'pudding',\n  'pull',\n  'pulp',\n  'pulse',\n  'pumpkin',\n  'punch',\n  'pupil',\n  'puppy',\n  'purchase',\n  'purity',\n  'purpose',\n  'purse',\n  'push',\n  'put',\n  'puzzle',\n  'pyramid',\n  'quality',\n  'quantum',\n  'quarter',\n  'question',\n  'quick',\n  'quit',\n  'quiz',\n  'quote',\n  'rabbit',\n  'raccoon',\n  'race',\n  'rack',\n  'radar',\n  'radio',\n  'rail',\n  'rain',\n  'raise',\n  'rally',\n  'ramp',\n  'ranch',\n  'random',\n  'range',\n  'rapid',\n  'rare',\n  'rate',\n  'rather',\n  'raven',\n  'raw',\n  'razor',\n  'ready',\n  'real',\n  'reason',\n  'rebel',\n  'rebuild',\n  'recall',\n  'receive',\n  'recipe',\n  'record',\n  'recycle',\n  'reduce',\n  'reflect',\n  'reform',\n  'refuse',\n  'region',\n  'regret',\n  'regular',\n  'reject',\n  'relax',\n  'release',\n  'relief',\n  'rely',\n  'remain',\n  'remember',\n  'remind',\n  'remove',\n  'render',\n  'renew',\n  'rent',\n  'reopen',\n  'repair',\n  'repeat',\n  'replace',\n  'report',\n  'require',\n  'rescue',\n  'resemble',\n  'resist',\n  'resource',\n  'response',\n  'result',\n  'retire',\n  'retreat',\n  'return',\n  'reunion',\n  'reveal',\n  'review',\n  'reward',\n  'rhythm',\n  'rib',\n  'ribbon',\n  'rice',\n  'rich',\n  'ride',\n  'ridge',\n  'rifle',\n  'right',\n  'rigid',\n  'ring',\n  'riot',\n  'ripple',\n  'risk',\n  'ritual',\n  'rival',\n  'river',\n  'road',\n  'roast',\n  'robot',\n  'robust',\n  'rocket',\n  'romance',\n  'roof',\n  'rookie',\n  'room',\n  'rose',\n  'rotate',\n  'rough',\n  'round',\n  'route',\n  'royal',\n  'rubber',\n  'rude',\n  'rug',\n  'rule',\n  'run',\n  'runway',\n  'rural',\n  'sad',\n  'saddle',\n  'sadness',\n  'safe',\n  'sail',\n  'salad',\n  'salmon',\n  'salon',\n  'salt',\n  'salute',\n  'same',\n  'sample',\n  'sand',\n  'satisfy',\n  'satoshi',\n  'sauce',\n  'sausage',\n  'save',\n  'say',\n  'scale',\n  'scan',\n  'scare',\n  'scatter',\n  'scene',\n  'scheme',\n  'school',\n  'science',\n  'scissors',\n  'scorpion',\n  'scout',\n  'scrap',\n  'screen',\n  'script',\n  'scrub',\n  'sea',\n  'search',\n  'season',\n  'seat',\n  'second',\n  'secret',\n  'section',\n  'security',\n  'seed',\n  'seek',\n  'segment',\n  'select',\n  'sell',\n  'seminar',\n  'senior',\n  'sense',\n  'sentence',\n  'series',\n  'service',\n  'session',\n  'settle',\n  'setup',\n  'seven',\n  'shadow',\n  'shaft',\n  'shallow',\n  'share',\n  'shed',\n  'shell',\n  'sheriff',\n  'shield',\n  'shift',\n  'shine',\n  'ship',\n  'shiver',\n  'shock',\n  'shoe',\n  'shoot',\n  'shop',\n  'short',\n  'shoulder',\n  'shove',\n  'shrimp',\n  'shrug',\n  'shuffle',\n  'shy',\n  'sibling',\n  'sick',\n  'side',\n  'siege',\n  'sight',\n  'sign',\n  'silent',\n  'silk',\n  'silly',\n  'silver',\n  'similar',\n  'simple',\n  'since',\n  'sing',\n  'siren',\n  'sister',\n  'situate',\n  'six',\n  'size',\n  'skate',\n  'sketch',\n  'ski',\n  'skill',\n  'skin',\n  'skirt',\n  'skull',\n  'slab',\n  'slam',\n  'sleep',\n  'slender',\n  'slice',\n  'slide',\n  'slight',\n  'slim',\n  'slogan',\n  'slot',\n  'slow',\n  'slush',\n  'small',\n  'smart',\n  'smile',\n  'smoke',\n  'smooth',\n  'snack',\n  'snake',\n  'snap',\n  'sniff',\n  'snow',\n  'soap',\n  'soccer',\n  'social',\n  'sock',\n  'soda',\n  'soft',\n  'solar',\n  'soldier',\n  'solid',\n  'solution',\n  'solve',\n  'someone',\n  'song',\n  'soon',\n  'sorry',\n  'sort',\n  'soul',\n  'sound',\n  'soup',\n  'source',\n  'south',\n  'space',\n  'spare',\n  'spatial',\n  'spawn',\n  'speak',\n  'special',\n  'speed',\n  'spell',\n  'spend',\n  'sphere',\n  'spice',\n  'spider',\n  'spike',\n  'spin',\n  'spirit',\n  'split',\n  'spoil',\n  'sponsor',\n  'spoon',\n  'sport',\n  'spot',\n  'spray',\n  'spread',\n  'spring',\n  'spy',\n  'square',\n  'squeeze',\n  'squirrel',\n  'stable',\n  'stadium',\n  'staff',\n  'stage',\n  'stairs',\n  'stamp',\n  'stand',\n  'start',\n  'state',\n  'stay',\n  'steak',\n  'steel',\n  'stem',\n  'step',\n  'stereo',\n  'stick',\n  'still',\n  'sting',\n  'stock',\n  'stomach',\n  'stone',\n  'stool',\n  'story',\n  'stove',\n  'strategy',\n  'street',\n  'strike',\n  'strong',\n  'struggle',\n  'student',\n  'stuff',\n  'stumble',\n  'style',\n  'subject',\n  'submit',\n  'subway',\n  'success',\n  'such',\n  'sudden',\n  'suffer',\n  'sugar',\n  'suggest',\n  'suit',\n  'summer',\n  'sun',\n  'sunny',\n  'sunset',\n  'super',\n  'supply',\n  'supreme',\n  'sure',\n  'surface',\n  'surge',\n  'surprise',\n  'surround',\n  'survey',\n  'suspect',\n  'sustain',\n  'swallow',\n  'swamp',\n  'swap',\n  'swarm',\n  'swear',\n  'sweet',\n  'swift',\n  'swim',\n  'swing',\n  'switch',\n  'sword',\n  'symbol',\n  'symptom',\n  'syrup',\n  'system',\n  'table',\n  'tackle',\n  'tag',\n  'tail',\n  'talent',\n  'talk',\n  'tank',\n  'tape',\n  'target',\n  'task',\n  'taste',\n  'tattoo',\n  'taxi',\n  'teach',\n  'team',\n  'tell',\n  'ten',\n  'tenant',\n  'tennis',\n  'tent',\n  'term',\n  'test',\n  'text',\n  'thank',\n  'that',\n  'theme',\n  'then',\n  'theory',\n  'there',\n  'they',\n  'thing',\n  'this',\n  'thought',\n  'three',\n  'thrive',\n  'throw',\n  'thumb',\n  'thunder',\n  'ticket',\n  'tide',\n  'tiger',\n  'tilt',\n  'timber',\n  'time',\n  'tiny',\n  'tip',\n  'tired',\n  'tissue',\n  'title',\n  'toast',\n  'tobacco',\n  'today',\n  'toddler',\n  'toe',\n  'together',\n  'toilet',\n  'token',\n  'tomato',\n  'tomorrow',\n  'tone',\n  'tongue',\n  'tonight',\n  'tool',\n  'tooth',\n  'top',\n  'topic',\n  'topple',\n  'torch',\n  'tornado',\n  'tortoise',\n  'toss',\n  'total',\n  'tourist',\n  'toward',\n  'tower',\n  'town',\n  'toy',\n  'track',\n  'trade',\n  'traffic',\n  'tragic',\n  'train',\n  'transfer',\n  'trap',\n  'trash',\n  'travel',\n  'tray',\n  'treat',\n  'tree',\n  'trend',\n  'trial',\n  'tribe',\n  'trick',\n  'trigger',\n  'trim',\n  'trip',\n  'trophy',\n  'trouble',\n  'truck',\n  'true',\n  'truly',\n  'trumpet',\n  'trust',\n  'truth',\n  'try',\n  'tube',\n  'tuition',\n  'tumble',\n  'tuna',\n  'tunnel',\n  'turkey',\n  'turn',\n  'turtle',\n  'twelve',\n  'twenty',\n  'twice',\n  'twin',\n  'twist',\n  'two',\n  'type',\n  'typical',\n  'ugly',\n  'umbrella',\n  'unable',\n  'unaware',\n  'uncle',\n  'uncover',\n  'under',\n  'undo',\n  'unfair',\n  'unfold',\n  'unhappy',\n  'uniform',\n  'unique',\n  'unit',\n  'universe',\n  'unknown',\n  'unlock',\n  'until',\n  'unusual',\n  'unveil',\n  'update',\n  'upgrade',\n  'uphold',\n  'upon',\n  'upper',\n  'upset',\n  'urban',\n  'urge',\n  'usage',\n  'use',\n  'used',\n  'useful',\n  'useless',\n  'usual',\n  'utility',\n  'vacant',\n  'vacuum',\n  'vague',\n  'valid',\n  'valley',\n  'valve',\n  'van',\n  'vanish',\n  'vapor',\n  'various',\n  'vast',\n  'vault',\n  'vehicle',\n  'velvet',\n  'vendor',\n  'venture',\n  'venue',\n  'verb',\n  'verify',\n  'version',\n  'very',\n  'vessel',\n  'veteran',\n  'viable',\n  'vibrant',\n  'vicious',\n  'victory',\n  'video',\n  'view',\n  'village',\n  'vintage',\n  'violin',\n  'virtual',\n  'virus',\n  'visa',\n  'visit',\n  'visual',\n  'vital',\n  'vivid',\n  'vocal',\n  'voice',\n  'void',\n  'volcano',\n  'volume',\n  'vote',\n  'voyage',\n  'wage',\n  'wagon',\n  'wait',\n  'walk',\n  'wall',\n  'walnut',\n  'want',\n  'warfare',\n  'warm',\n  'warrior',\n  'wash',\n  'wasp',\n  'waste',\n  'water',\n  'wave',\n  'way',\n  'wealth',\n  'weapon',\n  'wear',\n  'weasel',\n  'weather',\n  'web',\n  'wedding',\n  'weekend',\n  'weird',\n  'welcome',\n  'west',\n  'wet',\n  'whale',\n  'what',\n  'wheat',\n  'wheel',\n  'when',\n  'where',\n  'whip',\n  'whisper',\n  'wide',\n  'width',\n  'wife',\n  'wild',\n  'will',\n  'win',\n  'window',\n  'wine',\n  'wing',\n  'wink',\n  'winner',\n  'winter',\n  'wire',\n  'wisdom',\n  'wise',\n  'wish',\n  'witness',\n  'wolf',\n  'woman',\n  'wonder',\n  'wood',\n  'wool',\n  'word',\n  'work',\n  'world',\n  'worry',\n  'worth',\n  'wrap',\n  'wreck',\n  'wrestle',\n  'wrist',\n  'write',\n  'wrong',\n  'yard',\n  'year',\n  'yellow',\n  'you',\n  'young',\n  'youth',\n  'zebra',\n  'zero',\n  'zone',\n  'zoo'\n];\n\nexport function getMnemonicWords() {\n  return mnemonicWords;\n}\n","import React, { useRef } from 'react';\nimport { useSelector } from 'redux/DappProviderContext';\nimport {\n  isAccountLoadingSelector,\n  isLoggedInSelector,\n  walletLoginSelector\n} from 'redux/selectors';\n\nimport { RouteType } from 'types';\n\nconst AuthenticatedRoutesWrapper = ({\n  children,\n  routes,\n  unlockRoute,\n  onRedirect\n}: {\n  children: React.ReactNode;\n  routes: RouteType[];\n  unlockRoute: string;\n  onRedirect?: (unlockRoute?: string) => void;\n}) => {\n  const isLoggedIn = useSelector(isLoggedInSelector);\n\n  const isAccountLoading = useSelector(isAccountLoadingSelector);\n\n  const walletLogin = useSelector(walletLoginSelector);\n  const { pathname } = window.location;\n\n  const authenticatedRoutesRef = useRef(\n    routes.filter((route) => Boolean(route.authenticatedRoute))\n  );\n\n  const isOnAuthenticatedRoute = authenticatedRoutesRef.current.some(\n    ({ path }) => pathname === path\n  );\n\n  const shouldRedirect =\n    isOnAuthenticatedRoute && !isLoggedIn && walletLogin == null;\n\n  if (isAccountLoading || walletLogin) {\n    return null;\n  }\n\n  if (shouldRedirect) {\n    if (onRedirect) {\n      onRedirect(unlockRoute);\n    } else {\n      window.location.href = unlockRoute;\n    }\n    return null;\n  }\n\n  return <>{children}</>;\n};\n\nexport default AuthenticatedRoutesWrapper;\n","import React, { useCallback } from 'react';\nimport { IDappProvider } from '@elrondnetwork/erdjs/out';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport {\n  getTransactionsByHashes,\n  sendSignedTransactions\n} from 'apiCalls/transactions';\nimport ProviderInitializer from 'components/ProviderInitializer';\nimport TransactionSender from 'components/TransactionSender';\nimport TransactionsTracker from 'components/TransactionsTracker';\nimport OverrideDefaultBehaviourContext from 'contexts/OverrideDefaultBehaviourContext';\nimport {\n  GetTransactionsByHashesType,\n  SendSignedTransactionsAsyncType\n} from 'contexts/types';\nimport { setExternalProvider } from 'providers/accountProvider';\nimport { DappCoreContext } from 'redux/DappProviderContext';\nimport { CustomNetworkType, EnvironmentsEnum } from 'types';\nimport AppInitializer from 'wrappers/AppInitializer';\n\nimport { store, persistor } from './store';\n\ninterface DappProviderPropsType {\n  children: React.ReactChildren | React.ReactElement;\n  customNetworkConfig?: CustomNetworkType;\n  externalProvider?: IDappProvider;\n  environment: 'testnet' | 'mainnet' | 'devnet' | EnvironmentsEnum;\n  sendSignedTransactionsAsync?: SendSignedTransactionsAsyncType;\n  getTransactionsByHash?: GetTransactionsByHashesType;\n}\n\nexport const DappProvider = ({\n  children,\n  customNetworkConfig = {},\n  externalProvider,\n  environment,\n  sendSignedTransactionsAsync = sendSignedTransactions,\n  getTransactionsByHash = getTransactionsByHashes\n}: DappProviderPropsType) => {\n  const memoizedSendSignedTransactionsAsync = useCallback(\n    sendSignedTransactionsAsync,\n    []\n  );\n\n  if (!environment) {\n    //throw if the user tries to initialize the app without a valid environment\n    throw new Error('missing environment flag');\n  }\n\n  if (externalProvider != null) {\n    setExternalProvider(externalProvider);\n  }\n\n  const memoizedGetTransactionsByHash = useCallback(getTransactionsByHash, []);\n  return (\n    <Provider context={DappCoreContext} store={store}>\n      <PersistGate persistor={persistor} loading={null}>\n        <OverrideDefaultBehaviourContext.Provider\n          value={{\n            sendSignedTransactionsAsync: memoizedSendSignedTransactionsAsync,\n            getTransactionsByHash: memoizedGetTransactionsByHash\n          }}\n        >\n          <AppInitializer\n            environment={environment as EnvironmentsEnum}\n            customNetworkConfig={customNetworkConfig}\n          >\n            <ProviderInitializer />\n            <TransactionSender />\n            <TransactionsTracker />\n            {children}\n          </AppInitializer>\n        </OverrideDefaultBehaviourContext.Provider>\n      </PersistGate>\n    </Provider>\n  );\n};\n","export function buildUrlParams(\n  search: string,\n  urlParams: {\n    [key: string]: string;\n  }\n) {\n  const urlSearchParams: any = new URLSearchParams(search);\n  const params = Object.fromEntries(urlSearchParams);\n  const nextUrlParams = new URLSearchParams({\n    ...params,\n    ...urlParams\n  }).toString();\n  return { nextUrlParams, params };\n}\n","import { chainIDSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport function getChainID() {\n  return chainIDSelector(store.getState());\n}\n","import { networkSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport function getNetworkConfig() {\n  return networkSelector(store.getState());\n}\n","import { loginAction } from 'redux/commonActions';\nimport { store } from 'redux/store';\nimport { LoginMethodsEnum } from 'types';\n\nexport function loginWithExternalProvider(address: string) {\n  store.dispatch(loginAction({ address, loginMethod: LoginMethodsEnum.extra }));\n}\n","import {\n  createBalanceBuilder,\n  Token,\n  TokenType\n} from '@elrondnetwork/erdjs/out';\nimport { denomination as configDenomination } from 'constants/index';\n\nexport function nominate(input: string, customDenomination?: number) {\n  const balance = createBalanceBuilder(\n    new Token({\n      decimals: customDenomination || configDenomination,\n      type: TokenType.Fungible\n    })\n  );\n  return balance(input).toString();\n}\n\nexport default nominate;\n","interface SwitchTrueType {\n  default: any;\n  [key: string]: any;\n}\n\ntype ReturnKeys = 'true' | 'false';\n\nexport function switchTrue(object: SwitchTrueType) {\n  const { default: defaultValue, ...rest } = object;\n  const obj = { default: defaultValue, ...rest };\n  const result = Object.keys(obj).reduce((acc, cur) => {\n    return {\n      ...acc,\n      [cur === 'default' ? 'true' : cur]: (obj as any)[cur as ReturnKeys]\n    };\n  }, {} as Record<ReturnKeys, any>);\n  return result['true'];\n}\n","import { useIdleTimer as useReactIdleTimer } from 'react-idle-timer';\nimport { getIsLoggedIn, logout as dappLogout } from 'utils';\n\nconst getTimeout = (minutes: number) => 1000 * 60 * minutes;\nconst debounce = 500;\n\ninterface IdleTimerType {\n  minutes?: number;\n  onLogout?: (props?: any) => void;\n}\n\nexport const useIdleTimer = ({ minutes = 10, onLogout }: IdleTimerType) => {\n  const isLoggedIn = getIsLoggedIn();\n  const logout = onLogout || dappLogout;\n  const timeout = getTimeout(minutes);\n\n  const onIdle = () => {\n    if (isLoggedIn) {\n      logout();\n    }\n  };\n\n  useReactIdleTimer({ timeout, onIdle, debounce });\n};\n\nexport default useIdleTimer;\n"],"names":["TransactionServerStatusesEnum","TransactionBatchStatusesEnum","LoginMethodsEnum","NotificationTypesEnum","TypesOfSmartContractCallsEnum","EnvironmentsEnum","runtime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","context","Context","_invoke","state","method","arg","Error","undefined","done","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","result","__await","then","unwrapped","error","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","doneResult","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","globalThis","Function","MISSING_PROVIDER_MESSAGE","fallbackNetworkConfigurations","devnet","id","chainId","egldLabel","egldDenomination","decimals","gasPerDataByte","walletConnectDeepLink","walletConnectBridgeAddresses","walletAddress","apiAddress","explorerAddress","apiTimeout","testnet","mainnet","ledgerErrorCodes","36864","code","message","27013","27904","28160","28161","28162","28163","28164","28165","28166","28167","28168","28176","28169","28170","28171","28172","28173","28174","28175","28177","getProviderType","provider","WalletProvider","wallet","WalletConnectProvider","walletconnect","HWProvider","ledger","ExtensionProvider","extension","EmptyProvider","none","extra","newWalletProvider","getLedgerConfiguration","initializedHwWalletP","isInitialized","_context","hwApp","getAppConfiguration","version","_yield$hwApp$getAppCo","dataEnabled","contractData","notInitializedError","caller","_proto","init","login","options","logout","getAddress","isConnected","sendTransaction","transaction","signTransaction","signTransactions","transactions","signMessage","emptyProvider","accountProvider","externalProvider","setAccountProvider","setExternalProvider","getAccountProvider","logoutAction","createAction","loginAction","payload","localStorageKeys","loginExpiresAt","hasLocalStorage","localStorage","data","expires","setItem","String","JSON","stringify","item","getItem","deserializedItem","parse","moment","unix","removeItem","require","sessionStorage","clear","storage","session","local","getNewLoginExpiresTimestamp","Date","setHours","getHours","setLoginExpiresAt","expiresAt","initialState","loginMethod","walletConnectLogin","ledgerLogin","tokenLogin","walletLogin","extensionLogin","loginInfoSlice","createSlice","reducers","setLoginMethod","action","setTokenLogin","setTokenLoginSignature","signature","setWalletLogin","setWalletConnectLogin","setLedgerLogin","extraReducers","builder","addCase","actions","reducer","optionalRedirect","callbackUrl","shouldRedirect","setTimeout","window","location","pathname","includes","href","TransactionTypesEnum","defaultNetwork","walletConnectBridgeAddress","networkConfigSlice","network","chainID","initializeNetworkConfig","Math","floor","random","omit","setChainID","address","account","balance","nonce","ledgerAccount","publicKey","walletConnectAccount","isAccountLoading","accountLoadingError","accountInfoSlice","setAddress","Address","hex","setAccount","setAccountNonce","setAccountShard","shard","setLedgerAccount","updateLedgerAccount","index","setWalletConnectAccount","setIsAccountLoading","setAccountLoadingError","REHYDRATE","_action$payload","accountInfo","pendingBatchTransactionsStates","successBatchTransactionsStates","success","failBatchTransactionsStates","fail","cancelled","timedOut","timedOutBatchTransactionsStates","pendingServerTransactionsStatuses","pending","successServerTransactionsStates","completedServerTransactionsStates","completed","failServerTransactionsStates","invalid","getIsTransactionCompleted","status","getIsTransactionPending","isBatchTransactionPending","isServerTransactionPending","getIsTransactionSuccessful","isBatchTransactionSuccessful","isServerTransactionSuccessful","getIsTransactionFailed","isBatchTransactionFailed","isServerTransactionFailed","getIsTransactionTimedOut","isBatchTransactionTimedOut","decodePart","part","decodedPart","hexPart","Buffer","from","toString","trim","str","charCodeAt","isUtf8","isStringBase64","string","atob","parseMultiEsdtTransferData","contractCallDataIndex","startsWith","MultiESDTNFTTransfer","split","receiver","encodedTxCount","rest","txCount","BigNumber","toNumber","itemIndex","txIndex","nftTransaction","token","encodedNonce","esdtTransaction","amount","isDifferentFromTxCount","hasInvalidNoOfAdSigns","some","tx","sourceStr","searchStr","startingIndices","indexOccurence","indexOf","getAllStringOccurrences","hasAdStart","scCallData","scCall","console","addressIsValid","destinationAddress","test","checkAddress","Boolean","bech32","canTransformToPublicKey","noData","tokenId","getTokenFromData","isTokenTransfer","ESDTTransfer","nftTransfer","ESDTNFTTransfer","encodedToken","encodedAmount","replace","e","nonceIndex","amountIndex","map","decodeData","collection","quantity","every","el","erdLabel","builtCallbackUrl","urlParams","url","entries","URL","origin","search","urlSearchParams","URLSearchParams","params","fromEntries","nextUrlParams","buildUrlParams","parseTransactionAfterSigning","isLedger","TransactionVersion","withTxHashSignVersion","TransactionOptions","withTxHashSignOptions","parsedTransaction","toPlainObject","hash","getHash","signedTransactions","transactionsToSign","signTransactionsError","customTransactionInformationForSessionId","defaultCustomInformation","signWithoutSending","sessionInformation","redirectAfterSign","transactionsSlice","moveTransactionsToSignedState","sessionId","customTransactionInformation","errorMessage","clearSignedTransaction","clearTransactionToSign","updateSignedTransaction","updateSignedTransactions","updateSignedTransactionStatus","transactionHash","_state$signedTransact","_state$signedTransact2","areTransactionsSuccessful","_state$signedTransact3","_state$signedTransact4","areTransactionsFailed","_state$signedTransact5","_state$signedTransact6","setTransactionsToSign","clearAllTransactionsToSign","clearAllSignedTransactions","setSignTransactionsError","_action$payload5","parsedSignedTransactions","reduce","acc","txTimestamp","expiration","signTransactionsSlice","setTransactionsDisplayInfo","transactionsDisplayInfo","successMessage","processingMessage","submittedMessage","transactionDuration","clearTransactionsInfoForSessionId","clearTransactionsInfo","modalsSlice","setTxSubmittedModal","txSubmittedModal","setNotificationModal","notificationModal","clearTxSubmittedModal","clearNotificationModal","createDeepEqualSelector","createSelectorCreator","defaultMemoize","isEqual","accountInfoSelector","addressSelector","accountSelector","accountBalanceSelector","accountNonceSelector","valueOf","shardSelector","ledgerAccountSelector","isAccountLoadingSelector","loginInfoSelector","loginInfo","loginMethodSelector","isLoggedInSelector","walletConnectLoginSelector","ledgerLoginSelector","walletLoginSelector","whitelistedActions","throttledSetNewExpires","throttle","loginSessionMiddleware","store","appState","getState","loginTimestamp","now","log","dispatch","networkConfig","modals","transactionsInfo","transactionsInfoPersistConfig","persistReducer","blacklist","rootReducer","combineReducers","localStorageReducers","migrations","2","whitelist","migrate","createMigrate","debug","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","PAUSE","PERSIST","PURGE","REGISTER","ignoredPaths","concat","persistor","persistStore","networkConfigSelector","chainIDSelector","ChainID","walletConnectBridgeAddressSelector","walletConnectDeepLinkSelector","networkSelector","apiNetworkSelector","egldLabelSelector","newTransaction","rawTransaction","dataPayload","TransactionPayload","fromEncoded","Transaction","Balance","fromString","Nonce","gasLimit","GasLimit","gasPrice","GasPrice","transactionsSelectors","signedTransactionsSelector","signTransactionsErrorSelector","selectTxByStatus","txStatusVerifier","txBody","pendingSignedTransactionsSelector","successfulTransactionsSelector","completedTransactionsSelector","failedTransactionsSelector","timedOutTransactionsSelector","transactionsToSignSelector","transactionStatusSelector","_","transactionSessionId","defaultTransactionInfo","transactionDisplayInfoSelector","Number","notificationModalSelector","getIsLoggedIn","onRedirect","providerType","getAccountProviderType","getEgldLabel","getIsProviderEqualTo","comparedProviderType","loggedIn","proxyProvider","initializeProxyProvider","initializationNetworkConfig","ProxyProvider","timeout","getProxyProvider","getAccountFromProxyProvider","proxy","getAccount","_context2","getNetworkConfig","setNonce","getLatestNonce","currentAccountNonce","max","getAccountBalance","accountAddress","_account$balance","setNewAccount","accountData","refreshAccount","getShardOfAddress","hexPubKey","maskHigh","parseInt","maskLow","pubKey","lastByteOfPubKey","metachainPrefix","equals","zeroAddress","alloc","fill","isAddressOfMetachain","numShards","callbackRoute","signableMessage","SignableMessage","encodeURIComponent","logarithmicRest","position","minv","maxv","exp","stringIsInteger","integer","positiveNumbersOnly","stringInteger","match","bNparsed","limit","comparedTo","stringIsFloat","wholes","number","join","defaultResult","isEsdt","isNft","isEgld","getIdentifierType","identifier","parts","pipe","previous","if","condition","newValue","denominate","input","denomination","showLastNonZeroDecimal","showIsLessThanDecimalsLabel","addCommas","Token","toDenominated","current","bnBalance","isZero","integerPart","decimalPart","bNdecimalPart","decimalPlaces","min","shownDecimalsAreZero","isGreaterThan","substring","formatted","toFormat","integerPartZero","numericPart","decimalSide","zeroPlaceholders","Array","zeros","minAmount","calculateFeeLimit","minGasLimit","gasPriceModifier","defaultGasPrice","validGasLimit","validGasPrice","Zero","NetworkConfig","MinGasLimit","GasPerDataByte","GasPriceModifier","parseFloat","computeFee","config","ROUNDING_MODE","ROUND_FLOOR","getUsdValue","usd","sum","toFixed","toLocaleString","maximumFractionDigits","minimumFractionDigits","ESDTTransferTypes","isSelfESDTContract","sender","restParts","isSelfTransaction","isCorrectESDTType","areDataPartsValid","toLowerCase","isHexValidLength","getAddressFromDataField","parsedData","addressIndex","getAddressIndex","classnames","getGeneratedClasses","className","shouldRenderDefaultCss","defaultStyles","classNames","wrapperClassName","DappCoreContext","React","createContext","useDispatch","createDispatchHook","useSelector","createSelectorHook","useExtensionLogin","redirectAfterLogin","useState","setError","isLoading","setIsLoading","isLoggedIn","getInstance","warn","providerLoginData","_provider$account","loginToken","loginFailed","useWebWalletLogin","setMinutes","getMinutes","loginData","ledgerAppErrorText","failInitializeErrorText","useLedgerLogin","addressesPerPage","hwWalletP","startIndex","setStartIndex","accounts","setAccounts","setVersion","contractDataEnabled","setContractDataEnabled","selectedAddress","setSelectedAddress","showAddressList","setShowAddressList","dispatchLoginActions","loginType","onLoginFailed","customMessage","statusCode","loginUser","hwWalletProvider","hasContractDataEnabled","fetchAccounts","_context3","getAccounts","ledgerData","_context4","useEffect","onGoToPrevPage","onGoToNextPage","onSelectAddress","newSelectedAddress","onConfirmSelectedAddress","useUpdateEffect","effect","dependencies","isInitialMount","useRef","ErrorCodesEnum","useWalletConnectLogin","heartbeatDisconnectInterval","logoutRoute","wcUri","setWcUri","providerRef","hasWcUri","uriDeepLink","handleHeartbeat","_providerRef$current","walletConnector","_providerRef$current$","connected","sendCustomMessage","handleOnLogout","handleOnLogin","getSignature","hasSignature","loginActionData","on","clearInterval","setInterval","interval","generateWcUri","loginProvider","shouldGenerateWcUri","newProvider","onClientLogin","onClientLogout","_providerRef$current3","walletConnectUri","accountBalance","storeChainId","transactionsPayload","isArray","bNtotalFee","totalFee","fee","getGasLimit","getGasPrice","getData","getChainID","plus","calcTotalFee","minus","notificationPayload","warning","iconClassName","title","description","signTransactionsPayload","calculateGasLimit","bNconfigGasLimit","bNgasPerDataByte","bNgasValue","times","transformAndSignTransactions","validatedReceiver","invalidReceiver","transactionsChainId","sendTransactions","completedTransactionsDelay","areComplexTransactions","txToSign","useGetPendingTransactions","pendingTransactions","pendingTransactionsArray","hasPendingTransactions","multiTxData","useParseMultiEsdtTransferData","parsedTransactionsByDataField","setParsedTransactions","allTransactions","setAllTransactions","addTransactionDataToParsedInfo","txInfo","existing","allTxs","transactionIndex","multiTxs","trx","idx","newTx","getReceiver","extractTransactionESDTData","getTxInfoByDataField","multiTransactionData","transactionId","onSuccess","onFail","onCancelled","onTimedOut","onCompleted","transactionsBatch","isPending","isFailed","isTimedOut","isSuccessful","isCompleted","isCancelled","failedTransactions","failedTransactionsArray","hasFailedTransactions","successfulTransactions","successfulTransactionsArray","hasSuccessfulTransactions","timedOutTransactions","completedTransactions","hasActiveTransactions","completedTransactionsArray","hasCompletedTransactions","sendSignedTransactions","_networkSelector","promises","axios","post","all","txHash","getTransactionsByHashes","hashes","get","withScResults","responseData","previousStatus","txOnNetwork","find","txResponse","invalidTransaction","results","pendingResults","hasStatusChanged","ProviderInitializer","setLedgerData","initWalletLoginProvider","getInitializedHwWalletProvider","ledgerConfig","_context5","getNetworkConfigFromProxyProvider","setLedgerProvider","setExtensionProvider","tryAuthenticateWalletUser","initializeProvider","fetchAccount","OverrideDefaultBehaviourContext","sendSignedTransactionsAsync","getTransactionsByHash","TransactionSender","useContext","sendingRef","clearSignInfo","sessionIds","_i","skipSending","_signedTransactions$s","_signedTransactions$s2","signed","transactionsToSend","transactionObject","Signature","applySignature","responseHashes","newStatus","newTransactions","history","pushState","document","handleSendTransactions","TransactionStatusTracker","transactionPayload","intervalRef","isFetchingStatusRef","retriesRef","timeoutRefs","manageTimedOutTransactions","checkTransactionStatus","_loop","v","resultWithError","scResult","returnMessage","_iterator","_ret","TransactionsTracker","mappedPendingTransactionsTrackers","Fragment","getServerConfiguration","cleanApiAddress","endsWith","configUrl","environment","fallbackConfig","getScamAddressData","addressToVerify","_networkConfigSelecto","baseURL","useGetNetworkConfig","useGetNotification","notification","clearNotification","useGetTransactionDisplayInfo","toastId","useParseSignedTransactions","searchData","qs","signSessionId","getTransactionsFromWalletUrl","useSignTransactions","savedCallback","hasTransactions","isExtensionProvider","cancelAction","onCancel","isTxCancelled","signWithWallet","buildedCallbackUrl","signTransactionsWithProvider","redirectRoute","isCurrentRoute","shouldRedirectAfterSign","hasSameTransactions","hasAllTransactionsSigned","signedTransactionsArray","errorsMessages","setTransactionNonces","latestNonce","proxyAccount","isSigningWithWebWallet","isSigningWithProvider","mappedTransactions","onAbort","useGetSignedTransactions","hasSignedTransactions","swr","fetcher","response","useGetTokenDetails","tokenEndpoint","useSwr","selectedToken","tokenDenomination","tokenLabel","tokenAvatar","assets","_selectedToken$assets","svgUrl","useGetAccountInfo","useGetLoginInfo","useGetAccountProvider","verifiedAddresses","useSignTransactionsWithLedger","verifyReceiverScam","currentStep","setCurrentStep","setSignedTransactions","currentTransaction","setCurrentTransaction","waitingForDevice","setWaitingForDevice","isLastTransaction","dataField","transactionTokenInfo","verified","scamInfo","isTokenTransaction","receiverScamInfo","sign","trueForLedger","newSignedTx","newSignedTransactions","exising","errMessage","extractTransactionsInfo","isFirst","continueWithoutSigning","_currentTransaction$t2","_currentTransaction$t3","onSignTransaction","signTx","onNext","nextStep","onPrev","useGetSignTransactionsError","getAccountShard","AppInitializer","customNetworkConfig","children","initialized","setInitialized","initializeProviders","initializeNetwork","fetchConfigFromServer","skipFetchFromServer","customNetworkApiAddress","localConfig","fallbackApiAddress","serverConfig","apiConfig","initializeApp","functionName","inputParameters","outputParameters","withClassNameWrapper","Component","props","Denominate","showLabel","denominatedValue","valueParts","denominateValid","denominateInvalid","denominateProps","fontawesomeFreeSolidIcons","ReactFontawesome","page","text","target","FontAwesomeIcon","icon","icons","faSearch","buttonClassName","loginButtonText","onInitiateLogin","isFirefox","navigator","userAgent","classes","wrapper","loginText","noExtensionButtonWrapper","noExtensionButtonContent","noExtensionButtonTitle","noExtensionButtonIcon","elrondWallet","onClick","rel","faArrowRight","ReactBootstrap","ModalContainer","noSpacer","onClose","Modal","show","backdrop","onHide","animation","centered","size","faTimes","iconClass","dataTestId","iconBgClass","iconSize","generatedClasses","iconContainer","AddressRow","keep","setBalance","fetchBalance","onChange","checked","role","htmlFor","AddressTable","loading","cardBody","tableWrapper","tableContent","tableHeader","tableHeaderText","buttonsWrapper","arrowButton","confirmButton","PageState","faCircleNotch","disabled","faChevronLeft","faChevronRight","ConfirmAddress","noBorder","LedgerConnect","connectPageContent","LedgerLogo","LedgerLoginContainer","wrapContentInsideModal","spinner","onStartLogin","getContent","onModalOpens","onModalCloses","shouldRenderDefaultModalCss","hideButtonWhenModalOpens","showLoginModal","setShowLoginModal","typedIcons","notificationTypesToIcons","faExclamationTriangle","defaultIcon","Dot","color","ProgressSteps","totalSteps","dots","isCurrentStep","SignWithExtensionModal","handleClose","closeBtn","freeSolidIcons","faHourglass","preventDefault","Simple","Combined","small","getIdentifierWithoutNonce","tokenParts","getDetails","isEgldTransfer","symbol","label","src","EgldIcon","faDiamond","getIcon","TokenDetails","render","combined","highlight","isScCall","output","encodedScCall","remainingDataFields","matchAll","RegExp","a","end","SignStep","transactionData","signBtnLabel","denominatedAmount","getValue","scamReport","showProgressSteps","formGroup","formLabel","contentWrapper","tokenWrapper","tokenValue","scamReportIcon","tokenAmountLabel","tokenAmountValue","dataFormGroup","cancelButton","signButton","tokenlabel","Icon","Label","TransactionData","SignWithLedgerModal","container","SignWithWalletConnectModal","close","SignTransactionsModals","CustomConfirmScreens","signError","signProps","Ledger","WalletConnect","Extension","Extra","SessionStorageKeysEnum","half","progress","expiresIn","ref","saveToSession","toastProgress","add","totalSeconds","endTime","startTime","remaining","currentRemaining","getInitialData","percentRemaining","setPercentRemaining","int","duration","asMilliseconds","removeTxFromSession","style","width","fallbackCopyTextToClipboard","textArea","createElement","body","appendChild","focus","select","execCommand","removeChild","copyTextToClipboard","clipboard","writeText","default","copyResult","setCopyResut","stopPropagation","noSpaces","faCopy","faCheck","overflow","setOverflow","trimRef","hiddenTextRef","listener","useCallback","debounce","offsetWidth","addEventListener","removeEventListener","ceil","statusTransactions","iconSuccess","iconFailed","trimContainer","iconPending","iconSuccessData","iconFailedData","iconData","filter","iconSrc","Trim","CopyButton","ExplorerLink","withTxNonce","startTimeProgress","endTimeProgress","lifetimeAfterSuccess","shouldRender","setShouldRender","transactionDisplayInfo","accountShard","timedOutMessage","isSameShard","useMemo","prevTxIsSameShard","receiverAddress","senderShard","senderAddress","receiverShard","pubkey","isCrossShardTransaction","crossShardRounds","toastFooter","details","toastContainer","toastHeader","closeButton","successToastData","hasCloseButton","pendingToastData","failToastData","timedOutToastData","toastDataState","Toast","Progress","IconState","minWidth","TxDetails","TransactionsToastList","successfulToastLifetime","toastsIds","setToastsIds","pendingTransactionsFromStore","signedTransactionsFromStore","pendingTransactionsToRender","signedTransactionsToRender","toast","mappedToastsList","currentTx","TransactionToast","sessionStorageToastsIds","toasts","getToastsIdsFromStorage","newToasts","fetchSessionStorageToasts","mapPendingSignedTransactions","platform","qrcode","WalletConnectLoginContainer","lead","shouldLoginUser","initLoginWithWalletConnect","qrCodeSvg","setQrCodeSvg","isMobileDevice","os","family","card","qrCodeSvgContainer","leadText","mobileLoginButton","mobileLoginButtonIcon","generateQRCode","QRCode","content","root","dangerouslySetInnerHTML","__html","height","Lighting","showModal","loginRoute","LedgerLoginButtonText","WalletConnectLoginButtonText","ExtensionLoginButtonText","WebWalletLoginButtonText","cardContainer","ExtensionLoginButton","WebWalletLoginButton","LedgerLoginButton","WalletConnectLoginButton","apiProvider","mnemonicWords","routes","unlockRoute","isOnAuthenticatedRoute","route","authenticatedRoute","path","memoizedSendSignedTransactionsAsync","memoizedGetTransactionsByHash","Provider","PersistGate","btoa","ApiProvider","isContractAddress","extractedAddress","customDenomination","createBalanceBuilder","TokenType","Fungible","cur","minutes","onLogout","dappLogout","getTimeout","useReactIdleTimer","onIdle"],"mappings":"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S,IAEnBxqB,gBAAC4qB,IACC3S,gBAAiBoS,EACjB9wB,cAAe6wB,IAEjBpqB,gBAAC6qB,IACCtxB,cAAe6wB,EACfnS,gBAAiBqS,aC1D3BQ,GAAkC,KCLhCC,GAAgB,CACpB,UACA,UACA,OACA,QACA,QACA,SACA,SACA,WACA,SACA,QACA,SACA,WACA,UACA,SACA,UACA,OACA,WACA,UACA,SACA,MACA,SACA,QACA,UACA,SACA,QACA,MACA,SACA,UACA,SACA,QACA,QACA,UACA,SACA,UACA,SACA,SACA,SACA,QACA,MACA,QACA,QACA,QACA,MACA,MACA,UACA,QACA,QACA,QACA,UACA,QACA,QACA,MACA,QACA,QACA,SACA,QACA,QACA,UACA,OACA,QACA,SACA,UACA,UACA,QACA,SACA,SACA,UACA,SACA,UACA,QACA,QACA,QACA,SACA,QACA,WACA,SACA,UACA,SACA,UACA,UACA,UACA,MACA,QACA,UACA,SACA,QACA,UACA,QACA,OACA,SACA,OACA,QACA,QACA,MACA,QACA,QACA,OACA,SACA,UACA,SACA,SACA,QACA,MACA,WACA,SACA,UACA,MACA,SACA,UACA,QACA,SACA,SACA,SACA,UACA,OACA,SACA,SACA,WACA,UACA,UACA,QACA,SACA,OACA,SACA,OACA,SACA,UACA,UACA,QACA,QACA,QACA,OACA,UACA,QACA,UACA,OACA,OACA,WACA,QACA,QACA,MACA,UACA,UACA,OACA,SACA,SACA,SACA,MACA,SACA,UACA,SACA,OACA,QACA,SACA,SACA,QACA,OACA,SACA,UACA,SACA,OACA,SACA,QACA,SACA,SACA,UACA,QACA,OACA,QACA,UACA,OACA,SACA,SACA,UACA,SACA,UACA,MACA,OACA,OACA,UACA,OACA,QACA,SACA,QACA,QACA,QACA,UACA,QACA,QACA,QACA,QACA,QACA,UACA,SACA,OACA,OACA,QACA,QACA,OACA,OACA,OACA,OACA,OACA,QACA,OACA,QACA,SACA,SACA,SACA,OACA,SACA,SACA,MACA,MACA,UACA,QACA,QACA,QACA,QACA,QACA,SACA,QACA,SACA,QACA,SACA,QACA,QACA,WACA,SACA,SACA,QACA,UACA,QACA,QACA,SACA,QACA,SACA,UACA,QACA,OACA,OACA,SACA,SACA,SACA,SACA,SACA,QACA,MACA,WACA,OACA,SACA,QACA,OACA,UACA,QACA,QACA,SACA,OACA,OACA,OACA,OACA,SACA,OACA,MACA,QACA,SACA,QACA,SACA,QACA,SACA,SACA,UACA,UACA,UACA,MACA,SACA,OACA,QACA,SACA,QACA,OACA,OACA,OACA,SACA,SACA,SACA,MACA,UACA,QACA,WACA,SACA,SACA,QACA,UACA,OACA,UACA,SACA,SACA,SACA,UACA,SACA,UACA,QACA,QACA,WACA,SACA,QACA,UACA,SACA,QACA,OACA,QACA,QACA,SACA,OACA,SACA,QACA,UACA,QACA,QACA,UACA,SACA,SACA,UACA,UACA,QACA,QACA,QACA,WACA,SACA,UACA,OACA,QACA,QACA,OACA,UACA,OACA,OACA,QACA,QACA,SACA,QACA,SACA,QACA,QACA,SACA,OACA,QACA,OACA,QACA,QACA,QACA,QACA,OACA,QACA,UACA,SACA,QACA,QACA,UACA,OACA,SACA,OACA,OACA,UACA,QACA,SACA,UACA,OACA,UACA,QACA,SACA,UACA,UACA,UACA,UACA,WACA,UACA,WACA,UACA,WACA,OACA,OACA,SACA,OACA,QACA,OACA,OACA,UACA,OACA,SACA,QACA,UACA,SACA,SACA,SACA,QACA,SACA,QACA,SACA,QACA,OACA,QACA,QACA,SACA,QACA,QACA,QACA,SACA,QACA,OACA,UACA,QACA,QACA,SACA,OACA,QACA,SACA,QACA,UACA,QACA,SACA,UACA,SACA,QACA,MACA,UACA,OACA,UACA,MACA,WACA,UACA,UACA,UACA,QACA,UACA,SACA,OACA,QACA,MACA,SACA,OACA,QACA,SACA,SACA,OACA,WACA,OACA,MACA,OACA,SACA,SACA,SACA,WACA,SACA,UACA,WACA,WACA,OACA,UACA,SACA,OACA,SACA,QACA,UACA,SACA,SACA,SACA,UACA,OACA,SACA,SACA,UACA,QACA,SACA,SACA,WACA,SACA,SACA,OACA,UACA,UACA,SACA,SACA,UACA,SACA,SACA,UACA,OACA,UACA,QACA,OACA,SACA,OACA,SACA,UACA,UACA,UACA,SACA,WACA,SACA,OACA,WACA,WACA,UACA,OACA,UACA,WACA,UACA,WACA,SACA,SACA,UACA,QACA,SACA,WACA,MACA,OACA,UACA,SACA,SACA,SACA,QACA,OACA,OACA,SACA,OACA,QACA,SACA,QACA,UACA,OACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,OACA,OACA,MACA,OACA,OACA,OACA,SACA,OACA,QACA,OACA,QACA,UACA,QACA,QACA,QACA,OACA,QACA,SACA,OACA,OACA,OACA,UACA,UACA,OACA,OACA,UACA,SACA,MACA,QACA,SACA,QACA,QACA,WACA,UACA,UACA,WACA,WACA,QACA,OACA,SACA,SACA,UACA,SACA,UACA,SACA,UACA,QACA,SACA,QACA,MACA,UACA,UACA,QACA,SACA,UACA,SACA,SACA,UACA,QACA,SACA,SACA,SACA,SACA,SACA,QACA,SACA,QACA,WACA,UACA,QACA,QACA,MACA,QACA,QACA,UACA,QACA,QACA,SACA,QACA,UACA,SACA,UACA,SACA,WACA,OACA,QACA,SACA,QACA,UACA,SACA,WACA,SACA,UACA,SACA,UACA,WACA,UACA,UACA,QACA,QACA,OACA,SACA,SACA,SACA,SACA,UACA,SACA,UACA,SACA,QACA,MACA,UACA,SACA,OACA,UACA,OACA,QACA,QACA,OACA,QACA,OACA,SACA,SACA,MACA,QACA,UACA,OACA,UACA,MACA,QACA,SACA,UACA,QACA,WACA,UACA,WACA,UACA,MACA,OACA,OACA,SACA,QACA,WACA,QACA,QACA,MACA,QACA,UACA,QACA,SACA,OACA,OACA,SACA,QACA,OACA,OACA,SACA,SACA,OACA,OACA,QACA,SACA,OACA,MACA,UACA,MACA,OACA,QACA,QACA,OACA,SACA,OACA,SACA,OACA,QACA,QACA,QACA,SACA,QACA,QACA,MACA,OACA,QACA,MACA,OACA,OACA,SACA,OACA,OACA,QACA,SACA,SACA,OACA,UACA,QACA,UACA,SACA,SACA,QACA,MACA,UACA,QACA,WACA,QACA,SACA,SACA,OACA,QACA,QACA,QACA,SACA,QACA,OACA,MACA,QACA,UACA,OACA,SACA,SACA,OACA,SACA,UACA,OACA,MACA,SACA,UACA,SACA,SACA,UACA,MACA,OACA,OACA,SACA,QACA,OACA,UACA,SACA,QACA,SACA,UACA,UACA,QACA,QACA,OACA,SACA,SACA,UACA,OACA,OACA,OACA,SACA,QACA,QACA,QACA,UACA,QACA,QACA,QACA,QACA,OACA,OACA,OACA,UACA,OACA,OACA,QACA,UACA,SACA,SACA,SACA,OACA,OACA,QACA,QACA,QACA,QACA,QACA,UACA,QACA,QACA,OACA,QACA,OACA,UACA,QACA,OACA,QACA,QACA,QACA,QACA,QACA,SACA,MACA,MACA,QACA,OACA,OACA,SACA,UACA,OACA,QACA,SACA,OACA,QACA,UACA,MACA,OACA,OACA,SACA,OACA,SACA,QACA,QACA,WACA,SACA,QACA,SACA,OACA,MACA,OACA,SACA,OACA,OACA,OACA,MACA,OACA,UACA,QACA,SACA,OACA,OACA,UACA,SACA,OACA,QACA,OACA,OACA,OACA,SACA,QACA,WACA,OACA,QACA,OACA,QACA,MACA,OACA,QACA,SACA,QACA,UACA,SACA,OACA,SACA,QACA,OACA,UACA,SACA,MACA,OACA,OACA,WACA,OACA,SACA,MACA,UACA,UACA,QACA,UACA,UACA,SACA,SACA,SACA,UACA,UACA,OACA,UACA,SACA,WACA,QACA,WACA,SACA,WACA,SACA,UACA,SACA,SACA,UACA,UACA,SACA,SACA,SACA,QACA,WACA,QACA,UACA,SACA,SACA,SACA,UACA,UACA,SACA,WACA,OACA,SACA,SACA,UACA,OACA,SACA,UACA,QACA,OACA,QACA,SACA,SACA,MACA,OACA,UACA,QACA,QACA,QACA,MACA,OACA,OACA,UACA,MACA,QACA,QACA,OACA,SACA,SACA,OACA,OACA,WACA,OACA,OACA,UACA,MACA,OACA,MACA,SACA,OACA,UACA,OACA,MACA,UACA,OACA,SACA,OACA,OACA,QACA,QACA,OACA,MACA,QACA,QACA,SACA,OACA,OACA,OACA,WACA,SACA,QACA,QACA,QACA,QACA,UACA,OACA,MACA,OACA,UACA,QACA,OACA,SACA,OACA,QACA,QACA,UACA,OACA,MACA,QACA,SACA,UACA,QACA,OACA,SACA,OACA,UACA,SACA,SACA,QACA,OACA,UACA,UACA,UACA,OACA,OACA,QACA,OACA,OACA,QACA,OACA,OACA,SACA,OACA,SACA,OACA,SACA,OACA,OACA,UACA,QACA,OACA,QACA,SACA,OACA,OACA,UACA,OACA,SACA,OACA,QACA,QACA,UACA,SACA,QACA,QACA,SACA,SACA,UACA,MACA,QACA,SACA,OACA,OACA,OACA,QACA,OACA,SACA,MACA,SACA,UACA,QACA,UACA,SACA,QACA,SACA,QACA,SACA,SACA,SACA,WACA,OACA,OACA,SACA,QACA,WACA,OACA,SACA,SACA,UACA,OACA,SACA,OACA,UACA,OACA,WACA,QACA,QACA,SACA,OACA,SACA,SACA,UACA,OACA,QACA,QACA,QACA,QACA,OACA,UACA,QACA,SACA,SACA,WACA,OACA,UACA,QACA,OACA,UACA,QACA,SACA,UACA,SACA,SACA,OACA,UACA,MACA,QACA,UACA,SACA,QACA,SACA,MACA,SACA,UACA,SACA,UACA,QACA,OACA,QACA,OACA,UACA,WACA,SACA,SACA,QACA,WACA,QACA,OACA,QACA,OACA,SACA,OACA,WACA,SACA,SACA,WACA,QACA,OACA,SACA,SACA,UACA,OACA,QACA,OACA,SACA,SACA,QACA,SACA,SACA,OACA,OACA,OACA,WACA,UACA,UACA,SACA,QACA,OACA,MACA,UACA,UACA,QACA,OACA,OACA,OACA,QACA,QACA,QACA,UACA,SACA,SACA,QACA,OACA,UACA,OACA,UACA,SACA,QACA,MACA,UACA,SACA,QACA,MACA,MACA,OACA,SACA,SACA,UACA,UACA,SACA,UACA,QACA,QACA,UACA,OACA,MACA,QACA,SACA,QACA,MACA,OACA,MACA,QACA,UACA,OACA,OACA,MACA,QACA,SACA,OACA,OACA,QACA,UACA,SACA,SACA,SACA,QACA,UACA,QACA,WACA,QACA,SACA,WACA,SACA,UACA,QACA,UACA,QACA,SACA,UACA,OACA,OACA,OACA,MACA,QACA,SACA,SACA,QACA,OACA,SACA,OACA,OACA,SACA,OACA,QACA,QACA,QACA,UACA,QACA,SACA,SACA,OACA,SACA,QACA,OACA,QACA,OACA,UACA,SACA,UACA,QACA,OACA,UACA,QACA,SACA,OACA,UACA,UACA,MACA,UACA,SACA,SACA,SACA,UACA,SACA,SACA,MACA,QACA,QACA,SACA,WACA,QACA,SACA,UACA,QACA,MACA,SACA,OACA,QACA,OACA,UACA,OACA,SACA,QACA,QACA,QACA,SACA,UACA,QACA,OACA,SACA,SACA,QACA,OACA,SACA,OACA,OACA,QACA,QACA,OACA,SACA,OACA,OACA,OACA,UACA,UACA,WACA,WACA,OACA,SACA,UACA,UACA,SACA,QACA,WACA,SACA,UACA,SACA,UACA,UACA,SACA,UACA,QACA,QACA,UACA,QACA,WACA,SACA,UACA,QACA,UACA,UACA,UACA,SACA,UACA,UACA,UACA,QACA,WACA,UACA,UACA,QACA,UACA,SACA,UACA,OACA,OACA,QACA,UACA,QACA,QACA,QACA,WACA,SACA,UACA,QACA,OACA,MACA,SACA,UACA,UACA,UACA,UACA,WACA,QACA,OACA,OACA,QACA,SACA,UACA,OACA,OACA,QACA,QACA,OACA,OACA,QACA,QACA,OACA,QACA,SACA,QACA,QACA,OACA,OACA,SACA,QACA,MACA,QACA,QACA,OACA,SACA,QACA,UACA,SACA,UACA,SACA,SACA,UACA,SACA,UACA,SACA,SACA,SACA,SACA,UACA,SACA,QACA,UACA,SACA,OACA,SACA,WACA,SACA,SACA,SACA,QACA,OACA,SACA,SACA,SACA,UACA,SACA,UACA,SACA,WACA,SACA,WACA,WACA,SACA,SACA,UACA,SACA,UACA,SACA,SACA,SACA,SACA,MACA,SACA,OACA,OACA,OACA,QACA,QACA,QACA,QACA,OACA,OACA,SACA,OACA,SACA,QACA,QACA,OACA,QACA,QACA,SACA,SACA,UACA,OACA,SACA,OACA,OACA,SACA,QACA,QACA,QACA,QACA,SACA,OACA,MACA,OACA,MACA,SACA,QACA,MACA,SACA,UACA,OACA,OACA,QACA,SACA,QACA,OACA,SACA,OACA,SACA,OACA,UACA,UACA,QACA,UACA,OACA,MACA,QACA,OACA,QACA,UACA,QACA,SACA,SACA,UACA,WACA,WACA,QACA,QACA,SACA,SACA,QACA,MACA,SACA,SACA,OACA,SACA,SACA,UACA,WACA,OACA,OACA,UACA,SACA,OACA,UACA,SACA,QACA,WACA,SACA,UACA,UACA,SACA,QACA,QACA,SACA,QACA,UACA,QACA,OACA,QACA,UACA,SACA,QACA,QACA,OACA,SACA,QACA,OACA,QACA,OACA,QACA,WACA,QACA,SACA,QACA,UACA,MACA,UACA,OACA,OACA,QACA,QACA,OACA,SACA,OACA,QACA,SACA,UACA,SACA,QACA,OACA,QACA,SACA,UACA,MACA,OACA,QACA,SACA,MACA,QACA,OACA,QACA,QACA,OACA,OACA,QACA,UACA,QACA,QACA,SACA,OACA,SACA,OACA,OACA,QACA,QACA,QACA,QACA,QACA,SACA,QACA,QACA,OACA,QACA,OACA,OACA,SACA,SACA,OACA,OACA,OACA,QACA,UACA,QACA,WACA,QACA,UACA,OACA,OACA,QACA,OACA,OACA,QACA,OACA,SACA,QACA,QACA,QACA,UACA,QACA,QACA,UACA,QACA,QACA,QACA,SACA,QACA,SACA,QACA,OACA,SACA,QACA,QACA,UACA,QACA,QACA,OACA,QACA,SACA,SACA,MACA,SACA,UACA,WACA,SACA,UACA,QACA,QACA,SACA,QACA,QACA,QACA,QACA,OACA,QACA,QACA,OACA,OACA,SACA,QACA,QACA,QACA,QACA,UACA,QACA,QACA,QACA,QACA,WACA,SACA,SACA,SACA,WACA,UACA,QACA,UACA,QACA,UACA,SACA,SACA,UACA,OACA,SACA,SACA,QACA,UACA,OACA,SACA,MACA,QACA,SACA,QACA,SACA,UACA,OACA,UACA,QACA,WACA,WACA,SACA,UACA,UACA,UACA,QACA,OACA,QACA,QACA,QACA,QACA,OACA,QACA,SACA,QACA,SACA,UACA,QACA,SACA,QACA,SACA,MACA,OACA,SACA,OACA,OACA,OACA,SACA,OACA,QACA,SACA,OACA,QACA,OACA,OACA,MACA,SACA,SACA,OACA,OACA,OACA,OACA,QACA,OACA,QACA,OACA,SACA,QACA,OACA,QACA,OACA,UACA,QACA,SACA,QACA,QACA,UACA,SACA,OACA,QACA,OACA,SACA,OACA,OACA,MACA,QACA,SACA,QACA,QACA,UACA,QACA,UACA,MACA,WACA,SACA,QACA,SACA,WACA,OACA,SACA,UACA,OACA,QACA,MACA,QACA,SACA,QACA,UACA,WACA,OACA,QACA,UACA,SACA,QACA,OACA,MACA,QACA,QACA,UACA,SACA,QACA,WACA,OACA,QACA,SACA,OACA,QACA,OACA,QACA,QACA,QACA,QACA,UACA,OACA,OACA,SACA,UACA,QACA,OACA,QACA,UACA,QACA,QACA,MACA,OACA,UACA,SACA,OACA,SACA,SACA,OACA,SACA,SACA,SACA,QACA,OACA,QACA,MACA,OACA,UACA,OACA,WACA,SACA,UACA,QACA,UACA,QACA,OACA,SACA,SACA,UACA,UACA,SACA,OACA,WACA,UACA,SACA,QACA,UACA,SACA,SACA,UACA,SACA,OACA,QACA,QACA,QACA,OACA,QACA,MACA,OACA,SACA,UACA,QACA,UACA,SACA,SACA,QACA,QACA,SACA,QACA,MACA,SACA,QACA,UACA,OACA,QACA,UACA,SACA,SACA,UACA,QACA,OACA,SACA,UACA,OACA,SACA,UACA,SACA,UACA,UACA,UACA,QACA,OACA,UACA,UACA,SACA,UACA,QACA,OACA,QACA,SACA,QACA,QACA,QACA,QACA,OACA,UACA,SACA,OACA,SACA,OACA,QACA,OACA,OACA,OACA,SACA,OACA,UACA,OACA,UACA,OACA,OACA,QACA,QACA,OACA,MACA,SACA,SACA,OACA,SACA,UACA,MACA,UACA,UACA,QACA,UACA,OACA,MACA,QACA,OACA,QACA,QACA,OACA,QACA,OACA,UACA,OACA,QACA,OACA,OACA,OACA,MACA,SACA,OACA,OACA,OACA,SACA,SACA,OACA,SACA,OACA,OACA,UACA,OACA,QACA,SACA,OACA,OACA,OACA,OACA,QACA,QACA,QACA,OACA,QACA,UACA,QACA,QACA,QACA,OACA,OACA,SACA,MACA,QACA,QACA,QACA,OACA,OACA,oECt/DiC,gBACjClV,IAAAA,SACAmV,IAAAA,OACAC,IAAAA,YACAp0B,IAAAA,WAOM+J,EAAaR,GAAY5O,IAEzBpN,EAAmBgc,GAAYhP,IAE/B9P,EAAc8e,GAAYzO,IACxB7O,EAAaF,OAAOC,SAApBC,SAMFooC,EAJyBpnB,SAC7BknB,EAAO/F,QAAO,SAACkG,GAAD,OAAW9gC,QAAQ8gC,EAAMC,wBAGapvB,QAAQ3S,MAC5D,YAAA,OAAcvG,MAAXuoC,QAML,OAAIjnC,GAAoB9C,EACf,KAHP4pC,IAA2BtqB,GAA6B,MAAftf,GAOrCuV,EACFA,EAAWo0B,GAEXroC,OAAOC,SAASG,KAAOioC,EAElB,MAGFjrB,gCAAG6V,yBCnBgB,gBAC1BA,IAAAA,aACAD,oBAAAA,aAAsB,KACtBh3B,IAAAA,iBACAixB,IAAAA,gBACA7C,gCACAC,sBAAAA,aAAwB3B,KAElBggB,EAAsCnH,yBAHdpZ,KAK5B,IAGF,IAAK8E,EAEH,MAAM,IAAI38B,MAAM,4BAGM,MAApB0L,GACFE,EAAoBF,GAGtB,IAAM2sC,EAAgCpH,cAAYlX,EAAuB,IACzE,OACEjN,gBAACwrB,YAAS54C,QAASmtB,GAAiB/N,MAAOA,IACzCgO,gBAACyrB,eAAYv3B,UAAWA,GAAW0mB,QAAS,MAC1C5a,gBAAC+M,GAAgCye,UAC/B15C,MAAO,CACLk7B,4BAA6Bse,EAC7Bre,sBAAuBse,IAGzBvrB,gBAAC2V,IACC9F,YAAaA,EACb+F,oBAAqBA,GAErB5V,gBAACmM,SACDnM,gBAACkN,SACDlN,gBAACsP,SACAuG,oICvEX3pB,EACAL,GAIA,IAAMM,EAAuB,IAAIC,gBAAgBF,GAC3CG,EAAStb,OAAOub,YAAYH,GAKlC,MAAO,CAAEI,cAJa,IAAIH,qBACrBC,EACAR,IACFpE,WACqB4E,OAAAA,4J3IAGtE,GAC3B,OAAOC,KAAKD,gFALiBA,GAC7B,OAAO2jC,KAAK3jC,6TuIQd,WACE,OAAmB,MAAf+iC,IAVExzB,EACa7C,GAAgBzC,GAAME,YACzC44B,GAAc,IAAIa,cAAYr0B,EAA4Bhd,WAAY,CACpEkd,QAASd,OAAOY,EAA4B9c,eAUrCswC,OAbHxzB,iCKJN,OAAOjD,GAAgBrC,GAAME,iE3JqB/B,WACE,OAAOtT,+VuJy+DT,WACE,OAAOmsC,wCKhgEP,OAAOt2B,GAAgBzC,GAAME,mSjGe/B,SACE5J,EACAuW,EACArf,GAIA,YAJAA,IAAAA,EAAO,KAESyK,GAAe3B,GAG7B,OAAO,EAKT,GAFmB,IAAI9D,UAAQ8D,GAAUsjC,oBAGvC,OAAO,EAGT,IAAMC,EAAmBzsB,GAAwB,CAAE9W,SAAAA,EAAU9I,KAAAA,IAE7D,QAAKqsC,IAIkC,IAAIrnC,UACzCqnC,GACAD,qBAGkChtB,GAAmBtW,EAAUuW,EAAQrf,2SkG3CjCqE,GACxCmO,GAAMM,SAASpT,EAAY,CAAE2E,QAAAA,EAAS3C,YAAa1Q,yBAAiBuM,wECE7C0e,EAAeqwB,GAOtC,OANgBC,uBACd,IAAIjwB,QAAM,CACR7hB,SAAU6xC,GhKFY,GgKGtB/3C,KAAMi4C,YAAUC,WAGbloC,CAAQ0X,GAAOhU,2S5GLxB,yN6GF2B1P,GACzB,IACMnG,KAAQ2xC,QAD6BxrC,aAAAA,OAQ3C,OANehH,OAAO+G,KAAKlG,GAAKwd,QAAO,SAACC,EAAK68B,SAC3C,YACK78B,UACM,YAAR68B,EAAoB,OAASA,GAAOt6C,EAAYs6C,SAElD,IACU,ibCLa,oBAAGC,QAAAA,aAAU,KAAIC,IAAAA,SACrCxrB,EAAahK,KACb3Y,EAASmuC,GAAYC,GACrB70B,EAXW,SAAC20B,GAAD,OAAqB,IAAYA,EAWlCG,CAAWH,GAQ3BI,eAAkB,CAAE/0B,QAAAA,EAASg1B,OANd,WACT5rB,GACF3iB,KAIiCmmC,SAlBtB"}